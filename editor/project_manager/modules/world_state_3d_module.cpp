#include "world_state_3d_module.h"

void WorldState3DModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();
	
	if (filename == "WorldState3D.gd") {
		p_file->store_line("# WorldState3D.gd");
		p_file->store_line("# Generated by Lupine Engine - 3D World State Manager");
		p_file->store_line("# Manages persistent world variables and state");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal world_variable_changed(var_name: String, old_value, new_value)");
		p_file->store_line("signal location_discovered(location_name: String)");
		p_file->store_line("signal puzzle_completed(puzzle_id: String)");
		p_file->store_line("signal trigger_activated(trigger_id: String)");
		p_file->store_line("");
		p_file->store_line("# World state data");
		p_file->store_line("var world_variables: Dictionary = {}");
		p_file->store_line("var discovered_locations: Array[String] = []");
		p_file->store_line("var completed_puzzles: Array[String] = []");
		p_file->store_line("var activated_triggers: Array[String] = []");
		p_file->store_line("var collected_items: Array[String] = []");
		p_file->store_line("");
		p_file->store_line("# Current world state");
		p_file->store_line("var current_location: String = \"\"");
		p_file->store_line("var player_spawn_point: String = \"default\"");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t_initialize_default_variables()");
		p_file->store_line("");
		p_file->store_line("func set_variable(var_name: String, value):");
		p_file->store_line("\tvar old_value = world_variables.get(var_name, null)");
		p_file->store_line("\tworld_variables[var_name] = value");
		p_file->store_line("\tworld_variable_changed.emit(var_name, old_value, value)");
		p_file->store_line("");
		p_file->store_line("func get_variable(var_name: String, default_value = null):");
		p_file->store_line("\treturn world_variables.get(var_name, default_value)");
		p_file->store_line("");
		p_file->store_line("func has_variable(var_name: String) -> bool:");
		p_file->store_line("\treturn world_variables.has(var_name)");
		p_file->store_line("");
		p_file->store_line("func increment_variable(var_name: String, amount: float = 1.0):");
		p_file->store_line("\tvar current_value = get_variable(var_name, 0.0)");
		p_file->store_line("\tset_variable(var_name, current_value + amount)");
		p_file->store_line("");
		p_file->store_line("func discover_location(location_name: String):");
		p_file->store_line("\tif not discovered_locations.has(location_name):");
		p_file->store_line("\t\tdiscovered_locations.append(location_name)");
		p_file->store_line("\t\tlocation_discovered.emit(location_name)");
		p_file->store_line("\t\tif PopupManager:");
		p_file->store_line("\t\t\tPopupManager.show_notification(\"Location Discovered\", location_name)");
		p_file->store_line("");
		p_file->store_line("func is_location_discovered(location_name: String) -> bool:");
		p_file->store_line("\treturn discovered_locations.has(location_name)");
		p_file->store_line("");
		p_file->store_line("func complete_puzzle(puzzle_id: String):");
		p_file->store_line("\tif not completed_puzzles.has(puzzle_id):");
		p_file->store_line("\t\tcompleted_puzzles.append(puzzle_id)");
		p_file->store_line("\t\tpuzzle_completed.emit(puzzle_id)");
		p_file->store_line("\t\tif PopupManager:");
		p_file->store_line("\t\t\tPopupManager.show_notification(\"Puzzle Solved!\", \"Well done!\")");
		p_file->store_line("");
		p_file->store_line("func is_puzzle_completed(puzzle_id: String) -> bool:");
		p_file->store_line("\treturn completed_puzzles.has(puzzle_id)");
		p_file->store_line("");
		p_file->store_line("func activate_trigger(trigger_id: String, persistent: bool = true):");
		p_file->store_line("\tif persistent and not activated_triggers.has(trigger_id):");
		p_file->store_line("\t\tactivated_triggers.append(trigger_id)");
		p_file->store_line("\ttrigger_activated.emit(trigger_id)");
		p_file->store_line("");
		p_file->store_line("func is_trigger_activated(trigger_id: String) -> bool:");
		p_file->store_line("\treturn activated_triggers.has(trigger_id)");
		p_file->store_line("");
		p_file->store_line("func collect_item(item_id: String):");
		p_file->store_line("\tif not collected_items.has(item_id):");
		p_file->store_line("\t\tcollected_items.append(item_id)");
		p_file->store_line("");
		p_file->store_line("func is_item_collected(item_id: String) -> bool:");
		p_file->store_line("\treturn collected_items.has(item_id)");
		p_file->store_line("");
		p_file->store_line("func check_condition(condition: Dictionary) -> bool:");
		p_file->store_line("\t# Check various world state conditions");
		p_file->store_line("\tmatch condition.type:");
		p_file->store_line("\t\t\"variable\":");
		p_file->store_line("\t\t\treturn _check_variable_condition(condition)");
		p_file->store_line("\t\t\"location\":");
		p_file->store_line("\t\t\treturn is_location_discovered(condition.location)");
		p_file->store_line("\t\t\"puzzle\":");
		p_file->store_line("\t\t\treturn is_puzzle_completed(condition.puzzle_id)");
		p_file->store_line("\t\t\"trigger\":");
		p_file->store_line("\t\t\treturn is_trigger_activated(condition.trigger_id)");
		p_file->store_line("\t\t\"item\":");
		p_file->store_line("\t\t\treturn is_item_collected(condition.item_id)");
		p_file->store_line("\t\t\"and\":");
		p_file->store_line("\t\t\treturn _check_and_condition(condition.conditions)");
		p_file->store_line("\t\t\"or\":");
		p_file->store_line("\t\t\treturn _check_or_condition(condition.conditions)");
		p_file->store_line("\t\t\"not\":");
		p_file->store_line("\t\t\treturn not check_condition(condition.condition)");
		p_file->store_line("\treturn false");
		p_file->store_line("");
		p_file->store_line("func _check_variable_condition(condition: Dictionary) -> bool:");
		p_file->store_line("\tvar var_name = condition.variable");
		p_file->store_line("\tvar operator = condition.get(\"operator\", \"==\")");
		p_file->store_line("\tvar expected_value = condition.value");
		p_file->store_line("\tvar current_value = get_variable(var_name)");
		p_file->store_line("\t");
		p_file->store_line("\tmatch operator:");
		p_file->store_line("\t\t\"==\":");
		p_file->store_line("\t\t\treturn current_value == expected_value");
		p_file->store_line("\t\t\"!=\":");
		p_file->store_line("\t\t\treturn current_value != expected_value");
		p_file->store_line("\t\t\">\":");
		p_file->store_line("\t\t\treturn current_value > expected_value");
		p_file->store_line("\t\t\">=\":");
		p_file->store_line("\t\t\treturn current_value >= expected_value");
		p_file->store_line("\t\t\"<\":");
		p_file->store_line("\t\t\treturn current_value < expected_value");
		p_file->store_line("\t\t\"<=\":");
		p_file->store_line("\t\t\treturn current_value <= expected_value");
		p_file->store_line("\treturn false");
		p_file->store_line("");
		p_file->store_line("func _check_and_condition(conditions: Array) -> bool:");
		p_file->store_line("\tfor condition in conditions:");
		p_file->store_line("\t\tif not check_condition(condition):");
		p_file->store_line("\t\t\treturn false");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func _check_or_condition(conditions: Array) -> bool:");
		p_file->store_line("\tfor condition in conditions:");
		p_file->store_line("\t\tif check_condition(condition):");
		p_file->store_line("\t\t\treturn true");
		p_file->store_line("\treturn false");
		p_file->store_line("");
		p_file->store_line("func get_save_data() -> Dictionary:");
		p_file->store_line("\treturn {");
		p_file->store_line("\t\t\"world_variables\": world_variables,");
		p_file->store_line("\t\t\"discovered_locations\": discovered_locations,");
		p_file->store_line("\t\t\"completed_puzzles\": completed_puzzles,");
		p_file->store_line("\t\t\"activated_triggers\": activated_triggers,");
		p_file->store_line("\t\t\"collected_items\": collected_items,");
		p_file->store_line("\t\t\"current_location\": current_location,");
		p_file->store_line("\t\t\"player_spawn_point\": player_spawn_point");
		p_file->store_line("\t}");
		p_file->store_line("");
		p_file->store_line("func load_save_data(data: Dictionary):");
		p_file->store_line("\tworld_variables = data.get(\"world_variables\", {})");
		p_file->store_line("\tdiscovered_locations = data.get(\"discovered_locations\", [])");
		p_file->store_line("\tcompleted_puzzles = data.get(\"completed_puzzles\", [])");
		p_file->store_line("\tactivated_triggers = data.get(\"activated_triggers\", [])");
		p_file->store_line("\tcollected_items = data.get(\"collected_items\", [])");
		p_file->store_line("\tcurrent_location = data.get(\"current_location\", \"\")");
		p_file->store_line("\tplayer_spawn_point = data.get(\"player_spawn_point\", \"default\")");
		p_file->store_line("");
		p_file->store_line("func _initialize_default_variables():");
		p_file->store_line("\t# Set up default world variables");
		p_file->store_line("\tset_variable(\"game_started\", false)");
		p_file->store_line("\tset_variable(\"tutorial_completed\", false)");
		p_file->store_line("\tset_variable(\"stars_collected\", 0)");
		p_file->store_line("\tset_variable(\"coins_collected\", 0)");
		p_file->store_line("\tset_variable(\"secrets_found\", 0)");
	} else if (filename == "WorldTrigger3D.gd") {
		p_file->store_line("# WorldTrigger3D.gd");
		p_file->store_line("# Generated by Lupine Engine - 3D World Trigger");
		p_file->store_line("# Triggers world state changes and events");
		p_file->store_line("");
		p_file->store_line("extends Area3D");
		p_file->store_line("class_name WorldTrigger3D");
		p_file->store_line("");
		p_file->store_line("# Trigger properties");
		p_file->store_line("@export var trigger_id: String = \"\"");
		p_file->store_line("@export var trigger_once: bool = true");
		p_file->store_line("@export var require_player: bool = true");
		p_file->store_line("@export var activation_conditions: Array[Dictionary] = []");
		p_file->store_line("");
		p_file->store_line("# Actions to perform");
		p_file->store_line("@export var actions: Array[Dictionary] = []");
		p_file->store_line("");
		p_file->store_line("# State");
		p_file->store_line("var has_triggered: bool = false");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tbody_entered.connect(_on_body_entered)");
		p_file->store_line("\tbody_exited.connect(_on_body_exited)");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if already triggered");
		p_file->store_line("\tif trigger_once and WorldState3D.is_trigger_activated(trigger_id):");
		p_file->store_line("\t\thas_triggered = true");
		p_file->store_line("");
		p_file->store_line("func _on_body_entered(body: Node3D):");
		p_file->store_line("\tif has_triggered and trigger_once:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tif require_player and not body.is_in_group(\"player\"):");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Check activation conditions");
		p_file->store_line("\tif not _check_conditions():");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t_trigger_actions()");
		p_file->store_line("");
		p_file->store_line("func _on_body_exited(body: Node3D):");
		p_file->store_line("\t# Handle exit events if needed");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("func _check_conditions() -> bool:");
		p_file->store_line("\tfor condition in activation_conditions:");
		p_file->store_line("\t\tif not WorldState3D.check_condition(condition):");
		p_file->store_line("\t\t\treturn false");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func _trigger_actions():");
		p_file->store_line("\thas_triggered = true");
		p_file->store_line("\tWorldState3D.activate_trigger(trigger_id, trigger_once)");
		p_file->store_line("\t");
		p_file->store_line("\tfor action in actions:");
		p_file->store_line("\t\t_execute_action(action)");
		p_file->store_line("");
		p_file->store_line("func _execute_action(action: Dictionary):");
		p_file->store_line("\tmatch action.type:");
		p_file->store_line("\t\t\"set_variable\":");
		p_file->store_line("\t\t\tWorldState3D.set_variable(action.variable, action.value)");
		p_file->store_line("\t\t\"discover_location\":");
		p_file->store_line("\t\t\tWorldState3D.discover_location(action.location)");
		p_file->store_line("\t\t\"start_dialogue\":");
		p_file->store_line("\t\t\tif DialogueSystem:");
		p_file->store_line("\t\t\t\tDialogueSystem.start_dialogue(null, action.dialogue_id)");
		p_file->store_line("\t\t\"start_quest\":");
		p_file->store_line("\t\t\tif QuestSystem:");
		p_file->store_line("\t\t\t\tQuestSystem.start_quest(action.quest_id)");
		p_file->store_line("\t\t\"play_sound\":");
		p_file->store_line("\t\t\tif AudioManager:");
		p_file->store_line("\t\t\t\tAudioManager.play_sfx(action.sound_id)");
		p_file->store_line("\t\t\"show_popup\":");
		p_file->store_line("\t\t\tif PopupManager:");
		p_file->store_line("\t\t\t\tPopupManager.show_notification(action.title, action.message)");
		p_file->store_line("\t\t\"teleport_player\":");
		p_file->store_line("\t\t\t_teleport_player(action.target_position)");
		p_file->store_line("\t\t\"change_scene\":");
		p_file->store_line("\t\t\tif LevelManager:");
		p_file->store_line("\t\t\t\tLevelManager.change_level(action.scene_path, action.get(\"spawn_point\", \"\"))");
		p_file->store_line("");
		p_file->store_line("func _teleport_player(target_pos: Vector3):");
		p_file->store_line("\tvar player = get_tree().get_first_node_in_group(\"player\")");
		p_file->store_line("\tif player:");
		p_file->store_line("\t\tplayer.global_position = target_pos");
	}
}

void WorldState3DModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "WorldTrigger3D") {
		p_file->store_line("[gd_scene load_steps=3 format=3 uid=\"uid://world_trigger_3d\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/world/WorldTrigger3D.gd\" id=\"1_trigger_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"BoxShape3D\" id=\"BoxShape3D_1\"]");
		p_file->store_line("size = Vector3(2, 2, 2)");
		p_file->store_line("");
		p_file->store_line("[node name=\"WorldTrigger3D\" type=\"Area3D\"]");
		p_file->store_line("script = ExtResource(\"1_trigger_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape3D\" type=\"CollisionShape3D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"BoxShape3D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"DebugMesh\" type=\"MeshInstance3D\" parent=\".\"]");
		p_file->store_line("visible = false");
	}
}
