#include "relationship_system_module.h"

void RelationshipSystemModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();

	if (filename == "RelationshipManager.gd") {
		p_file->store_line("# RelationshipManager.gd");
		p_file->store_line("# Generated by Lupine Engine - Relationship Manager");
		p_file->store_line("# Complete relationship system with support conversations and faction reputation");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal relationship_changed(character_id: String, old_level: int, new_level: int)");
		p_file->store_line("signal support_conversation_unlocked(char1_id: String, char2_id: String, rank: String)");
		p_file->store_line("signal faction_reputation_changed(faction_id: String, old_rep: int, new_rep: int)");
		p_file->store_line("signal character_interaction(character_id: String, interaction_type: String)");
		p_file->store_line("signal romance_milestone(character_id: String, milestone: String)");
		p_file->store_line("signal friendship_milestone(character_id: String, milestone: String)");
		p_file->store_line("");
		p_file->store_line("# Relationship data");
		p_file->store_line("var characters: Dictionary = {}  # character_id -> Character");
		p_file->store_line("var relationships: Dictionary = {}  # \"char1_char2\" -> Relationship");
		p_file->store_line("var factions: Dictionary = {}  # faction_id -> FactionReputation");
		p_file->store_line("var support_conversations: Dictionary = {}  # \"char1_char2_rank\" -> SupportConversation");
		p_file->store_line("");
		p_file->store_line("# Interaction tracking");
		p_file->store_line("var daily_interactions: Dictionary = {}  # character_id -> count");
		p_file->store_line("var last_interaction_date: Dictionary = {}  # character_id -> date");
		p_file->store_line("var interaction_cooldowns: Dictionary = {}  # character_id -> cooldown_time");
		p_file->store_line("");
		p_file->store_line("# System settings");
		p_file->store_line("@export var max_daily_interactions: int = 3");
		p_file->store_line("@export var friendship_decay_enabled: bool = true");
		p_file->store_line("@export var friendship_decay_rate: float = 0.1");
		p_file->store_line("@export var romance_enabled: bool = true");
		p_file->store_line("@export var max_romance_partners: int = 1");
		p_file->store_line("");
		p_file->store_line("# Relationship thresholds");
		p_file->store_line("enum RelationshipLevel {");
		p_file->store_line("\tSTRANGER = 0,");
		p_file->store_line("\tACQUAINTANCE = 100,");
		p_file->store_line("\tFRIEND = 250,");
		p_file->store_line("\tCLOSE_FRIEND = 500,");
		p_file->store_line("\tBEST_FRIEND = 750,");
		p_file->store_line("\tROMANCE_INTEREST = 1000,");
		p_file->store_line("\tROMANCE_PARTNER = 1250,");
		p_file->store_line("\tMARRIED = 1500");
		p_file->store_line("}");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Load relationship data");
		p_file->store_line("\tload_characters_data()");
		p_file->store_line("\tload_factions_data()");
		p_file->store_line("\tload_support_conversations()");
		p_file->store_line("\t");
		p_file->store_line("\t# Setup daily reset");
		p_file->store_line("\tif GameTime:");
		p_file->store_line("\t\tGameTime.day_changed.connect(_on_day_changed)");
		p_file->store_line("");
		p_file->store_line("func load_characters_data():");
		p_file->store_line("\tvar file_path = \"res://data/relationships/characters.json\"");
		p_file->store_line("\tif not FileAccess.file_exists(file_path):");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar file = FileAccess.open(file_path, FileAccess.READ)");
		p_file->store_line("\tvar json_text = file.get_as_text()");
		p_file->store_line("\tfile.close()");
		p_file->store_line("\t");
		p_file->store_line("\tvar json = JSON.new()");
		p_file->store_line("\tvar parse_result = json.parse(json_text)");
		p_file->store_line("\tif parse_result != OK:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar data = json.data");
		p_file->store_line("\tfor char_data in data.characters:");
		p_file->store_line("\t\tvar character = Character.new()");
		p_file->store_line("\t\tcharacter.initialize_from_data(char_data)");
		p_file->store_line("\t\tcharacters[character.character_id] = character");
		p_file->store_line("");
		p_file->store_line("func get_character(character_id: String) -> Character:");
		p_file->store_line("\treturn characters.get(character_id, null)");
		p_file->store_line("");
		p_file->store_line("func get_relationship(char1_id: String, char2_id: String) -> Relationship:");
		p_file->store_line("\tvar key = _get_relationship_key(char1_id, char2_id)");
		p_file->store_line("\tif not relationships.has(key):");
		p_file->store_line("\t\t# Create new relationship");
		p_file->store_line("\t\tvar relationship = Relationship.new()");
		p_file->store_line("\t\trelationship.character1_id = char1_id");
		p_file->store_line("\t\trelationship.character2_id = char2_id");
		p_file->store_line("\t\trelationships[key] = relationship");
		p_file->store_line("\treturn relationships[key]");
		p_file->store_line("");
		p_file->store_line("func _get_relationship_key(char1_id: String, char2_id: String) -> String:");
		p_file->store_line("\t# Always use alphabetical order for consistency");
		p_file->store_line("\tif char1_id < char2_id:");
		p_file->store_line("\t\treturn char1_id + \"_\" + char2_id");
		p_file->store_line("\telse:");
		p_file->store_line("\t\treturn char2_id + \"_\" + char1_id");
		p_file->store_line("");
		p_file->store_line("func increase_relationship(character_id: String, points: int, interaction_type: String = \"\"):");
		p_file->store_line("\t# Check daily interaction limits");
		p_file->store_line("\tif not can_interact_with_character(character_id):");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar player_id = \"player\"");
		p_file->store_line("\tvar relationship = get_relationship(player_id, character_id)");
		p_file->store_line("\tvar old_level = get_relationship_level(relationship.friendship_points)");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply character-specific modifiers");
		p_file->store_line("\tvar character = get_character(character_id)");
		p_file->store_line("\tif character:");
		p_file->store_line("\t\tpoints = character.apply_interaction_modifier(points, interaction_type)");
		p_file->store_line("\t");
		p_file->store_line("\t# Add points");
		p_file->store_line("\trelationship.friendship_points += points");
		p_file->store_line("\trelationship.friendship_points = max(0, relationship.friendship_points)");
		p_file->store_line("\t");
		p_file->store_line("\t# Track interaction");
		p_file->store_line("\t_track_interaction(character_id, interaction_type)");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for level changes");
		p_file->store_line("\tvar new_level = get_relationship_level(relationship.friendship_points)");
		p_file->store_line("\tif new_level != old_level:");
		p_file->store_line("\t\trelationship_changed.emit(character_id, old_level, new_level)");
		p_file->store_line("\t\t_check_support_conversation_unlock(player_id, character_id)");
		p_file->store_line("\t\t_check_relationship_milestones(character_id, new_level)");
		p_file->store_line("\t");
		p_file->store_line("\tcharacter_interaction.emit(character_id, interaction_type)");
		p_file->store_line("");
		p_file->store_line("func get_relationship_level(points: int) -> int:");
		p_file->store_line("\tif points >= RelationshipLevel.MARRIED:");
		p_file->store_line("\t\treturn RelationshipLevel.MARRIED");
		p_file->store_line("\telif points >= RelationshipLevel.ROMANCE_PARTNER:");
		p_file->store_line("\t\treturn RelationshipLevel.ROMANCE_PARTNER");
		p_file->store_line("\telif points >= RelationshipLevel.ROMANCE_INTEREST:");
		p_file->store_line("\t\treturn RelationshipLevel.ROMANCE_INTEREST");
		p_file->store_line("\telif points >= RelationshipLevel.BEST_FRIEND:");
		p_file->store_line("\t\treturn RelationshipLevel.BEST_FRIEND");
		p_file->store_line("\telif points >= RelationshipLevel.CLOSE_FRIEND:");
		p_file->store_line("\t\treturn RelationshipLevel.CLOSE_FRIEND");
		p_file->store_line("\telif points >= RelationshipLevel.FRIEND:");
		p_file->store_line("\t\treturn RelationshipLevel.FRIEND");
		p_file->store_line("\telif points >= RelationshipLevel.ACQUAINTANCE:");
		p_file->store_line("\t\treturn RelationshipLevel.ACQUAINTANCE");
		p_file->store_line("\telse:");
		p_file->store_line("\t\treturn RelationshipLevel.STRANGER");
		p_file->store_line("");
		p_file->store_line("func can_interact_with_character(character_id: String) -> bool:");
		p_file->store_line("\t# Check daily interaction limit");
		p_file->store_line("\tvar today_interactions = daily_interactions.get(character_id, 0)");
		p_file->store_line("\tif today_interactions >= max_daily_interactions:");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Check cooldown");
		p_file->store_line("\tif interaction_cooldowns.has(character_id):");
		p_file->store_line("\t\tvar cooldown_end = interaction_cooldowns[character_id]");
		p_file->store_line("\t\tif Time.get_ticks_msec() < cooldown_end:");
		p_file->store_line("\t\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func _track_interaction(character_id: String, interaction_type: String):");
		p_file->store_line("\t# Update daily interaction count");
		p_file->store_line("\tdaily_interactions[character_id] = daily_interactions.get(character_id, 0) + 1");
		p_file->store_line("\t");
		p_file->store_line("\t# Set interaction cooldown (5 minutes)");
		p_file->store_line("\tinteraction_cooldowns[character_id] = Time.get_ticks_msec() + 300000");
		p_file->store_line("\t");
		p_file->store_line("\t# Update last interaction date");
		p_file->store_line("\tif GameTime:");
		p_file->store_line("\t\tlast_interaction_date[character_id] = GameTime.get_current_date()");
		p_file->store_line("");
		p_file->store_line("func _on_day_changed():");
		p_file->store_line("\t# Reset daily interactions");
		p_file->store_line("\tdaily_interactions.clear()");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply friendship decay");
		p_file->store_line("\tif friendship_decay_enabled:");
		p_file->store_line("\t\t_apply_friendship_decay()");
		p_file->store_line("");
		p_file->store_line("func _apply_friendship_decay():");
		p_file->store_line("\tfor character_id in characters.keys():");
		p_file->store_line("\t\tif character_id == \"player\":");
		p_file->store_line("\t\t\tcontinue");
		p_file->store_line("\t\t");
		p_file->store_line("\t\t# Check if player interacted recently");
		p_file->store_line("\t\tvar last_date = last_interaction_date.get(character_id, null)");
		p_file->store_line("\t\tif last_date and GameTime:");
		p_file->store_line("\t\t\tvar days_since = GameTime.get_days_since(last_date)");
		p_file->store_line("\t\t\tif days_since > 7:  # No interaction for a week");
		p_file->store_line("\t\t\t\tvar decay_amount = int(friendship_decay_rate * days_since)");
		p_file->store_line("\t\t\t\tincrease_relationship(character_id, -decay_amount, \"decay\")");
		p_file->store_line("");
		p_file->store_line("func get_faction_reputation(faction_id: String) -> int:");
		p_file->store_line("\tif factions.has(faction_id):");
		p_file->store_line("\t\treturn factions[faction_id].reputation");
		p_file->store_line("\treturn 0");
		p_file->store_line("");
		p_file->store_line("func modify_faction_reputation(faction_id: String, change: int):");
		p_file->store_line("\tif not factions.has(faction_id):");
		p_file->store_line("\t\tfactions[faction_id] = FactionReputation.new()");
		p_file->store_line("\t\tfactions[faction_id].faction_id = faction_id");
		p_file->store_line("\t");
		p_file->store_line("\tvar faction = factions[faction_id]");
		p_file->store_line("\tvar old_rep = faction.reputation");
		p_file->store_line("\tfaction.reputation += change");
		p_file->store_line("\tfaction.reputation = clamp(faction.reputation, -1000, 1000)");
		p_file->store_line("\t");
		p_file->store_line("\tfaction_reputation_changed.emit(faction_id, old_rep, faction.reputation)");
		p_file->store_line("\t");
		p_file->store_line("\t# Update individual character relationships in faction");
		p_file->store_line("\t_update_faction_member_relationships(faction_id, change)");
		p_file->store_line("");
		p_file->store_line("func _update_faction_member_relationships(faction_id: String, change: int):");
		p_file->store_line("\t# Apply faction reputation change to all faction members");
		p_file->store_line("\tfor character in characters.values():");
		p_file->store_line("\t\tif character.faction_id == faction_id:");
		p_file->store_line("\t\t\tvar faction_modifier = change * 0.3  # Faction changes affect individuals less");
		p_file->store_line("\t\t\tincrease_relationship(character.character_id, int(faction_modifier), \"faction_change\")");
	}
}

void RelationshipSystemModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "RelationshipUI") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://relationship_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/RelationshipUI.gd\" id=\"1_relationship_ui_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"RelationshipUI\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_relationship_ui_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("color = Color(0, 0, 0, 0.8)");
		p_file->store_line("");
		p_file->store_line("[node name=\"MainContainer\" type=\"HBoxContainer\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 8");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = -400.0");
		p_file->store_line("offset_top = -250.0");
		p_file->store_line("offset_right = 400.0");
		p_file->store_line("offset_bottom = 250.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"CharacterList\" type=\"VBoxContainer\" parent=\"MainContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_horizontal = 3");
		p_file->store_line("");
		p_file->store_line("[node name=\"RelationshipDetails\" type=\"VBoxContainer\" parent=\"MainContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_horizontal = 3");
		p_file->store_line("");
		p_file->store_line("[node name=\"CharacterPortrait\" type=\"TextureRect\" parent=\"MainContainer/RelationshipDetails\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_vertical = 2");
		p_file->store_line("");
		p_file->store_line("[node name=\"RelationshipInfo\" type=\"VBoxContainer\" parent=\"MainContainer/RelationshipDetails\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_vertical = 3");
	} else if (p_scene_name == "SupportConversationUI") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://support_conversation_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/SupportConversationUI.gd\" id=\"1_support_ui_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"SupportConversationUI\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_support_ui_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("color = Color(0, 0, 0, 0.9)");
		p_file->store_line("");
		p_file->store_line("[node name=\"SupportPanel\" type=\"VBoxContainer\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 8");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = -300.0");
		p_file->store_line("offset_top = -200.0");
		p_file->store_line("offset_right = 300.0");
		p_file->store_line("offset_bottom = 200.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"Title\" type=\"Label\" parent=\"SupportPanel\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Support Conversations\"");
		p_file->store_line("horizontal_alignment = 1");
		p_file->store_line("");
		p_file->store_line("[node name=\"SupportList\" type=\"ScrollContainer\" parent=\"SupportPanel\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_vertical = 3");
		p_file->store_line("");
		p_file->store_line("[node name=\"SupportItems\" type=\"VBoxContainer\" parent=\"SupportPanel/SupportList\"]");
		p_file->store_line("layout_mode = 2");
	} else if (p_scene_name == "FactionStatusUI") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://faction_status_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/FactionStatusUI.gd\" id=\"1_faction_ui_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"FactionStatusUI\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_faction_ui_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("color = Color(0, 0, 0, 0.8)");
		p_file->store_line("");
		p_file->store_line("[node name=\"FactionPanel\" type=\"VBoxContainer\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 8");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = -350.0");
		p_file->store_line("offset_top = -250.0");
		p_file->store_line("offset_right = 350.0");
		p_file->store_line("offset_bottom = 250.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"Title\" type=\"Label\" parent=\"FactionPanel\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Faction Reputation\"");
		p_file->store_line("horizontal_alignment = 1");
		p_file->store_line("");
		p_file->store_line("[node name=\"FactionList\" type=\"ScrollContainer\" parent=\"FactionPanel\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_vertical = 3");
		p_file->store_line("");
		p_file->store_line("[node name=\"FactionItems\" type=\"VBoxContainer\" parent=\"FactionPanel/FactionList\"]");
		p_file->store_line("layout_mode = 2");
	}
}
