#include "background_manager_module.h"

void BackgroundManagerModule::generate_script(Ref<FileAccess> p_file) {
	p_file->store_line("# BackgroundManager.gd");
	p_file->store_line("# Generated by Lupine Engine - Background Manager");
	p_file->store_line("# Manages backgrounds, key images, and scene transitions");
	p_file->store_line("");
	p_file->store_line("extends Node");
	p_file->store_line("");
	p_file->store_line("# Signals");
	p_file->store_line("signal background_changed(background_name: String)");
	p_file->store_line("signal key_image_shown(image_name: String)");
	p_file->store_line("signal key_image_cleared()");
	p_file->store_line("signal transition_started(effect: String)");
	p_file->store_line("signal transition_finished()");
	p_file->store_line("");
	p_file->store_line("# Current state");
	p_file->store_line("var current_background: String = \"\"");
	p_file->store_line("var current_key_image: String = \"\"");
	p_file->store_line("var background_texture: Texture2D = null");
	p_file->store_line("var key_image_texture: Texture2D = null");
	p_file->store_line("");
	p_file->store_line("# Display references");
	p_file->store_line("var background_display: Control = null");
	p_file->store_line("var key_image_display: Control = null");
	p_file->store_line("");
	p_file->store_line("# Asset cache");
	p_file->store_line("var background_cache = {}");
	p_file->store_line("var backgrounds_path = \"assets/backgrounds\"");
	p_file->store_line("");
	p_file->store_line("# Transition settings");
	p_file->store_line("var transition_duration = 0.5");
	p_file->store_line("var is_transitioning = false");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\t# Connect to VN Script Parser commands");
	p_file->store_line("\tif VNScriptParser:");
	p_file->store_line("\t\tVNScriptParser.command_executed.connect(_on_command_executed)");
	p_file->store_line("\t");
	p_file->store_line("\t# Scan for available backgrounds");
	p_file->store_line("\tscan_backgrounds()");
	p_file->store_line("\t");
	p_file->store_line("\tprint(\"Background Manager initialized\")");
	p_file->store_line("");
	p_file->store_line("# Register display UI elements");
	p_file->store_line("func register_background_display(display_node: Control):");
	p_file->store_line("\tbackground_display = display_node");
	p_file->store_line("\tprint(\"Registered background display\")");
	p_file->store_line("");
	p_file->store_line("func register_key_image_display(display_node: Control):");
	p_file->store_line("\tkey_image_display = display_node");
	p_file->store_line("\tprint(\"Registered key image display\")");
	p_file->store_line("");
	p_file->store_line("# Handle commands from script parser");
	p_file->store_line("func _on_command_executed(command: String, args: Array):");
	p_file->store_line("\tmatch command:");
	p_file->store_line("\t\t\"background\":");
	p_file->store_line("\t\t\tif args.size() > 0:");
	p_file->store_line("\t\t\t\tset_background(args[0])");
	p_file->store_line("\t\t\"showKeyImage\":");
	p_file->store_line("\t\t\tif args.size() > 0:");
	p_file->store_line("\t\t\t\tshow_key_image(args[0])");
	p_file->store_line("\t\t\"clearKeyImage\":");
	p_file->store_line("\t\t\tclear_key_image()");
	p_file->store_line("\t\t\"transitionEffect\":");
	p_file->store_line("\t\t\tif args.size() > 0:");
	p_file->store_line("\t\t\t\tplay_transition_effect(args[0])");
	p_file->store_line("");
	p_file->store_line("# Set background with optional transition");
	p_file->store_line("func set_background(background_name: String, transition_effect: String = \"fade\"):");
	p_file->store_line("\tif is_transitioning:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Find background texture");
	p_file->store_line("\tvar texture = find_background_texture(background_name)");
	p_file->store_line("\tif not texture:");
	p_file->store_line("\t\tprint(\"Background not found: \", background_name)");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tcurrent_background = background_name");
	p_file->store_line("\tbackground_texture = texture");
	p_file->store_line("\t");
	p_file->store_line("\t# Apply transition");
	p_file->store_line("\tif transition_effect != \"none\":");
	p_file->store_line("\t\tapply_background_transition(texture, transition_effect)");
	p_file->store_line("\telse:");
	p_file->store_line("\t\tupdate_background_display()");
	p_file->store_line("\t");
	p_file->store_line("\tbackground_changed.emit(background_name)");
	p_file->store_line("");
	p_file->store_line("# Show key image (CG, special artwork)");
	p_file->store_line("func show_key_image(image_name: String):");
	p_file->store_line("\tvar texture = find_background_texture(image_name)");
	p_file->store_line("\tif not texture:");
	p_file->store_line("\t\tprint(\"Key image not found: \", image_name)");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tcurrent_key_image = image_name");
	p_file->store_line("\tkey_image_texture = texture");
	p_file->store_line("\t");
	p_file->store_line("\tupdate_key_image_display()");
	p_file->store_line("\tkey_image_shown.emit(image_name)");
	p_file->store_line("");
	p_file->store_line("# Clear key image");
	p_file->store_line("func clear_key_image():");
	p_file->store_line("\tcurrent_key_image = \"\"");
	p_file->store_line("\tkey_image_texture = null");
	p_file->store_line("\t");
	p_file->store_line("\tupdate_key_image_display()");
	p_file->store_line("\tkey_image_cleared.emit()");
	p_file->store_line("");
	p_file->store_line("# Find background texture");
	p_file->store_line("func find_background_texture(background_name: String) -> Texture2D:");
	p_file->store_line("\t# Check cache first");
	p_file->store_line("\tif background_cache.has(background_name):");
	p_file->store_line("\t\treturn background_cache[background_name]");
	p_file->store_line("\t");
	p_file->store_line("\t# Try to load as direct path");
	p_file->store_line("\tif FileAccess.file_exists(background_name):");
	p_file->store_line("\t\tvar texture = load(background_name) as Texture2D");
	p_file->store_line("\t\tif texture:");
	p_file->store_line("\t\t\tbackground_cache[background_name] = texture");
	p_file->store_line("\t\t\treturn texture");
	p_file->store_line("\t");
	p_file->store_line("\t# Try common extensions");
	p_file->store_line("\tvar extensions = [\".png\", \".jpg\", \".jpeg\", \".webp\", \".bmp\"]");
	p_file->store_line("\tfor ext in extensions:");
	p_file->store_line("\t\tvar full_path = backgrounds_path + \"/\" + background_name + ext");
	p_file->store_line("\t\tif FileAccess.file_exists(full_path):");
	p_file->store_line("\t\t\tvar texture = load(full_path) as Texture2D");
	p_file->store_line("\t\t\tif texture:");
	p_file->store_line("\t\t\t\tbackground_cache[background_name] = texture");
	p_file->store_line("\t\t\t\treturn texture");
	p_file->store_line("\t");
	p_file->store_line("\treturn null");
	p_file->store_line("");
	p_file->store_line("# Scan backgrounds directory");
	p_file->store_line("func scan_backgrounds():");
	p_file->store_line("\tbackground_cache.clear()");
	p_file->store_line("\t");
	p_file->store_line("\tvar dir = DirAccess.open(backgrounds_path)");
	p_file->store_line("\tif not dir:");
	p_file->store_line("\t\tprint(\"Backgrounds directory not found: \", backgrounds_path)");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tdir.list_dir_begin()");
	p_file->store_line("\tvar file_name = dir.get_next()");
	p_file->store_line("\t");
	p_file->store_line("\twhile file_name != \"\":");
	p_file->store_line("\t\tif not dir.current_is_dir() and is_image_file(file_name):");
	p_file->store_line("\t\t\tvar full_path = backgrounds_path + \"/\" + file_name");
	p_file->store_line("\t\t\tvar texture = load(full_path) as Texture2D");
	p_file->store_line("\t\t\tif texture:");
	p_file->store_line("\t\t\t\tvar key = file_name.get_basename()");
	p_file->store_line("\t\t\t\tbackground_cache[key] = texture");
	p_file->store_line("\t\t\t\tprint(\"Cached background: \", key)");
	p_file->store_line("\t\t");
	p_file->store_line("\t\tfile_name = dir.get_next()");
	p_file->store_line("\t");
	p_file->store_line("\tdir.list_dir_end()");
	p_file->store_line("\tprint(\"Scanned \", background_cache.size(), \" backgrounds\")");
	p_file->store_line("");
	p_file->store_line("# Check if file is an image");
	p_file->store_line("func is_image_file(filename: String) -> bool:");
	p_file->store_line("\tvar ext = filename.get_extension().to_lower()");
	p_file->store_line("\treturn ext in [\"png\", \"jpg\", \"jpeg\", \"webp\", \"bmp\", \"tga\"]");
	p_file->store_line("");
	p_file->store_line("# Apply background transition effect");
	p_file->store_line("func apply_background_transition(new_texture: Texture2D, effect: String):");
	p_file->store_line("\tif not background_display:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tis_transitioning = true");
	p_file->store_line("\ttransition_started.emit(effect)");
	p_file->store_line("\t");
	p_file->store_line("\tvar texture_rect = find_texture_rect(background_display)");
	p_file->store_line("\tif not texture_rect:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tvar tween = create_tween()");
	p_file->store_line("\t");
	p_file->store_line("\tmatch effect.to_lower():");
	p_file->store_line("\t\t\"fade\":");
	p_file->store_line("\t\t\t# Fade out, change texture, fade in");
	p_file->store_line("\t\t\ttween.tween_property(texture_rect, \"modulate:a\", 0.0, transition_duration / 2)");
	p_file->store_line("\t\t\ttween.tween_callback(func(): texture_rect.texture = new_texture)");
	p_file->store_line("\t\t\ttween.tween_property(texture_rect, \"modulate:a\", 1.0, transition_duration / 2)");
	p_file->store_line("\t\t\"slide_left\":");
	p_file->store_line("\t\t\t# Slide from right");
	p_file->store_line("\t\t\tvar original_pos = texture_rect.position");
	p_file->store_line("\t\t\ttexture_rect.position.x += texture_rect.size.x");
	p_file->store_line("\t\t\ttexture_rect.texture = new_texture");
	p_file->store_line("\t\t\ttween.tween_property(texture_rect, \"position\", original_pos, transition_duration)");
	p_file->store_line("\t\t\"slide_right\":");
	p_file->store_line("\t\t\t# Slide from left");
	p_file->store_line("\t\t\tvar original_pos = texture_rect.position");
	p_file->store_line("\t\t\ttexture_rect.position.x -= texture_rect.size.x");
	p_file->store_line("\t\t\ttexture_rect.texture = new_texture");
	p_file->store_line("\t\t\ttween.tween_property(texture_rect, \"position\", original_pos, transition_duration)");
	p_file->store_line("\t\t\"dissolve\":");
	p_file->store_line("\t\t\t# Dissolve effect (similar to fade but with noise)");
	p_file->store_line("\t\t\ttween.tween_property(texture_rect, \"modulate:a\", 0.0, transition_duration / 2)");
	p_file->store_line("\t\t\ttween.tween_callback(func(): texture_rect.texture = new_texture)");
	p_file->store_line("\t\t\ttween.tween_property(texture_rect, \"modulate:a\", 1.0, transition_duration / 2)");
	p_file->store_line("\t\t_:");
	p_file->store_line("\t\t\t# Default: instant change");
	p_file->store_line("\t\t\ttexture_rect.texture = new_texture");
	p_file->store_line("\t");
	p_file->store_line("\ttween.tween_callback(func(): ");
	p_file->store_line("\t\tis_transitioning = false");
	p_file->store_line("\t\ttransition_finished.emit()");
	p_file->store_line("\t)");
	p_file->store_line("");
	p_file->store_line("# Play standalone transition effect");
	p_file->store_line("func play_transition_effect(effect: String):");
	p_file->store_line("\tif not background_display:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\ttransition_started.emit(effect)");
	p_file->store_line("\t");
	p_file->store_line("\tvar texture_rect = find_texture_rect(background_display)");
	p_file->store_line("\tif not texture_rect:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tvar tween = create_tween()");
	p_file->store_line("\t");
	p_file->store_line("\tmatch effect.to_lower():");
	p_file->store_line("\t\t\"flash\":");
	p_file->store_line("\t\t\t# White flash");
	p_file->store_line("\t\t\ttween.tween_property(texture_rect, \"modulate\", Color.WHITE * 2.0, 0.1)");
	p_file->store_line("\t\t\ttween.tween_property(texture_rect, \"modulate\", Color.WHITE, 0.1)");
	p_file->store_line("\t\t\"shake\":");
	p_file->store_line("\t\t\t# Screen shake");
	p_file->store_line("\t\t\tvar original_pos = texture_rect.position");
	p_file->store_line("\t\t\tfor i in range(8):");
	p_file->store_line("\t\t\t\tvar offset = Vector2(randf_range(-10, 10), randf_range(-10, 10))");
	p_file->store_line("\t\t\t\ttween.tween_property(texture_rect, \"position\", original_pos + offset, 0.05)");
	p_file->store_line("\t\t\ttween.tween_property(texture_rect, \"position\", original_pos, 0.05)");
	p_file->store_line("\t\t\"zoom\":");
	p_file->store_line("\t\t\t# Zoom effect");
	p_file->store_line("\t\t\tvar original_scale = texture_rect.scale");
	p_file->store_line("\t\t\ttween.tween_property(texture_rect, \"scale\", original_scale * 1.2, 0.3)");
	p_file->store_line("\t\t\ttween.tween_property(texture_rect, \"scale\", original_scale, 0.3)");
	p_file->store_line("\t");
	p_file->store_line("\ttween.tween_callback(func(): transition_finished.emit())");
	p_file->store_line("");
	p_file->store_line("# Update background display");
	p_file->store_line("func update_background_display():");
	p_file->store_line("\tif not background_display:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tvar texture_rect = find_texture_rect(background_display)");
	p_file->store_line("\tif texture_rect:");
	p_file->store_line("\t\ttexture_rect.texture = background_texture");
	p_file->store_line("");
	p_file->store_line("# Update key image display");
	p_file->store_line("func update_key_image_display():");
	p_file->store_line("\tif not key_image_display:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tvar texture_rect = find_texture_rect(key_image_display)");
	p_file->store_line("\tif texture_rect:");
	p_file->store_line("\t\ttexture_rect.texture = key_image_texture");
	p_file->store_line("\t\ttexture_rect.visible = key_image_texture != null");
	p_file->store_line("");
	p_file->store_line("# Find TextureRect in node hierarchy");
	p_file->store_line("func find_texture_rect(node: Node) -> TextureRect:");
	p_file->store_line("\tif node is TextureRect:");
	p_file->store_line("\t\treturn node as TextureRect");
	p_file->store_line("\t");
	p_file->store_line("\tfor child in node.get_children():");
	p_file->store_line("\t\tvar result = find_texture_rect(child)");
	p_file->store_line("\t\tif result:");
	p_file->store_line("\t\t\treturn result");
	p_file->store_line("\t");
	p_file->store_line("\treturn null");
	p_file->store_line("");
	p_file->store_line("# Get current state");
	p_file->store_line("func get_current_background() -> String:");
	p_file->store_line("\treturn current_background");
	p_file->store_line("");
	p_file->store_line("func get_current_key_image() -> String:");
	p_file->store_line("\treturn current_key_image");
}

void BackgroundManagerModule::generate_file(Ref<FileAccess> p_file, const String &p_relative_path) {
	String filename = p_relative_path.get_file();

	if (filename == "BackgroundDisplay.gd") {
		// Generate the UI script for background display
		p_file->store_line("# BackgroundDisplay.gd");
		p_file->store_line("# Generated by Lupine Engine - Background Display UI Script");
		p_file->store_line("# Manages the background display UI for the Background Manager");
		p_file->store_line("");
		p_file->store_line("extends Control");
		p_file->store_line("");
		p_file->store_line("# Background references");
		p_file->store_line("@onready var background_rect = $Background");
		p_file->store_line("@onready var key_image_rect = $KeyImage");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Register this display with the Background Manager");
		p_file->store_line("\tif BackgroundManager:");
		p_file->store_line("\t\tBackgroundManager.register_background_display(self)");
		p_file->store_line("\t\tBackgroundManager.register_key_image_display(key_image_rect)");
		p_file->store_line("\t");
		p_file->store_line("\tprint(\"Background Display UI initialized\")");
		p_file->store_line("");
		p_file->store_line("# Optional: Handle background transition effects");
		p_file->store_line("func fade_to_background(texture: Texture2D, duration: float = 0.5):");
		p_file->store_line("\tif not background_rect:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar tween = create_tween()");
		p_file->store_line("\ttween.tween_property(background_rect, \"modulate:a\", 0.0, duration / 2)");
		p_file->store_line("\ttween.tween_callback(func(): background_rect.texture = texture)");
		p_file->store_line("\ttween.tween_property(background_rect, \"modulate:a\", 1.0, duration / 2)");
		p_file->store_line("");
		p_file->store_line("func slide_to_background(texture: Texture2D, direction: Vector2, duration: float = 0.5):");
		p_file->store_line("\tif not background_rect:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar original_pos = background_rect.position");
		p_file->store_line("\tvar slide_distance = background_rect.size * direction");
		p_file->store_line("\t");
		p_file->store_line("\t# Set new texture and position it off-screen");
		p_file->store_line("\tbackground_rect.texture = texture");
		p_file->store_line("\tbackground_rect.position = original_pos + slide_distance");
		p_file->store_line("\t");
		p_file->store_line("\t# Slide into position");
		p_file->store_line("\tvar tween = create_tween()");
		p_file->store_line("\ttween.tween_property(background_rect, \"position\", original_pos, duration)");
	} else {
		// Use default file generation
		LupineModuleBase::generate_file(p_file, p_relative_path);
	}
}

void BackgroundManagerModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://background_display\"]");
	p_file->store_line("");
	p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/BackgroundDisplay.gd\" id=\"1_background_script\"]");
	p_file->store_line("");
	p_file->store_line("[node name=\"BackgroundDisplay\" type=\"Control\"]");
	p_file->store_line("layout_mode = 3");
	p_file->store_line("anchors_preset = 15");
	p_file->store_line("anchor_right = 1.0");
	p_file->store_line("anchor_bottom = 1.0");
	p_file->store_line("script = ExtResource(\"1_background_script\")");
	p_file->store_line("");
	p_file->store_line("[node name=\"Background\" type=\"TextureRect\" parent=\".\"]");
	p_file->store_line("layout_mode = 1");
	p_file->store_line("anchors_preset = 15");
	p_file->store_line("anchor_right = 1.0");
	p_file->store_line("anchor_bottom = 1.0");
	p_file->store_line("expand_mode = 1");
	p_file->store_line("stretch_mode = 6");
	p_file->store_line("");
	p_file->store_line("[node name=\"KeyImage\" type=\"TextureRect\" parent=\".\"]");
	p_file->store_line("layout_mode = 1");
	p_file->store_line("anchors_preset = 15");
	p_file->store_line("anchor_right = 1.0");
	p_file->store_line("anchor_bottom = 1.0");
	p_file->store_line("expand_mode = 1");
	p_file->store_line("stretch_mode = 5");
	p_file->store_line("visible = false");
}
