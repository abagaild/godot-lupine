#include "jrpg_party_system_2d_module.h"

void JRPGPartySystem2DModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();

	if (filename == "PartyManager.gd") {
		p_file->store_line("# PartyManager.gd");
		p_file->store_line("# Generated by Lupine Engine - JRPG Party Manager");
		p_file->store_line("# Central party management system for JRPG-style games");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal party_member_added(member: PartyMember)");
		p_file->store_line("signal party_member_removed(member: PartyMember)");
		p_file->store_line("signal party_leader_changed(new_leader: PartyMember)");
		p_file->store_line("signal party_formation_changed()");
		p_file->store_line("signal party_member_leveled_up(member: PartyMember, new_level: int)");
		p_file->store_line("signal party_member_died(member: PartyMember)");
		p_file->store_line("signal party_member_revived(member: PartyMember)");
		p_file->store_line("");
		p_file->store_line("# Party settings");
		p_file->store_line("@export var max_party_size: int = 4");
		p_file->store_line("@export var max_active_members: int = 4");
		p_file->store_line("@export var allow_party_switching: bool = true");
		p_file->store_line("@export var shared_experience: bool = true");
		p_file->store_line("@export var experience_share_ratio: float = 0.8  # Non-active members get 80% exp");
		p_file->store_line("");
		p_file->store_line("# Party data");
		p_file->store_line("var all_party_members: Array[PartyMember] = []");
		p_file->store_line("var active_party_members: Array[PartyMember] = []");
		p_file->store_line("var party_leader: PartyMember = null");
		p_file->store_line("var party_formation: PartyFormation = null");
		p_file->store_line("");
		p_file->store_line("# Follower management");
		p_file->store_line("var follower_scenes: Array[Node2D] = []");
		p_file->store_line("var follower_distance: float = 40.0");
		p_file->store_line("var follower_follow_speed: float = 1.2");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Initialize party formation");
		p_file->store_line("\tparty_formation = PartyFormation.new()");
		p_file->store_line("\t");
		p_file->store_line("\t# Connect to game events");
		p_file->store_line("\tif GameManager:");
		p_file->store_line("\t\tGameManager.scene_changed.connect(_on_scene_changed)");
		p_file->store_line("");
		p_file->store_line("func add_party_member(member: PartyMember) -> bool:");
		p_file->store_line("\tif all_party_members.size() >= max_party_size:");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Add to party");
		p_file->store_line("\tall_party_members.append(member)");
		p_file->store_line("\t");
		p_file->store_line("\t# Set as leader if first member");
		p_file->store_line("\tif party_leader == null:");
		p_file->store_line("\t\tset_party_leader(member)");
		p_file->store_line("\t");
		p_file->store_line("\t# Add to active party if space available");
		p_file->store_line("\tif active_party_members.size() < max_active_members:");
		p_file->store_line("\t\tactive_party_members.append(member)");
		p_file->store_line("\t\t_create_follower_for_member(member)");
		p_file->store_line("\t");
		p_file->store_line("\t# Connect member signals");
		p_file->store_line("\tmember.level_up.connect(_on_member_level_up)");
		p_file->store_line("\tmember.died.connect(_on_member_died)");
		p_file->store_line("\tmember.revived.connect(_on_member_revived)");
		p_file->store_line("\t");
		p_file->store_line("\tparty_member_added.emit(member)");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func remove_party_member(member: PartyMember) -> bool:");
		p_file->store_line("\tif not all_party_members.has(member):");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Remove from all arrays");
		p_file->store_line("\tall_party_members.erase(member)");
		p_file->store_line("\tactive_party_members.erase(member)");
		p_file->store_line("\t");
		p_file->store_line("\t# Remove follower");
		p_file->store_line("\t_remove_follower_for_member(member)");
		p_file->store_line("\t");
		p_file->store_line("\t# Handle leader change");
		p_file->store_line("\tif party_leader == member:");
		p_file->store_line("\t\tif active_party_members.size() > 0:");
		p_file->store_line("\t\t\tset_party_leader(active_party_members[0])");
		p_file->store_line("\t\telse:");
		p_file->store_line("\t\t\tparty_leader = null");
		p_file->store_line("\t");
		p_file->store_line("\tparty_member_removed.emit(member)");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func set_party_leader(member: PartyMember):");
		p_file->store_line("\tif not all_party_members.has(member):");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tparty_leader = member");
		p_file->store_line("\t");
		p_file->store_line("\t# Move to front of active party");
		p_file->store_line("\tif active_party_members.has(member):");
		p_file->store_line("\t\tactive_party_members.erase(member)");
		p_file->store_line("\t\tactive_party_members.insert(0, member)");
		p_file->store_line("\t");
		p_file->store_line("\tparty_leader_changed.emit(member)");
		p_file->store_line("");
		p_file->store_line("func swap_party_members(member1: PartyMember, member2: PartyMember):");
		p_file->store_line("\tif not allow_party_switching:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Handle swapping between active and inactive members");
		p_file->store_line("\tvar member1_active = active_party_members.has(member1)");
		p_file->store_line("\tvar member2_active = active_party_members.has(member2)");
		p_file->store_line("\t");
		p_file->store_line("\tif member1_active and not member2_active:");
		p_file->store_line("\t\t# Swap active member with inactive");
		p_file->store_line("\t\tvar index = active_party_members.find(member1)");
		p_file->store_line("\t\tactive_party_members[index] = member2");
		p_file->store_line("\t\t_remove_follower_for_member(member1)");
		p_file->store_line("\t\t_create_follower_for_member(member2)");
		p_file->store_line("\telif member2_active and not member1_active:");
		p_file->store_line("\t\t# Swap inactive member with active");
		p_file->store_line("\t\tvar index = active_party_members.find(member2)");
		p_file->store_line("\t\tactive_party_members[index] = member1");
		p_file->store_line("\t\t_remove_follower_for_member(member2)");
		p_file->store_line("\t\t_create_follower_for_member(member1)");
		p_file->store_line("\telif member1_active and member2_active:");
		p_file->store_line("\t\t# Swap positions in active party");
		p_file->store_line("\t\tvar index1 = active_party_members.find(member1)");
		p_file->store_line("\t\tvar index2 = active_party_members.find(member2)");
		p_file->store_line("\t\tactive_party_members[index1] = member2");
		p_file->store_line("\t\tactive_party_members[index2] = member1");
		p_file->store_line("\t");
		p_file->store_line("\tparty_formation_changed.emit()");
		p_file->store_line("");
		p_file->store_line("func get_active_party() -> Array[PartyMember]:");
		p_file->store_line("\treturn active_party_members.duplicate()");
		p_file->store_line("");
		p_file->store_line("func get_all_party_members() -> Array[PartyMember]:");
		p_file->store_line("\treturn all_party_members.duplicate()");
		p_file->store_line("");
		p_file->store_line("func get_party_leader() -> PartyMember:");
		p_file->store_line("\treturn party_leader");
		p_file->store_line("");
		p_file->store_line("func get_living_party_members() -> Array[PartyMember]:");
		p_file->store_line("\tvar living_members: Array[PartyMember] = []");
		p_file->store_line("\tfor member in active_party_members:");
		p_file->store_line("\t\tif not member.is_dead():");
		p_file->store_line("\t\t\tliving_members.append(member)");
		p_file->store_line("\treturn living_members");
		p_file->store_line("");
		p_file->store_line("func is_party_defeated() -> bool:");
		p_file->store_line("\treturn get_living_party_members().is_empty()");
		p_file->store_line("");
		p_file->store_line("func distribute_experience(total_exp: int):");
		p_file->store_line("\tif shared_experience:");
		p_file->store_line("\t\t# Distribute to all members");
		p_file->store_line("\t\tfor member in active_party_members:");
		p_file->store_line("\t\t\tmember.add_experience(total_exp)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\t# Give reduced experience to inactive members");
		p_file->store_line("\t\tvar inactive_exp = int(total_exp * experience_share_ratio)");
		p_file->store_line("\t\tfor member in all_party_members:");
		p_file->store_line("\t\t\tif not active_party_members.has(member):");
		p_file->store_line("\t\t\t\tmember.add_experience(inactive_exp)");
		p_file->store_line("\telse:");
		p_file->store_line("\t\t# Only active members get experience");
		p_file->store_line("\t\tvar exp_per_member = total_exp / active_party_members.size()");
		p_file->store_line("\t\tfor member in active_party_members:");
		p_file->store_line("\t\t\tmember.add_experience(exp_per_member)");
		p_file->store_line("");
		p_file->store_line("func heal_all_party_members(amount: int = -1):");
		p_file->store_line("\tfor member in all_party_members:");
		p_file->store_line("\t\tif amount == -1:");
		p_file->store_line("\t\t\tmember.heal_to_full()");
		p_file->store_line("\t\telse:");
		p_file->store_line("\t\t\tmember.heal(amount)");
		p_file->store_line("");
		p_file->store_line("func revive_all_party_members():");
		p_file->store_line("\tfor member in all_party_members:");
		p_file->store_line("\t\tif member.is_dead():");
		p_file->store_line("\t\t\tmember.revive()");
		p_file->store_line("");
		p_file->store_line("func _create_follower_for_member(member: PartyMember):");
		p_file->store_line("\tif member == party_leader:");
		p_file->store_line("\t\treturn  # Leader doesn't need a follower");
		p_file->store_line("\t");
		p_file->store_line("\t# Create follower scene");
		p_file->store_line("\tvar follower_scene = preload(\"res://scenes/party/PartyFollower2D.tscn\")");
		p_file->store_line("\tvar follower = follower_scene.instantiate()");
		p_file->store_line("\tfollower.setup_for_member(member)");
		p_file->store_line("\t");
		p_file->store_line("\t# Add to current scene");
		p_file->store_line("\tget_tree().current_scene.add_child(follower)");
		p_file->store_line("\tfollower_scenes.append(follower)");
		p_file->store_line("");
		p_file->store_line("func _remove_follower_for_member(member: PartyMember):");
		p_file->store_line("\tfor i in range(follower_scenes.size() - 1, -1, -1):");
		p_file->store_line("\t\tvar follower = follower_scenes[i]");
		p_file->store_line("\t\tif follower.party_member == member:");
		p_file->store_line("\t\t\tfollower_scenes.remove_at(i)");
		p_file->store_line("\t\t\tfollower.queue_free()");
		p_file->store_line("\t\t\tbreak");
		p_file->store_line("");
		p_file->store_line("func _on_scene_changed(scene_path: String):");
		p_file->store_line("\t# Clear followers when changing scenes");
		p_file->store_line("\tfor follower in follower_scenes:");
		p_file->store_line("\t\tif is_instance_valid(follower):");
		p_file->store_line("\t\t\tfollower.queue_free()");
		p_file->store_line("\tfollower_scenes.clear()");
		p_file->store_line("\t");
		p_file->store_line("\t# Recreate followers in new scene");
		p_file->store_line("\tawait get_tree().process_frame");
		p_file->store_line("\tfor member in active_party_members:");
		p_file->store_line("\t\tif member != party_leader:");
		p_file->store_line("\t\t\t_create_follower_for_member(member)");
		p_file->store_line("");
		p_file->store_line("func _on_member_level_up(member: PartyMember, new_level: int):");
		p_file->store_line("\tparty_member_leveled_up.emit(member, new_level)");
		p_file->store_line("");
		p_file->store_line("func _on_member_died(member: PartyMember):");
		p_file->store_line("\tparty_member_died.emit(member)");
		p_file->store_line("");
		p_file->store_line("func _on_member_revived(member: PartyMember):");
		p_file->store_line("\tparty_member_revived.emit(member)");
	} else if (filename == "PartyMember.gd") {
		p_file->store_line("# PartyMember.gd");
		p_file->store_line("# Generated by Lupine Engine - JRPG Party Member");
		p_file->store_line("# Individual party member with stats, equipment, and abilities");
		p_file->store_line("");
		p_file->store_line("extends Resource");
		p_file->store_line("class_name PartyMember");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal level_up(new_level: int)");
		p_file->store_line("signal stat_changed(stat_name: String, old_value: int, new_value: int)");
		p_file->store_line("signal health_changed(current: int, maximum: int)");
		p_file->store_line("signal mana_changed(current: int, maximum: int)");
		p_file->store_line("signal died()");
		p_file->store_line("signal revived()");
		p_file->store_line("signal equipment_changed(slot: String, old_item: String, new_item: String)");
		p_file->store_line("");
		p_file->store_line("# Basic info");
		p_file->store_line("@export var character_id: String = \"\"");
		p_file->store_line("@export var character_name: String = \"\"");
		p_file->store_line("@export var character_class: String = \"\"");
		p_file->store_line("@export var portrait_texture: Texture2D");
		p_file->store_line("@export var sprite_texture: Texture2D");
		p_file->store_line("@export var battle_sprite: Texture2D");
		p_file->store_line("");
		p_file->store_line("# Level and experience");
		p_file->store_line("@export var current_level: int = 1");
		p_file->store_line("@export var current_experience: int = 0");
		p_file->store_line("@export var experience_to_next: int = 100");
		p_file->store_line("@export var max_level: int = 99");
		p_file->store_line("");
		p_file->store_line("# Base stats");
		p_file->store_line("@export var base_health: int = 100");
		p_file->store_line("@export var base_mana: int = 50");
		p_file->store_line("@export var base_attack: int = 20");
		p_file->store_line("@export var base_defense: int = 15");
		p_file->store_line("@export var base_magic_attack: int = 15");
		p_file->store_line("@export var base_magic_defense: int = 12");
		p_file->store_line("@export var base_speed: int = 10");
		p_file->store_line("@export var base_luck: int = 5");
		p_file->store_line("");
		p_file->store_line("# Current stats");
		p_file->store_line("var current_health: int");
		p_file->store_line("var current_mana: int");
		p_file->store_line("");
		p_file->store_line("# Equipment");
		p_file->store_line("var equipment: PartyEquipment");
		p_file->store_line("");
		p_file->store_line("# Status effects");
		p_file->store_line("var status_effects: Array[Dictionary] = []");
		p_file->store_line("");
		p_file->store_line("# Skills and abilities");
		p_file->store_line("var known_skills: Array[String] = []");
		p_file->store_line("var skill_points: int = 0");
		p_file->store_line("");
		p_file->store_line("# AI behavior (for non-player controlled members)");
		p_file->store_line("@export var ai_behavior: String = \"balanced\"  # balanced, aggressive, defensive, support");
		p_file->store_line("@export var is_player_controlled: bool = true");
		p_file->store_line("");
		p_file->store_line("func _init():");
		p_file->store_line("\tequipment = PartyEquipment.new()");
		p_file->store_line("\tcurrent_health = get_max_health()");
		p_file->store_line("\tcurrent_mana = get_max_mana()");
		p_file->store_line("");
		p_file->store_line("# Stat calculations with equipment bonuses");
		p_file->store_line("func get_max_health() -> int:");
		p_file->store_line("\tvar total = base_health + (current_level - 1) * 5");
		p_file->store_line("\tif equipment:");
		p_file->store_line("\t\ttotal += equipment.get_stat_bonus(\"health\")");
		p_file->store_line("\treturn total");
		p_file->store_line("");
		p_file->store_line("func get_max_mana() -> int:");
		p_file->store_line("\tvar total = base_mana + (current_level - 1) * 3");
		p_file->store_line("\tif equipment:");
		p_file->store_line("\t\ttotal += equipment.get_stat_bonus(\"mana\")");
		p_file->store_line("\treturn total");
		p_file->store_line("");
		p_file->store_line("func get_attack() -> int:");
		p_file->store_line("\tvar total = base_attack + (current_level - 1) * 2");
		p_file->store_line("\tif equipment:");
		p_file->store_line("\t\ttotal += equipment.get_stat_bonus(\"attack\")");
		p_file->store_line("\treturn total");
		p_file->store_line("");
		p_file->store_line("func get_defense() -> int:");
		p_file->store_line("\tvar total = base_defense + (current_level - 1) * 2");
		p_file->store_line("\tif equipment:");
		p_file->store_line("\t\ttotal += equipment.get_stat_bonus(\"defense\")");
		p_file->store_line("\treturn total");
		p_file->store_line("");
		p_file->store_line("func get_magic_attack() -> int:");
		p_file->store_line("\tvar total = base_magic_attack + (current_level - 1) * 2");
		p_file->store_line("\tif equipment:");
		p_file->store_line("\t\ttotal += equipment.get_stat_bonus(\"magic_attack\")");
		p_file->store_line("\treturn total");
		p_file->store_line("");
		p_file->store_line("func get_magic_defense() -> int:");
		p_file->store_line("\tvar total = base_magic_defense + (current_level - 1) * 1");
		p_file->store_line("\tif equipment:");
		p_file->store_line("\t\ttotal += equipment.get_stat_bonus(\"magic_defense\")");
		p_file->store_line("\treturn total");
		p_file->store_line("");
		p_file->store_line("func get_speed() -> int:");
		p_file->store_line("\tvar total = base_speed + (current_level - 1) * 1");
		p_file->store_line("\tif equipment:");
		p_file->store_line("\t\ttotal += equipment.get_stat_bonus(\"speed\")");
		p_file->store_line("\treturn total");
		p_file->store_line("");
		p_file->store_line("func get_luck() -> int:");
		p_file->store_line("\tvar total = base_luck + (current_level - 1) * 1");
		p_file->store_line("\tif equipment:");
		p_file->store_line("\t\ttotal += equipment.get_stat_bonus(\"luck\")");
		p_file->store_line("\treturn total");
		p_file->store_line("");
		p_file->store_line("# Health and mana management");
		p_file->store_line("func take_damage(amount: int) -> int:");
		p_file->store_line("\tvar old_health = current_health");
		p_file->store_line("\tcurrent_health = max(0, current_health - amount)");
		p_file->store_line("\thealth_changed.emit(current_health, get_max_health())");
		p_file->store_line("\t");
		p_file->store_line("\tif current_health == 0 and old_health > 0:");
		p_file->store_line("\t\tdied.emit()");
		p_file->store_line("\t");
		p_file->store_line("\treturn amount");
		p_file->store_line("");
		p_file->store_line("func heal(amount: int) -> int:");
		p_file->store_line("\tvar old_health = current_health");
		p_file->store_line("\tcurrent_health = min(get_max_health(), current_health + amount)");
		p_file->store_line("\thealth_changed.emit(current_health, get_max_health())");
		p_file->store_line("\treturn current_health - old_health");
		p_file->store_line("");
		p_file->store_line("func heal_to_full():");
		p_file->store_line("\tcurrent_health = get_max_health()");
		p_file->store_line("\thealth_changed.emit(current_health, get_max_health())");
		p_file->store_line("");
		p_file->store_line("func use_mana(amount: int) -> bool:");
		p_file->store_line("\tif current_mana >= amount:");
		p_file->store_line("\t\tcurrent_mana -= amount");
		p_file->store_line("\t\tmana_changed.emit(current_mana, get_max_mana())");
		p_file->store_line("\t\treturn true");
		p_file->store_line("\treturn false");
		p_file->store_line("");
		p_file->store_line("func restore_mana(amount: int) -> int:");
		p_file->store_line("\tvar old_mana = current_mana");
		p_file->store_line("\tcurrent_mana = min(get_max_mana(), current_mana + amount)");
		p_file->store_line("\tmana_changed.emit(current_mana, get_max_mana())");
		p_file->store_line("\treturn current_mana - old_mana");
		p_file->store_line("");
		p_file->store_line("func is_dead() -> bool:");
		p_file->store_line("\treturn current_health <= 0");
		p_file->store_line("");
		p_file->store_line("func revive(health_percentage: float = 0.25):");
		p_file->store_line("\tif is_dead():");
		p_file->store_line("\t\tcurrent_health = int(get_max_health() * health_percentage)");
		p_file->store_line("\t\thealth_changed.emit(current_health, get_max_health())");
		p_file->store_line("\t\trevived.emit()");
		p_file->store_line("");
		p_file->store_line("# Experience and leveling");
		p_file->store_line("func add_experience(amount: int):");
		p_file->store_line("\tcurrent_experience += amount");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for level up");
		p_file->store_line("\twhile current_experience >= experience_to_next and current_level < max_level:");
		p_file->store_line("\t\t_level_up()");
		p_file->store_line("");
		p_file->store_line("func _level_up():");
		p_file->store_line("\tcurrent_experience -= experience_to_next");
		p_file->store_line("\tcurrent_level += 1");
		p_file->store_line("\tskill_points += 1");
		p_file->store_line("\t");
		p_file->store_line("\t# Increase experience requirement");
		p_file->store_line("\texperience_to_next = int(experience_to_next * 1.2)");
		p_file->store_line("\t");
		p_file->store_line("\t# Heal on level up");
		p_file->store_line("\theal_to_full()");
		p_file->store_line("\tcurrent_mana = get_max_mana()");
		p_file->store_line("\tmana_changed.emit(current_mana, get_max_mana())");
		p_file->store_line("\t");
		p_file->store_line("\tlevel_up.emit(current_level)");
		p_file->store_line("");
		p_file->store_line("# Equipment management");
		p_file->store_line("func equip_item(slot: String, item_id: String) -> bool:");
		p_file->store_line("\tif equipment:");
		p_file->store_line("\t\tvar old_item = equipment.get_equipped_item(slot)");
		p_file->store_line("\t\tif equipment.equip_item(slot, item_id):");
		p_file->store_line("\t\t\tequipment_changed.emit(slot, old_item, item_id)");
		p_file->store_line("\t\t\treturn true");
		p_file->store_line("\treturn false");
		p_file->store_line("");
		p_file->store_line("func unequip_item(slot: String) -> String:");
		p_file->store_line("\tif equipment:");
		p_file->store_line("\t\tvar old_item = equipment.get_equipped_item(slot)");
		p_file->store_line("\t\tif equipment.unequip_item(slot):");
		p_file->store_line("\t\t\tequipment_changed.emit(slot, old_item, \"\")");
		p_file->store_line("\t\t\treturn old_item");
		p_file->store_line("\treturn \"\"");
		p_file->store_line("");
		p_file->store_line("# Skills and abilities");
		p_file->store_line("func learn_skill(skill_id: String) -> bool:");
		p_file->store_line("\tif not known_skills.has(skill_id) and skill_points > 0:");
		p_file->store_line("\t\tknown_skills.append(skill_id)");
		p_file->store_line("\t\tskill_points -= 1");
		p_file->store_line("\t\treturn true");
		p_file->store_line("\treturn false");
		p_file->store_line("");
		p_file->store_line("func has_skill(skill_id: String) -> bool:");
		p_file->store_line("\treturn known_skills.has(skill_id)");
		p_file->store_line("");
		p_file->store_line("func can_use_skill(skill_id: String) -> bool:");
		p_file->store_line("\tif not has_skill(skill_id) or is_dead():");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Check mana cost (would need skill database)");
		p_file->store_line("\t# For now, assume all skills cost 10 mana");
		p_file->store_line("\treturn current_mana >= 10");
		p_file->store_line("");
		p_file->store_line("# Status effects");
		p_file->store_line("func add_status_effect(effect_id: String, duration: int, strength: float = 1.0):");
		p_file->store_line("\t# Remove existing effect of same type");
		p_file->store_line("\tremove_status_effect(effect_id)");
		p_file->store_line("\t");
		p_file->store_line("\tvar effect = {");
		p_file->store_line("\t\t\"id\": effect_id,");
		p_file->store_line("\t\t\"duration\": duration,");
		p_file->store_line("\t\t\"strength\": strength");
		p_file->store_line("\t}");
		p_file->store_line("\tstatus_effects.append(effect)");
		p_file->store_line("");
		p_file->store_line("func remove_status_effect(effect_id: String):");
		p_file->store_line("\tfor i in range(status_effects.size() - 1, -1, -1):");
		p_file->store_line("\t\tif status_effects[i].id == effect_id:");
		p_file->store_line("\t\t\tstatus_effects.remove_at(i)");
		p_file->store_line("\t\t\tbreak");
		p_file->store_line("");
		p_file->store_line("func has_status_effect(effect_id: String) -> bool:");
		p_file->store_line("\tfor effect in status_effects:");
		p_file->store_line("\t\tif effect.id == effect_id:");
		p_file->store_line("\t\t\treturn true");
		p_file->store_line("\treturn false");
		p_file->store_line("");
		p_file->store_line("func update_status_effects():");
		p_file->store_line("\t# Called each turn to update status effect durations");
		p_file->store_line("\tfor i in range(status_effects.size() - 1, -1, -1):");
		p_file->store_line("\t\tstatus_effects[i].duration -= 1");
		p_file->store_line("\t\tif status_effects[i].duration <= 0:");
		p_file->store_line("\t\t\tstatus_effects.remove_at(i)");
	} else if (filename == "PartyFollower2D.gd") {
		p_file->store_line("# PartyFollower2D.gd");
		p_file->store_line("# Generated by Lupine Engine - 2D Party Follower");
		p_file->store_line("# Handles following behavior for party members in 2D overworld");
		p_file->store_line("");
		p_file->store_line("extends CharacterBody2D");
		p_file->store_line("class_name PartyFollower2D");
		p_file->store_line("");
		p_file->store_line("# Follower settings");
		p_file->store_line("@export var follow_distance: float = 40.0");
		p_file->store_line("@export var follow_speed_multiplier: float = 1.2");
		p_file->store_line("@export var catch_up_speed_multiplier: float = 2.0");
		p_file->store_line("@export var max_distance_before_teleport: float = 200.0");
		p_file->store_line("@export var use_4_direction_animation: bool = true");
		p_file->store_line("@export var animation_blend_speed: float = 10.0");
		p_file->store_line("");
		p_file->store_line("# References");
		p_file->store_line("var party_member: PartyMember");
		p_file->store_line("var leader_node: Node2D");
		p_file->store_line("@onready var sprite: Sprite2D = $Sprite2D");
		p_file->store_line("@onready var animation_player: AnimationPlayer = $AnimationPlayer");
		p_file->store_line("@onready var collision: CollisionShape2D = $CollisionShape2D");
		p_file->store_line("");
		p_file->store_line("# Movement tracking");
		p_file->store_line("var leader_position_history: Array[Vector2] = []");
		p_file->store_line("var target_position: Vector2");
		p_file->store_line("var current_direction: Vector2 = Vector2.ZERO");
		p_file->store_line("var last_animation: String = \"\"");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Find the leader (player)");
		p_file->store_line("\tleader_node = get_tree().get_first_node_in_group(\"player\")");
		p_file->store_line("\tif not leader_node:");
		p_file->store_line("\t\t# Fallback: find any CharacterBody2D with player controller");
		p_file->store_line("\t\tfor node in get_tree().get_nodes_in_group(\"player\"):");
		p_file->store_line("\t\t\tif node is CharacterBody2D:");
		p_file->store_line("\t\t\t\tleader_node = node");
		p_file->store_line("\t\t\t\tbreak");
		p_file->store_line("\t");
		p_file->store_line("\tif leader_node:");
		p_file->store_line("\t\ttarget_position = leader_node.global_position");
		p_file->store_line("\t\tglobal_position = target_position");
		p_file->store_line("");
		p_file->store_line("func _physics_process(delta: float):");
		p_file->store_line("\tif not leader_node or not party_member:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Update leader position history");
		p_file->store_line("\t_update_leader_history()");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate target position");
		p_file->store_line("\t_calculate_target_position()");
		p_file->store_line("\t");
		p_file->store_line("\t# Move towards target");
		p_file->store_line("\t_move_towards_target(delta)");
		p_file->store_line("\t");
		p_file->store_line("\t# Update animations");
		p_file->store_line("\t_update_animations()");
		p_file->store_line("");
		p_file->store_line("func setup_for_member(member: PartyMember):");
		p_file->store_line("\tparty_member = member");
		p_file->store_line("\t");
		p_file->store_line("\t# Set sprite texture");
		p_file->store_line("\tif member.sprite_texture and sprite:");
		p_file->store_line("\t\tsprite.texture = member.sprite_texture");
		p_file->store_line("\t");
		p_file->store_line("\t# Setup animations if available");
		p_file->store_line("\t_setup_animations()");
		p_file->store_line("");
		p_file->store_line("func teleport_to_leader():");
		p_file->store_line("\tif leader_node:");
		p_file->store_line("\t\tglobal_position = leader_node.global_position");
		p_file->store_line("\t\tvelocity = Vector2.ZERO");
		p_file->store_line("\t\tleader_position_history.clear()");
	}
}

void JRPGPartySystem2DModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "PartyFollower2D") {
		p_file->store_line("[gd_scene load_steps=4 format=3 uid=\"uid://party_follower_2d\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/party/PartyFollower2D.gd\" id=\"1_follower_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"RectangleShape2D\" id=\"RectangleShape2D_1\"]");
		p_file->store_line("size = Vector2(16, 24)");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"Animation\" id=\"Animation_1\"]");
		p_file->store_line("resource_name = \"idle\"");
		p_file->store_line("length = 1.0");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"AnimationLibrary\" id=\"AnimationLibrary_1\"]");
		p_file->store_line("_data = {");
		p_file->store_line("\"idle\": SubResource(\"Animation_1\")");
		p_file->store_line("}");
		p_file->store_line("");
		p_file->store_line("[node name=\"PartyFollower2D\" type=\"CharacterBody2D\"]");
		p_file->store_line("script = ExtResource(\"1_follower_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"AnimationPlayer\" type=\"AnimationPlayer\" parent=\".\"]");
		p_file->store_line("libraries = {");
		p_file->store_line("\"default\": SubResource(\"AnimationLibrary_1\")");
		p_file->store_line("}");
	} else if (p_scene_name == "PartyMenuUI") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://party_menu_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/PartyMenuUI.gd\" id=\"1_party_menu_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"PartyMenuUI\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_party_menu_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("color = Color(0, 0, 0, 0.8)");
		p_file->store_line("");
		p_file->store_line("[node name=\"PartyList\" type=\"VBoxContainer\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 8");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = -200.0");
		p_file->store_line("offset_top = -150.0");
		p_file->store_line("offset_right = 200.0");
		p_file->store_line("offset_bottom = 150.0");
	}
}
