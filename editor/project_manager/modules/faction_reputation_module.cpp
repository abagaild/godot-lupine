#include "faction_reputation_module.h"

void FactionReputationModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();

	if (filename == "FactionReputationManager.gd") {
		p_file->store_line("# FactionReputationManager.gd");
		p_file->store_line("# Generated by Lupine Engine - Faction Reputation Manager");
		p_file->store_line("# Complete faction reputation system with political consequences");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal faction_reputation_changed(faction_id: String, old_rep: int, new_rep: int)");
		p_file->store_line("signal faction_status_changed(faction_id: String, old_status: String, new_status: String)");
		p_file->store_line("signal political_event_triggered(event_id: String, faction_id: String)");
		p_file->store_line("signal shop_discount_changed(shop_id: String, discount: float)");
		p_file->store_line("signal quest_availability_changed(quest_id: String, available: bool)");
		p_file->store_line("signal faction_war_declared(faction1_id: String, faction2_id: String)");
		p_file->store_line("signal faction_alliance_formed(faction1_id: String, faction2_id: String)");
		p_file->store_line("");
		p_file->store_line("# Faction data");
		p_file->store_line("var factions: Dictionary = {}  # faction_id -> Faction");
		p_file->store_line("var faction_members: Dictionary = {}  # character_id -> faction_id");
		p_file->store_line("var reputation_effects: Dictionary = {}  # effect_id -> ReputationEffect");
		p_file->store_line("var political_events: Dictionary = {}  # event_id -> PoliticalEvent");
		p_file->store_line("");
		p_file->store_line("# Reputation tracking");
		p_file->store_line("var faction_reputations: Dictionary = {}  # faction_id -> reputation_value");
		p_file->store_line("var faction_relationships: Dictionary = {}  # \"faction1_faction2\" -> relationship_value");
		p_file->store_line("var active_effects: Array[String] = []");
		p_file->store_line("");
		p_file->store_line("# Reputation levels");
		p_file->store_line("enum ReputationLevel {");
		p_file->store_line("\tHOSTILE = -1000,");
		p_file->store_line("\tUNFRIENDLY = -500,");
		p_file->store_line("\tNEUTRAL = 0,");
		p_file->store_line("\tFRIENDLY = 500,");
		p_file->store_line("\tALLIED = 1000,");
		p_file->store_line("\tREVERED = 1500");
		p_file->store_line("}");
		p_file->store_line("");
		p_file->store_line("var reputation_names: Dictionary = {");
		p_file->store_line("\tReputationLevel.HOSTILE: \"Hostile\",");
		p_file->store_line("\tReputationLevel.UNFRIENDLY: \"Unfriendly\",");
		p_file->store_line("\tReputationLevel.NEUTRAL: \"Neutral\",");
		p_file->store_line("\tReputationLevel.FRIENDLY: \"Friendly\",");
		p_file->store_line("\tReputationLevel.ALLIED: \"Allied\",");
		p_file->store_line("\tReputationLevel.REVERED: \"Revered\"");
		p_file->store_line("}");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Load faction data");
		p_file->store_line("\tload_factions_data()");
		p_file->store_line("\tload_faction_members()");
		p_file->store_line("\tload_reputation_effects()");
		p_file->store_line("\tload_political_events()");
		p_file->store_line("\t");
		p_file->store_line("\t# Connect to relationship system");
		p_file->store_line("\tif RelationshipManager:");
		p_file->store_line("\t\tRelationshipManager.relationship_changed.connect(_on_character_relationship_changed)");
		p_file->store_line("");
		p_file->store_line("func load_factions_data():");
		p_file->store_line("\tvar file_path = \"res://data/factions/factions.json\"");
		p_file->store_line("\tif not FileAccess.file_exists(file_path):");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar file = FileAccess.open(file_path, FileAccess.READ)");
		p_file->store_line("\tvar json_text = file.get_as_text()");
		p_file->store_line("\tfile.close()");
		p_file->store_line("\t");
		p_file->store_line("\tvar json = JSON.new()");
		p_file->store_line("\tvar parse_result = json.parse(json_text)");
		p_file->store_line("\tif parse_result != OK:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar data = json.data");
		p_file->store_line("\tfor faction_data in data.factions:");
		p_file->store_line("\t\tvar faction = Faction.new()");
		p_file->store_line("\t\tfaction.initialize_from_data(faction_data)");
		p_file->store_line("\t\tfactions[faction.faction_id] = faction");
		p_file->store_line("\t\tfaction_reputations[faction.faction_id] = faction.initial_reputation");
		p_file->store_line("");
		p_file->store_line("func get_faction_reputation(faction_id: String) -> int:");
		p_file->store_line("\treturn faction_reputations.get(faction_id, 0)");
		p_file->store_line("");
		p_file->store_line("func get_faction_reputation_level(faction_id: String) -> ReputationLevel:");
		p_file->store_line("\tvar reputation = get_faction_reputation(faction_id)");
		p_file->store_line("\t");
		p_file->store_line("\tif reputation >= ReputationLevel.REVERED:");
		p_file->store_line("\t\treturn ReputationLevel.REVERED");
		p_file->store_line("\telif reputation >= ReputationLevel.ALLIED:");
		p_file->store_line("\t\treturn ReputationLevel.ALLIED");
		p_file->store_line("\telif reputation >= ReputationLevel.FRIENDLY:");
		p_file->store_line("\t\treturn ReputationLevel.FRIENDLY");
		p_file->store_line("\telif reputation >= ReputationLevel.NEUTRAL:");
		p_file->store_line("\t\treturn ReputationLevel.NEUTRAL");
		p_file->store_line("\telif reputation >= ReputationLevel.UNFRIENDLY:");
		p_file->store_line("\t\treturn ReputationLevel.UNFRIENDLY");
		p_file->store_line("\telse:");
		p_file->store_line("\t\treturn ReputationLevel.HOSTILE");
		p_file->store_line("");
		p_file->store_line("func modify_faction_reputation(faction_id: String, change: int, reason: String = \"\"):");
		p_file->store_line("\tif not factions.has(faction_id):");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar old_reputation = get_faction_reputation(faction_id)");
		p_file->store_line("\tvar old_level = get_faction_reputation_level(faction_id)");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply reputation change");
		p_file->store_line("\tfaction_reputations[faction_id] = old_reputation + change");
		p_file->store_line("\tfaction_reputations[faction_id] = clamp(faction_reputations[faction_id], -2000, 2000)");
		p_file->store_line("\t");
		p_file->store_line("\tvar new_reputation = get_faction_reputation(faction_id)");
		p_file->store_line("\tvar new_level = get_faction_reputation_level(faction_id)");
		p_file->store_line("\t");
		p_file->store_line("\t# Emit signals");
		p_file->store_line("\tfaction_reputation_changed.emit(faction_id, old_reputation, new_reputation)");
		p_file->store_line("\t");
		p_file->store_line("\tif new_level != old_level:");
		p_file->store_line("\t\tfaction_status_changed.emit(faction_id, reputation_names[old_level], reputation_names[new_level])");
		p_file->store_line("\t\t_check_reputation_effects(faction_id, new_level)");
		p_file->store_line("\t\t_check_political_events(faction_id, new_level)");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply faction relationship changes");
		p_file->store_line("\t_update_faction_relationships(faction_id, change)");
		p_file->store_line("");
		p_file->store_line("func _on_character_relationship_changed(character_id: String, old_level: int, new_level: int):");
		p_file->store_line("\t# Character relationship changes affect faction reputation");
		p_file->store_line("\tvar faction_id = faction_members.get(character_id)");
		p_file->store_line("\tif not faction_id:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate faction reputation change based on character relationship");
		p_file->store_line("\tvar character = RelationshipManager.get_character(character_id)");
		p_file->store_line("\tif not character:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar influence = character.faction_influence if character.has(\"faction_influence\") else 1.0");
		p_file->store_line("\tvar reputation_change = int((new_level - old_level) * influence * 0.1)");
		p_file->store_line("\t");
		p_file->store_line("\tif reputation_change != 0:");
		p_file->store_line("\t\tmodify_faction_reputation(faction_id, reputation_change, \"character_relationship\")");
		p_file->store_line("");
		p_file->store_line("func _update_faction_relationships(faction_id: String, reputation_change: int):");
		p_file->store_line("\t# Faction reputation changes affect relationships with other factions");
		p_file->store_line("\tvar faction = factions.get(faction_id)");
		p_file->store_line("\tif not faction:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply changes to allied and enemy factions");
		p_file->store_line("\tfor ally_id in faction.allied_factions:");
		p_file->store_line("\t\tvar ally_change = int(reputation_change * 0.3)  # Allies benefit from your reputation");
		p_file->store_line("\t\tif ally_change != 0:");
		p_file->store_line("\t\t\tmodify_faction_reputation(ally_id, ally_change, \"ally_reputation\")");
		p_file->store_line("\t");
		p_file->store_line("\tfor enemy_id in faction.enemy_factions:");
		p_file->store_line("\t\tvar enemy_change = int(reputation_change * -0.5)  # Enemies lose reputation when you gain");
		p_file->store_line("\t\tif enemy_change != 0:");
		p_file->store_line("\t\t\tmodify_faction_reputation(enemy_id, enemy_change, \"enemy_reputation\")");
		p_file->store_line("");
		p_file->store_line("func _check_reputation_effects(faction_id: String, reputation_level: ReputationLevel):");
		p_file->store_line("\t# Check for reputation-based effects (shop discounts, quest availability, etc.)");
		p_file->store_line("\tfor effect_id in reputation_effects.keys():");
		p_file->store_line("\t\tvar effect = reputation_effects[effect_id]");
		p_file->store_line("\t\tif effect.faction_id == faction_id and effect.required_reputation_level <= reputation_level:");
		p_file->store_line("\t\t\tif not active_effects.has(effect_id):");
		p_file->store_line("\t\t\t\tactive_effects.append(effect_id)");
		p_file->store_line("\t\t\t\t_apply_reputation_effect(effect)");
		p_file->store_line("");
		p_file->store_line("func _apply_reputation_effect(effect: ReputationEffect):");
		p_file->store_line("\tmatch effect.effect_type:");
		p_file->store_line("\t\t\"shop_discount\":");
		p_file->store_line("\t\t\t_apply_shop_discount(effect.target_id, effect.value)");
		p_file->store_line("\t\t\"quest_unlock\":");
		p_file->store_line("\t\t\t_unlock_quest(effect.target_id)");
		p_file->store_line("\t\t\"area_access\":");
		p_file->store_line("\t\t\t_grant_area_access(effect.target_id)");
		p_file->store_line("\t\t\"special_dialogue\":");
		p_file->store_line("\t\t\t_unlock_special_dialogue(effect.target_id)");
		p_file->store_line("\t\t\"faction_service\":");
		p_file->store_line("\t\t\t_unlock_faction_service(effect.target_id)");
		p_file->store_line("");
		p_file->store_line("func _apply_shop_discount(shop_id: String, discount: float):");
		p_file->store_line("\t# Apply discount to shop prices");
		p_file->store_line("\tif ShopSystem:");
		p_file->store_line("\t\tShopSystem.set_faction_discount(shop_id, discount)");
		p_file->store_line("\tshop_discount_changed.emit(shop_id, discount)");
		p_file->store_line("");
		p_file->store_line("func _unlock_quest(quest_id: String):");
		p_file->store_line("\t# Make quest available");
		p_file->store_line("\tif QuestSystem:");
		p_file->store_line("\t\tQuestSystem.unlock_quest(quest_id)");
		p_file->store_line("\tquest_availability_changed.emit(quest_id, true)");
		p_file->store_line("");
		p_file->store_line("func _grant_area_access(area_id: String):");
		p_file->store_line("\t# Grant access to restricted areas");
		p_file->store_line("\tif LocationManager:");
		p_file->store_line("\t\tLocationManager.grant_area_access(area_id)");
		p_file->store_line("");
		p_file->store_line("func _unlock_special_dialogue(dialogue_id: String):");
		p_file->store_line("\t# Unlock special dialogue options");
		p_file->store_line("\tif DialogueSystem:");
		p_file->store_line("\t\tDialogueSystem.unlock_dialogue_option(dialogue_id)");
		p_file->store_line("");
		p_file->store_line("func _unlock_faction_service(service_id: String):");
		p_file->store_line("\t# Unlock faction-specific services");
		p_file->store_line("\tpass  # Implementation depends on specific services");
		p_file->store_line("");
		p_file->store_line("func _check_political_events(faction_id: String, reputation_level: ReputationLevel):");
		p_file->store_line("\t# Check for political events triggered by reputation changes");
		p_file->store_line("\tfor event_id in political_events.keys():");
		p_file->store_line("\t\tvar event = political_events[event_id]");
		p_file->store_line("\t\tif event.can_trigger(faction_id, reputation_level):");
		p_file->store_line("\t\t\t_trigger_political_event(event_id, event)");
		p_file->store_line("");
		p_file->store_line("func _trigger_political_event(event_id: String, event: PoliticalEvent):");
		p_file->store_line("\tmatch event.event_type:");
		p_file->store_line("\t\t\"faction_war\":");
		p_file->store_line("\t\t\t_declare_faction_war(event.faction1_id, event.faction2_id)");
		p_file->store_line("\t\t\"faction_alliance\":");
		p_file->store_line("\t\t\t_form_faction_alliance(event.faction1_id, event.faction2_id)");
		p_file->store_line("\t\t\"trade_embargo\":");
		p_file->store_line("\t\t\t_impose_trade_embargo(event.faction1_id, event.faction2_id)");
		p_file->store_line("\t\t\"diplomatic_mission\":");
		p_file->store_line("\t\t\t_start_diplomatic_mission(event.faction1_id, event.faction2_id)");
		p_file->store_line("\t");
		p_file->store_line("\tpolitical_event_triggered.emit(event_id, event.faction1_id)");
		p_file->store_line("");
		p_file->store_line("func _declare_faction_war(faction1_id: String, faction2_id: String):");
		p_file->store_line("\t# Handle faction war declaration");
		p_file->store_line("\tvar faction1 = factions.get(faction1_id)");
		p_file->store_line("\tvar faction2 = factions.get(faction2_id)");
		p_file->store_line("\t");
		p_file->store_line("\tif faction1 and faction2:");
		p_file->store_line("\t\tfaction1.enemy_factions.append(faction2_id)");
		p_file->store_line("\t\tfaction2.enemy_factions.append(faction1_id)");
		p_file->store_line("\t\tfaction1.allied_factions.erase(faction2_id)");
		p_file->store_line("\t\tfaction2.allied_factions.erase(faction1_id)");
		p_file->store_line("\t");
		p_file->store_line("\tfaction_war_declared.emit(faction1_id, faction2_id)");
		p_file->store_line("");
		p_file->store_line("func _form_faction_alliance(faction1_id: String, faction2_id: String):");
		p_file->store_line("\t# Handle faction alliance formation");
		p_file->store_line("\tvar faction1 = factions.get(faction1_id)");
		p_file->store_line("\tvar faction2 = factions.get(faction2_id)");
		p_file->store_line("\t");
		p_file->store_line("\tif faction1 and faction2:");
		p_file->store_line("\t\tfaction1.allied_factions.append(faction2_id)");
		p_file->store_line("\t\tfaction2.allied_factions.append(faction1_id)");
		p_file->store_line("\t\tfaction1.enemy_factions.erase(faction2_id)");
		p_file->store_line("\t\tfaction2.enemy_factions.erase(faction1_id)");
		p_file->store_line("\t");
		p_file->store_line("\tfaction_alliance_formed.emit(faction1_id, faction2_id)");
		p_file->store_line("");
		p_file->store_line("func get_faction_status_summary() -> Dictionary:");
		p_file->store_line("\tvar summary: Dictionary = {}");
		p_file->store_line("\t");
		p_file->store_line("\tfor faction_id in factions.keys():");
		p_file->store_line("\t\tvar faction = factions[faction_id]");
		p_file->store_line("\t\tvar reputation = get_faction_reputation(faction_id)");
		p_file->store_line("\t\tvar level = get_faction_reputation_level(faction_id)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tsummary[faction_id] = {");
		p_file->store_line("\t\t\t\"name\": faction.faction_name,");
		p_file->store_line("\t\t\t\"reputation\": reputation,");
		p_file->store_line("\t\t\t\"level\": level,");
		p_file->store_line("\t\t\t\"level_name\": reputation_names[level],");
		p_file->store_line("\t\t\t\"description\": faction.description,");
		p_file->store_line("\t\t\t\"allied_factions\": faction.allied_factions,");
		p_file->store_line("\t\t\t\"enemy_factions\": faction.enemy_factions");
		p_file->store_line("\t\t}");
		p_file->store_line("\t");
		p_file->store_line("\treturn summary");
		p_file->store_line("");
		p_file->store_line("func get_character_faction(character_id: String) -> String:");
		p_file->store_line("\treturn faction_members.get(character_id, \"\")");
		p_file->store_line("");
		p_file->store_line("func is_faction_hostile(faction_id: String) -> bool:");
		p_file->store_line("\tvar level = get_faction_reputation_level(faction_id)");
		p_file->store_line("\treturn level <= ReputationLevel.UNFRIENDLY");
		p_file->store_line("");
		p_file->store_line("func is_faction_friendly(faction_id: String) -> bool:");
		p_file->store_line("\tvar level = get_faction_reputation_level(faction_id)");
		p_file->store_line("\treturn level >= ReputationLevel.FRIENDLY");
	}
}

void FactionReputationModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "FactionReputationUI") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://faction_reputation_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/FactionReputationUI.gd\" id=\"1_faction_ui_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"FactionReputationUI\" type=\"Control\"]");
		p_file->store_line("process_mode = 2");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_faction_ui_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("color = Color(0, 0, 0, 0.8)");
		p_file->store_line("");
		p_file->store_line("[node name=\"ReputationPanel\" type=\"Panel\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 8");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = -400.0");
		p_file->store_line("offset_top = -300.0");
		p_file->store_line("offset_right = 400.0");
		p_file->store_line("offset_bottom = 300.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"VBoxContainer\" type=\"VBoxContainer\" parent=\"ReputationPanel\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 20.0");
		p_file->store_line("offset_top = 20.0");
		p_file->store_line("offset_right = -20.0");
		p_file->store_line("offset_bottom = -20.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"Title\" type=\"Label\" parent=\"ReputationPanel/VBoxContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Faction Reputation\"");
		p_file->store_line("horizontal_alignment = 1");
		p_file->store_line("");
		p_file->store_line("[node name=\"ScrollContainer\" type=\"ScrollContainer\" parent=\"ReputationPanel/VBoxContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_vertical = 3");
		p_file->store_line("");
		p_file->store_line("[node name=\"FactionList\" type=\"VBoxContainer\" parent=\"ReputationPanel/VBoxContainer/ScrollContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_horizontal = 3");
		p_file->store_line("");
		p_file->store_line("[node name=\"CloseButton\" type=\"Button\" parent=\"ReputationPanel/VBoxContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Close\"");
	}
}
