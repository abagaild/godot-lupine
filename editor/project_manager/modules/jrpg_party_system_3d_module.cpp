#include "jrpg_party_system_3d_module.h"

void JRPGPartySystem3DModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();

	if (filename == "PartyFollower3D.gd") {
		p_file->store_line("# PartyFollower3D.gd");
		p_file->store_line("# Generated by Lupine Engine - 3D Party Follower");
		p_file->store_line("# Handles following behavior for party members in 3D overworld");
		p_file->store_line("");
		p_file->store_line("extends CharacterBody3D");
		p_file->store_line("class_name PartyFollower3D");
		p_file->store_line("");
		p_file->store_line("# Follower settings");
		p_file->store_line("@export var follow_distance: float = 2.0");
		p_file->store_line("@export var follow_speed_multiplier: float = 1.2");
		p_file->store_line("@export var catch_up_speed_multiplier: float = 2.0");
		p_file->store_line("@export var max_distance_before_teleport: float = 10.0");
		p_file->store_line("@export var rotation_speed: float = 10.0");
		p_file->store_line("@export var gravity: float = 9.8");
		p_file->store_line("");
		p_file->store_line("# References");
		p_file->store_line("var party_member: PartyMember");
		p_file->store_line("var leader_node: Node3D");
		p_file->store_line("@onready var mesh_instance: MeshInstance3D = $MeshInstance3D");
		p_file->store_line("@onready var animation_player: AnimationPlayer = $AnimationPlayer");
		p_file->store_line("@onready var collision: CollisionShape3D = $CollisionShape3D");
		p_file->store_line("");
		p_file->store_line("# Movement tracking");
		p_file->store_line("var leader_position_history: Array[Vector3] = []");
		p_file->store_line("var target_position: Vector3");
		p_file->store_line("var current_direction: Vector3 = Vector3.ZERO");
		p_file->store_line("var last_animation: String = \"\"");
		p_file->store_line("var is_on_ground: bool = false");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Find the leader (player)");
		p_file->store_line("\tleader_node = get_tree().get_first_node_in_group(\"player\")");
		p_file->store_line("\tif not leader_node:");
		p_file->store_line("\t\t# Fallback: find any CharacterBody3D with player controller");
		p_file->store_line("\t\tfor node in get_tree().get_nodes_in_group(\"player\"):");
		p_file->store_line("\t\t\tif node is CharacterBody3D:");
		p_file->store_line("\t\t\t\tleader_node = node");
		p_file->store_line("\t\t\t\tbreak");
		p_file->store_line("\t");
		p_file->store_line("\tif leader_node:");
		p_file->store_line("\t\ttarget_position = leader_node.global_position");
		p_file->store_line("\t\tglobal_position = target_position");
		p_file->store_line("");
		p_file->store_line("func _physics_process(delta: float):");
		p_file->store_line("\tif not leader_node or not party_member:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply gravity");
		p_file->store_line("\tif not is_on_floor():");
		p_file->store_line("\t\tvelocity.y -= gravity * delta");
		p_file->store_line("\telse:");
		p_file->store_line("\t\tvelocity.y = 0");
		p_file->store_line("\t\tis_on_ground = true");
		p_file->store_line("\t");
		p_file->store_line("\t# Update leader position history");
		p_file->store_line("\t_update_leader_history()");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate target position");
		p_file->store_line("\t_calculate_target_position()");
		p_file->store_line("\t");
		p_file->store_line("\t# Move towards target");
		p_file->store_line("\t_move_towards_target(delta)");
		p_file->store_line("\t");
		p_file->store_line("\t# Update animations");
		p_file->store_line("\t_update_animations()");
		p_file->store_line("\t");
		p_file->store_line("\tmove_and_slide()");
		p_file->store_line("");
		p_file->store_line("func setup_for_member(member: PartyMember):");
		p_file->store_line("\tparty_member = member");
		p_file->store_line("\t");
		p_file->store_line("\t# Set mesh or model");
		p_file->store_line("\tif member.has(\"model_scene\") and member.model_scene:");
		p_file->store_line("\t\t# Load 3D model");
		p_file->store_line("\t\tvar model = member.model_scene.instantiate()");
		p_file->store_line("\t\tadd_child(model)");
		p_file->store_line("\telif mesh_instance:");
		p_file->store_line("\t\t# Use basic mesh with texture");
		p_file->store_line("\t\tvar material = StandardMaterial3D.new()");
		p_file->store_line("\t\tif member.sprite_texture:");
		p_file->store_line("\t\t\tmaterial.albedo_texture = member.sprite_texture");
		p_file->store_line("\t\tmesh_instance.material_override = material");
		p_file->store_line("\t");
		p_file->store_line("\t# Setup animations if available");
		p_file->store_line("\t_setup_animations()");
		p_file->store_line("");
		p_file->store_line("func _update_leader_history():");
		p_file->store_line("\tif not leader_node:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Add current leader position to history");
		p_file->store_line("\tleader_position_history.append(leader_node.global_position)");
		p_file->store_line("\t");
		p_file->store_line("\t# Keep history manageable (about 2 seconds worth at 60fps)");
		p_file->store_line("\tif leader_position_history.size() > 120:");
		p_file->store_line("\t\tleader_position_history.pop_front()");
		p_file->store_line("");
		p_file->store_line("func _calculate_target_position():");
		p_file->store_line("\tif leader_position_history.is_empty():");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Find position in history that's the right distance away");
		p_file->store_line("\tvar leader_pos = leader_node.global_position");
		p_file->store_line("\tvar best_position = leader_pos");
		p_file->store_line("\t");
		p_file->store_line("\t# Look through history for a position at the right distance");
		p_file->store_line("\tfor i in range(leader_position_history.size() - 1, -1, -1):");
		p_file->store_line("\t\tvar hist_pos = leader_position_history[i]");
		p_file->store_line("\t\tvar distance = leader_pos.distance_to(hist_pos)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tif distance >= follow_distance:");
		p_file->store_line("\t\t\tbest_position = hist_pos");
		p_file->store_line("\t\t\tbreak");
		p_file->store_line("\t");
		p_file->store_line("\ttarget_position = best_position");
		p_file->store_line("");
		p_file->store_line("func _move_towards_target(delta: float):");
		p_file->store_line("\tvar distance_to_target = global_position.distance_to(target_position)");
		p_file->store_line("\tvar distance_to_leader = global_position.distance_to(leader_node.global_position)");
		p_file->store_line("\t");
		p_file->store_line("\t# Teleport if too far away");
		p_file->store_line("\tif distance_to_leader > max_distance_before_teleport:");
		p_file->store_line("\t\tglobal_position = target_position");
		p_file->store_line("\t\tvelocity = Vector3.ZERO");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Don't move if close enough");
		p_file->store_line("\tif distance_to_target < 0.5:");
		p_file->store_line("\t\tvelocity.x = 0");
		p_file->store_line("\t\tvelocity.z = 0");
		p_file->store_line("\t\tcurrent_direction = Vector3.ZERO");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate movement (only X and Z, Y handled by gravity)");
		p_file->store_line("\tvar direction_2d = Vector2(target_position.x - global_position.x, target_position.z - global_position.z).normalized()");
		p_file->store_line("\tcurrent_direction = Vector3(direction_2d.x, 0, direction_2d.y)");
		p_file->store_line("\t");
		p_file->store_line("\t# Use catch-up speed if far behind");
		p_file->store_line("\tvar speed_multiplier = follow_speed_multiplier");
		p_file->store_line("\tif distance_to_target > follow_distance * 2:");
		p_file->store_line("\t\tspeed_multiplier = catch_up_speed_multiplier");
		p_file->store_line("\t");
		p_file->store_line("\t# Get leader's speed (assume it has a base_speed property)");
		p_file->store_line("\tvar base_speed = 5.0  # Default 3D speed");
		p_file->store_line("\tif leader_node.has_method(\"get\") and leader_node.get(\"base_speed\"):");
		p_file->store_line("\t\tbase_speed = leader_node.base_speed");
		p_file->store_line("\t");
		p_file->store_line("\tvelocity.x = current_direction.x * base_speed * speed_multiplier");
		p_file->store_line("\tvelocity.z = current_direction.z * base_speed * speed_multiplier");
		p_file->store_line("\t");
		p_file->store_line("\t# Rotate to face movement direction");
		p_file->store_line("\tif current_direction.length() > 0.1:");
		p_file->store_line("\t\tvar target_rotation = atan2(current_direction.x, current_direction.z)");
		p_file->store_line("\t\trotation.y = lerp_angle(rotation.y, target_rotation, rotation_speed * delta)");
		p_file->store_line("");
		p_file->store_line("func _update_animations():");
		p_file->store_line("\tif not animation_player:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar animation_name = \"\"");
		p_file->store_line("\t");
		p_file->store_line("\tif current_direction.length() < 0.1:");
		p_file->store_line("\t\t# Idle animation");
		p_file->store_line("\t\tanimation_name = \"idle\"");
		p_file->store_line("\telse:");
		p_file->store_line("\t\t# Walking animation");
		p_file->store_line("\t\tanimation_name = \"walk\"");
		p_file->store_line("\t");
		p_file->store_line("\t# Play animation if it changed");
		p_file->store_line("\tif animation_name != last_animation and animation_player.has_animation(animation_name):");
		p_file->store_line("\t\tanimation_player.play(animation_name)");
		p_file->store_line("\t\tlast_animation = animation_name");
		p_file->store_line("");
		p_file->store_line("func _setup_animations():");
		p_file->store_line("\t# Setup default animations if AnimationPlayer exists");
		p_file->store_line("\tif not animation_player:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Create basic animation library if none exists");
		p_file->store_line("\tif not animation_player.has_animation(\"idle\"):");
		p_file->store_line("\t\t_create_default_animations()");
		p_file->store_line("");
		p_file->store_line("func _create_default_animations():");
		p_file->store_line("\t# Create basic idle animation");
		p_file->store_line("\tvar idle_anim = Animation.new()");
		p_file->store_line("\tidle_anim.length = 1.0");
		p_file->store_line("\tanimation_player.add_animation_library(\"default\", AnimationLibrary.new())");
		p_file->store_line("\tanimation_player.get_animation_library(\"default\").add_animation(\"idle\", idle_anim)");
		p_file->store_line("\t");
		p_file->store_line("\t# Create basic walk animation");
		p_file->store_line("\tvar walk_anim = Animation.new()");
		p_file->store_line("\twalk_anim.length = 1.0");
		p_file->store_line("\tanimation_player.get_animation_library(\"default\").add_animation(\"walk\", walk_anim)");
		p_file->store_line("");
		p_file->store_line("func set_visibility(visible: bool):");
		p_file->store_line("\tself.visible = visible");
		p_file->store_line("\tset_physics_process(visible)");
		p_file->store_line("");
		p_file->store_line("func teleport_to_leader():");
		p_file->store_line("\tif leader_node:");
		p_file->store_line("\t\tglobal_position = leader_node.global_position");
		p_file->store_line("\t\tvelocity = Vector3.ZERO");
		p_file->store_line("\t\tleader_position_history.clear()");
	}
}

void JRPGPartySystem3DModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "PartyFollower3D") {
		p_file->store_line("[gd_scene load_steps=5 format=3 uid=\"uid://party_follower_3d\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/party/PartyFollower3D.gd\" id=\"1_follower_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CapsuleShape3D\" id=\"CapsuleShape3D_1\"]");
		p_file->store_line("radius = 0.4");
		p_file->store_line("height = 1.8");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CapsuleMesh\" id=\"CapsuleMesh_1\"]");
		p_file->store_line("radius = 0.4");
		p_file->store_line("height = 1.8");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"Animation\" id=\"Animation_1\"]");
		p_file->store_line("resource_name = \"idle\"");
		p_file->store_line("length = 1.0");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"AnimationLibrary\" id=\"AnimationLibrary_1\"]");
		p_file->store_line("_data = {");
		p_file->store_line("\"idle\": SubResource(\"Animation_1\")");
		p_file->store_line("}");
		p_file->store_line("");
		p_file->store_line("[node name=\"PartyFollower3D\" type=\"CharacterBody3D\"]");
		p_file->store_line("script = ExtResource(\"1_follower_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"MeshInstance3D\" type=\"MeshInstance3D\" parent=\".\"]");
		p_file->store_line("mesh = SubResource(\"CapsuleMesh_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape3D\" type=\"CollisionShape3D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"CapsuleShape3D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"AnimationPlayer\" type=\"AnimationPlayer\" parent=\".\"]");
		p_file->store_line("libraries = {");
		p_file->store_line("\"default\": SubResource(\"AnimationLibrary_1\")");
		p_file->store_line("}");
	}
}
