#include "dialogue_system_module.h"

void DialogueSystemModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();

	if (filename == "DialogueUI.gd") {
		// Generate DialogueUI script
		p_file->store_line("# DialogueUI.gd");
		p_file->store_line("# Generated by Lupine Engine - Dialogue UI");
		p_file->store_line("# UI controller for dialogue display");
		p_file->store_line("");
		p_file->store_line("extends Control");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal dialogue_advanced()");
		p_file->store_line("signal choice_selected(choice_index: int)");
		p_file->store_line("");
		p_file->store_line("# UI Components");
		p_file->store_line("@onready var speaker_label: Label = $DialogueBox/VBox/SpeakerLabel");
		p_file->store_line("@onready var dialogue_label: RichTextLabel = $DialogueBox/VBox/DialogueLabel");
		p_file->store_line("@onready var choices_container: VBoxContainer = $DialogueBox/VBox/ChoicesContainer");
		p_file->store_line("");
		p_file->store_line("# State");
		p_file->store_line("var current_line_index: int = 0");
		p_file->store_line("var is_displaying_text: bool = false");
		p_file->store_line("var text_speed: float = 0.05");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tvisible = false");
		p_file->store_line("");
		p_file->store_line("func _input(event):");
		p_file->store_line("\tif not visible:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tif event.is_action_pressed(\"ui_accept\") or event.is_action_pressed(\"interact\"):");
		p_file->store_line("\t\tif choices_container.visible:");
		p_file->store_line("\t\t\treturn  # Let choice buttons handle input");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tif is_displaying_text:");
		p_file->store_line("\t\t\t# Skip text animation");
		p_file->store_line("\t\t\tis_displaying_text = false");
		p_file->store_line("\t\telse:");
		p_file->store_line("\t\t\t# Advance dialogue");
		p_file->store_line("\t\t\tdialogue_advanced.emit()");
		p_file->store_line("");
		p_file->store_line("func display_line(speaker: String, text: String):");
		p_file->store_line("\tspeaker_label.text = speaker");
		p_file->store_line("\tchoices_container.visible = false");
		p_file->store_line("\t");
		p_file->store_line("\t# Animate text display");
		p_file->store_line("\tis_displaying_text = true");
		p_file->store_line("\tdialogue_label.text = \"\"");
		p_file->store_line("\t");
		p_file->store_line("\tvar tween = create_tween()");
		p_file->store_line("\tfor i in range(text.length()):");
		p_file->store_line("\t\ttween.tween_callback(_add_character.bind(text[i]))");
		p_file->store_line("\t\ttween.tween_delay(text_speed)");
		p_file->store_line("\t");
		p_file->store_line("\ttween.tween_callback(func(): is_displaying_text = false)");
		p_file->store_line("");
		p_file->store_line("func _add_character(character: String):");
		p_file->store_line("\tdialogue_label.text += character");
		p_file->store_line("");
		p_file->store_line("func show_choices(choices: Array):");
		p_file->store_line("\t# Clear existing choice buttons");
		p_file->store_line("\tfor child in choices_container.get_children():");
		p_file->store_line("\t\tchild.queue_free()");
		p_file->store_line("\t");
		p_file->store_line("\t# Create choice buttons");
		p_file->store_line("\tfor i in range(choices.size()):");
		p_file->store_line("\t\tvar choice = choices[i]");
		p_file->store_line("\t\tvar button = Button.new()");
		p_file->store_line("\t\tbutton.text = choice.text");
		p_file->store_line("\t\tbutton.pressed.connect(_on_choice_selected.bind(i))");
		p_file->store_line("\t\tchoices_container.add_child(button)");
		p_file->store_line("\t");
		p_file->store_line("\tchoices_container.visible = true");
		p_file->store_line("");
		p_file->store_line("func _on_choice_selected(choice_index: int):");
		p_file->store_line("\tchoice_selected.emit(choice_index)");
		return;
	} else if (filename == "NPC.gd") {
		// Generate NPC script
		p_file->store_line("# NPC.gd");
		p_file->store_line("# Generated by Lupine Engine - NPC Base Class");
		p_file->store_line("# Non-player character with dialogue interaction");
		p_file->store_line("");
		p_file->store_line("extends CharacterBody2D");
		p_file->store_line("class_name NPC");
		p_file->store_line("");
		p_file->store_line("# NPC Properties");
		p_file->store_line("@export var npc_name: String = \"NPC\"");
		p_file->store_line("@export var dialogue_id: String = \"\"");
		p_file->store_line("@export var can_move: bool = false");
		p_file->store_line("@export var move_speed: float = 50.0");
		p_file->store_line("");
		p_file->store_line("# Components");
		p_file->store_line("@onready var interaction_area: Area2D = $InteractionArea");
		p_file->store_line("@onready var interaction_prompt: Label = $InteractionPrompt");
		p_file->store_line("@onready var sprite: Sprite2D = $Sprite2D");
		p_file->store_line("");
		p_file->store_line("# State");
		p_file->store_line("var player_in_range: bool = false");
		p_file->store_line("var is_talking: bool = false");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tif interaction_area:");
		p_file->store_line("\t\tinteraction_area.body_entered.connect(_on_player_entered)");
		p_file->store_line("\t\tinteraction_area.body_exited.connect(_on_player_exited)");
		p_file->store_line("\t");
		p_file->store_line("\tif interaction_prompt:");
		p_file->store_line("\t\tinteraction_prompt.visible = false");
		p_file->store_line("");
		p_file->store_line("func _input(event):");
		p_file->store_line("\tif player_in_range and not is_talking:");
		p_file->store_line("\t\tif event.is_action_pressed(\"interact\"):");
		p_file->store_line("\t\t\tstart_dialogue()");
		p_file->store_line("");
		p_file->store_line("func _on_player_entered(body: Node):");
		p_file->store_line("\tif body.name.contains(\"Player\"):");
		p_file->store_line("\t\tplayer_in_range = true");
		p_file->store_line("\t\tif interaction_prompt:");
		p_file->store_line("\t\t\tinteraction_prompt.visible = true");
		p_file->store_line("");
		p_file->store_line("func _on_player_exited(body: Node):");
		p_file->store_line("\tif body.name.contains(\"Player\"):");
		p_file->store_line("\t\tplayer_in_range = false");
		p_file->store_line("\t\tif interaction_prompt:");
		p_file->store_line("\t\t\tinteraction_prompt.visible = false");
		p_file->store_line("");
		p_file->store_line("func start_dialogue():");
		p_file->store_line("\tif dialogue_id == \"\":");
		p_file->store_line("\t\tprint(\"No dialogue set for NPC: \", npc_name)");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tis_talking = true");
		p_file->store_line("\tif interaction_prompt:");
		p_file->store_line("\t\tinteraction_prompt.visible = false");
		p_file->store_line("\t");
		p_file->store_line("\tif DialogueSystem:");
		p_file->store_line("\t\tDialogueSystem.start_dialogue(self, dialogue_id)");
		p_file->store_line("\t\tDialogueSystem.dialogue_ended.connect(_on_dialogue_ended, CONNECT_ONE_SHOT)");
		p_file->store_line("");
		p_file->store_line("func _on_dialogue_ended():");
		p_file->store_line("\tis_talking = false");
		p_file->store_line("\tif player_in_range and interaction_prompt:");
		p_file->store_line("\t\tinteraction_prompt.visible = true");
		return;
	}
	p_file->store_line("# DialogueSystem.gd");
	p_file->store_line("# Generated by Lupine Engine - Dialogue System");
	p_file->store_line("# RPG dialogue system with NPC interactions and branching conversations");
	p_file->store_line("");
	p_file->store_line("extends Node");
	p_file->store_line("");
	p_file->store_line("# Signals");
	p_file->store_line("signal dialogue_started(npc_name: String)");
	p_file->store_line("signal dialogue_ended()");
	p_file->store_line("signal dialogue_line_displayed(speaker: String, text: String)");
	p_file->store_line("signal choice_presented(choices: Array)");
	p_file->store_line("signal quest_triggered(quest_id: String)");
	p_file->store_line("");
	p_file->store_line("# Current dialogue state");
	p_file->store_line("var current_dialogue: Dictionary = {}");
	p_file->store_line("var current_npc: Node = null");
	p_file->store_line("var dialogue_active: bool = false");
	p_file->store_line("var dialogue_ui: Control = null");
	p_file->store_line("");
	p_file->store_line("# Dialogue data storage");
	p_file->store_line("var dialogue_data: Dictionary = {}");
	p_file->store_line("var npc_states: Dictionary = {}");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\t# Load dialogue UI");
	p_file->store_line("\tvar dialogue_scene = preload(\"res://scenes/ui/DialogueUI.tscn\")");
	p_file->store_line("\tdialogue_ui = dialogue_scene.instantiate()");
	p_file->store_line("\tget_tree().current_scene.add_child(dialogue_ui)");
	p_file->store_line("\tdialogue_ui.visible = false");
	p_file->store_line("\t");
	p_file->store_line("\t# Connect UI signals");
	p_file->store_line("\tdialogue_ui.dialogue_advanced.connect(_on_dialogue_advanced)");
	p_file->store_line("\tdialogue_ui.choice_selected.connect(_on_choice_selected)");
	p_file->store_line("\t");
	p_file->store_line("\t# Load dialogue data");
	p_file->store_line("\t_load_dialogue_data()");
	p_file->store_line("");
	p_file->store_line("func start_dialogue(npc: Node, dialogue_id: String = \"\"):");
	p_file->store_line("\tif dialogue_active:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tcurrent_npc = npc");
	p_file->store_line("\tdialogue_active = true");
	p_file->store_line("\t");
	p_file->store_line("\t# Use provided dialogue_id or get from NPC");
	p_file->store_line("\tvar npc_dialogue_id = dialogue_id if dialogue_id != \"\" else npc.dialogue_id");
	p_file->store_line("\t");
	p_file->store_line("\tif not dialogue_data.has(npc_dialogue_id):");
	p_file->store_line("\t\tprint(\"Dialogue not found: \", npc_dialogue_id)");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tcurrent_dialogue = dialogue_data[npc_dialogue_id]");
	p_file->store_line("\t");
	p_file->store_line("\t# Pause player");
	p_file->store_line("\tget_tree().paused = true");
	p_file->store_line("\t");
	p_file->store_line("\t# Show dialogue UI");
	p_file->store_line("\tdialogue_ui.visible = true");
	p_file->store_line("\t");
	p_file->store_line("\t# Start first line");
	p_file->store_line("\t_display_dialogue_line(0)");
	p_file->store_line("\t");
	p_file->store_line("\tdialogue_started.emit(npc.npc_name)");
	p_file->store_line("");
	p_file->store_line("func end_dialogue():");
	p_file->store_line("\tif not dialogue_active:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tdialogue_active = false");
	p_file->store_line("\tcurrent_dialogue = {}");
	p_file->store_line("\tcurrent_npc = null");
	p_file->store_line("\t");
	p_file->store_line("\t# Hide dialogue UI");
	p_file->store_line("\tdialogue_ui.visible = false");
	p_file->store_line("\t");
	p_file->store_line("\t# Unpause game");
	p_file->store_line("\tget_tree().paused = false");
	p_file->store_line("\t");
	p_file->store_line("\tdialogue_ended.emit()");
	p_file->store_line("");
	p_file->store_line("func _display_dialogue_line(line_index: int):");
	p_file->store_line("\tif not current_dialogue.has(\"lines\") or line_index >= current_dialogue.lines.size():");
	p_file->store_line("\t\tend_dialogue()");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tvar line = current_dialogue.lines[line_index]");
	p_file->store_line("\t");
	p_file->store_line("\t# Check conditions if present");
	p_file->store_line("\tif line.has(\"condition\") and not _check_condition(line.condition):");
	p_file->store_line("\t\t_display_dialogue_line(line_index + 1)");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Process inline variables in text");
	p_file->store_line("\tvar processed_text = _process_inline_variables(line.text)");
	p_file->store_line("\t");
	p_file->store_line("\t# Display the line");
	p_file->store_line("\tdialogue_ui.display_line(line.speaker, processed_text)");
	p_file->store_line("\tdialogue_line_displayed.emit(line.speaker, processed_text)");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle choices");
	p_file->store_line("\tif line.has(\"choices\"):");
	p_file->store_line("\t\tdialogue_ui.show_choices(line.choices)");
	p_file->store_line("\t\tchoice_presented.emit(line.choices)");
	p_file->store_line("\telse:");
	p_file->store_line("\t\tdialogue_ui.current_line_index = line_index");
	p_file->store_line("");
	p_file->store_line("func _on_dialogue_advanced():");
	p_file->store_line("\tvar next_index = dialogue_ui.current_line_index + 1");
	p_file->store_line("\t_display_dialogue_line(next_index)");
	p_file->store_line("");
	p_file->store_line("func _on_choice_selected(choice_index: int):");
	p_file->store_line("\tvar current_line = current_dialogue.lines[dialogue_ui.current_line_index]");
	p_file->store_line("\tvar choice = current_line.choices[choice_index]");
	p_file->store_line("\t");
	p_file->store_line("\t# Execute choice action");
	p_file->store_line("\tif choice.has(\"action\"):");
	p_file->store_line("\t\t_execute_action(choice.action)");
	p_file->store_line("\t");
	p_file->store_line("\t# Continue to next line or jump");
	p_file->store_line("\tif choice.has(\"jump_to\"):");
	p_file->store_line("\t\t_display_dialogue_line(choice.jump_to)");
	p_file->store_line("\telse:");
	p_file->store_line("\t\t_display_dialogue_line(dialogue_ui.current_line_index + 1)");
	p_file->store_line("");
	p_file->store_line("func _check_condition(condition: Dictionary) -> bool:");
	p_file->store_line("\t# Check various conditions (quest status, items, etc.)");
	p_file->store_line("\tmatch condition.type:");
	p_file->store_line("\t\t\"quest_completed\":");
	p_file->store_line("\t\t\treturn QuestSystem.is_quest_completed(condition.quest_id) if QuestSystem else false");
	p_file->store_line("\t\t\"has_item\":");
	p_file->store_line("\t\t\treturn InventorySystem.has_item(condition.item_id) if InventorySystem else false");
	p_file->store_line("\t\t\"player_level\":");
	p_file->store_line("\t\t\treturn PlayerStats.level >= condition.level if PlayerStats else false");
	p_file->store_line("\t\t_:");
	p_file->store_line("\t\t\treturn true");
	p_file->store_line("");
	p_file->store_line("func _execute_action(action: Dictionary):");
	p_file->store_line("\t# Execute various actions");
	p_file->store_line("\tmatch action.type:");
	p_file->store_line("\t\t\"give_item\":");
	p_file->store_line("\t\t\tif InventorySystem:");
	p_file->store_line("\t\t\t\tInventorySystem.add_item(action.item_id, action.get(\"quantity\", 1))");
	p_file->store_line("\t\t\"start_quest\":");
	p_file->store_line("\t\t\tif QuestSystem:");
	p_file->store_line("\t\t\t\tQuestSystem.start_quest(action.quest_id)");
	p_file->store_line("\t\t\t\tquest_triggered.emit(action.quest_id)");
	p_file->store_line("\t\t\"give_experience\":");
	p_file->store_line("\t\t\tif PlayerStats:");
	p_file->store_line("\t\t\t\tPlayerStats.add_experience(action.amount)");
	p_file->store_line("\t\t\"set_npc_state\":");
	p_file->store_line("\t\t\tnpc_states[current_npc.get_instance_id()] = action.state");
	p_file->store_line("");
	p_file->store_line("func _process_inline_variables(text: String) -> String:");
	p_file->store_line("\t# Process inline variables like {player_name}, {gold}, etc.");
	p_file->store_line("\tvar processed_text = text");
	p_file->store_line("\t");
	p_file->store_line("\t# Replace player stats variables");
	p_file->store_line("\tif PlayerStats:");
	p_file->store_line("\t\tprocessed_text = processed_text.replace(\"{player_name}\", PlayerStats.player_name)");
	p_file->store_line("\t\tprocessed_text = processed_text.replace(\"{level}\", str(PlayerStats.level))");
	p_file->store_line("\t\tprocessed_text = processed_text.replace(\"{gold}\", str(PlayerStats.gold))");
	p_file->store_line("\t\tprocessed_text = processed_text.replace(\"{health}\", str(PlayerStats.current_health))");
	p_file->store_line("\t\tprocessed_text = processed_text.replace(\"{max_health}\", str(PlayerStats.max_health))");
	p_file->store_line("\t");
	p_file->store_line("\t# Replace quest variables");
	p_file->store_line("\tif QuestSystem:");
	p_file->store_line("\t\tprocessed_text = processed_text.replace(\"{quest_count}\", str(QuestSystem.active_quests.size()))");
	p_file->store_line("\t");
	p_file->store_line("\t# Replace inventory variables");
	p_file->store_line("\tif InventorySystem:");
	p_file->store_line("\t\tvar regex = RegEx.new()");
	p_file->store_line("\t\tregex.compile(\"\\\\{item_count:([^}]+)\\\\}\")");
	p_file->store_line("\t\tvar result = regex.search(processed_text)");
	p_file->store_line("\t\twhile result:");
	p_file->store_line("\t\t\tvar item_id = result.get_string(1)");
	p_file->store_line("\t\t\tvar count = 0");
	p_file->store_line("\t\t\tfor item in InventorySystem.items:");
	p_file->store_line("\t\t\t\tif item.has(\"id\") and item.id == item_id:");
	p_file->store_line("\t\t\t\t\tcount += item.get(\"quantity\", 1)");
	p_file->store_line("\t\t\tprocessed_text = processed_text.replace(result.get_string(0), str(count))");
	p_file->store_line("\t\t\tresult = regex.search(processed_text)");
	p_file->store_line("\t");
	p_file->store_line("\treturn processed_text");
	p_file->store_line("");
	p_file->store_line("func _load_dialogue_data():");
	p_file->store_line("\t# Load dialogue from JSON files");
	p_file->store_line("\tvar dialogue_dir = \"res://data/dialogues/\"");
	p_file->store_line("\tvar dir = DirAccess.open(dialogue_dir)");
	p_file->store_line("\tif dir:");
	p_file->store_line("\t\tdir.list_dir_begin()");
	p_file->store_line("\t\tvar file_name = dir.get_next()");
	p_file->store_line("\t\twhile file_name != \"\":");
	p_file->store_line("\t\t\tif file_name.ends_with(\".json\"):");
	p_file->store_line("\t\t\t\tvar file_path = dialogue_dir + file_name");
	p_file->store_line("\t\t\t\tvar file = FileAccess.open(file_path, FileAccess.READ)");
	p_file->store_line("\t\t\t\tif file:");
	p_file->store_line("\t\t\t\t\tvar json_text = file.get_as_text()");
	p_file->store_line("\t\t\t\t\tfile.close()");
	p_file->store_line("\t\t\t\t\tvar json = JSON.new()");
	p_file->store_line("\t\t\t\t\tvar parse_result = json.parse(json_text)");
	p_file->store_line("\t\t\t\t\tif parse_result == OK:");
	p_file->store_line("\t\t\t\t\t\tdialogue_data.merge(json.data)");
	p_file->store_line("\t\t\tfile_name = dir.get_next()");
	p_file->store_line("");
	p_file->store_line("func get_npc_state(npc: Node) -> String:");
	p_file->store_line("\treturn npc_states.get(npc.get_instance_id(), \"default\")");
	p_file->store_line("");
	p_file->store_line("func set_npc_state(npc: Node, state: String):");
	p_file->store_line("\tnpc_states[npc.get_instance_id()] = state");
}

void DialogueSystemModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "DialogueUI") {
		// Generate dialogue UI scene
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://dialogue_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/DialogueUI.gd\" id=\"1_dialogue_ui_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"DialogueUI\" type=\"Control\"]");
		p_file->store_line("process_mode = 2");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_dialogue_ui_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"DialogueBox\" type=\"NinePatchRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 2");
		p_file->store_line("anchor_top = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 50.0");
		p_file->store_line("offset_top = -200.0");
		p_file->store_line("offset_right = -50.0");
		p_file->store_line("offset_bottom = -50.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"VBox\" type=\"VBoxContainer\" parent=\"DialogueBox\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 20.0");
		p_file->store_line("offset_top = 20.0");
		p_file->store_line("offset_right = -20.0");
		p_file->store_line("offset_bottom = -20.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"SpeakerLabel\" type=\"Label\" parent=\"DialogueBox/VBox\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Speaker\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"DialogueLabel\" type=\"RichTextLabel\" parent=\"DialogueBox/VBox\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_vertical = 3");
		p_file->store_line("bbcode_enabled = true");
		p_file->store_line("text = \"Dialogue text goes here...\"");
		p_file->store_line("fit_content = true");
		p_file->store_line("");
		p_file->store_line("[node name=\"ChoicesContainer\" type=\"VBoxContainer\" parent=\"DialogueBox/VBox\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("visible = false");
	} else if (p_scene_name == "NPC") {
		// Generate NPC scene
		p_file->store_line("[gd_scene load_steps=3 format=3 uid=\"uid://npc_base\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/characters/NPC.gd\" id=\"1_npc_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"RectangleShape2D\" id=\"RectangleShape2D_1\"]");
		p_file->store_line("size = Vector2(32, 48)");
		p_file->store_line("");
		p_file->store_line("[node name=\"NPC\" type=\"CharacterBody2D\"]");
		p_file->store_line("script = ExtResource(\"1_npc_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("modulate = Color(0.5, 0.8, 1, 1)");
		p_file->store_line("scale = Vector2(32, 48)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"InteractionArea\" type=\"Area2D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"InteractionShape\" type=\"CollisionShape2D\" parent=\"InteractionArea\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("scale = Vector2(1.5, 1.5)");
		p_file->store_line("");
		p_file->store_line("[node name=\"InteractionPrompt\" type=\"Label\" parent=\".\"]");
		p_file->store_line("offset_left = -20.0");
		p_file->store_line("offset_top = -60.0");
		p_file->store_line("offset_right = 20.0");
		p_file->store_line("offset_bottom = -40.0");
		p_file->store_line("text = \"Press E\"");
		p_file->store_line("horizontal_alignment = 1");
		p_file->store_line("visible = false");
	}
}
