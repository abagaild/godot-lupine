#include "tactical_combat_2d_module.h"

void TacticalCombat2DModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();

	if (filename == "TacticalCombatManager.gd") {
		p_file->store_line("# TacticalCombatManager.gd");
		p_file->store_line("# Generated by Lupine Engine - Tactical Combat Manager");
		p_file->store_line("# Grid-based tactical combat system for Fire Emblem-style games");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal battle_started(battlefield: Node)");
		p_file->store_line("signal battle_ended(victory: bool)");
		p_file->store_line("signal turn_started(faction: String)");
		p_file->store_line("signal turn_ended(faction: String)");
		p_file->store_line("signal unit_selected(unit: TacticalUnit2D)");
		p_file->store_line("signal unit_moved(unit: TacticalUnit2D, from: Vector2i, to: Vector2i)");
		p_file->store_line("signal unit_attacked(attacker: TacticalUnit2D, target: TacticalUnit2D, damage: int)");
		p_file->store_line("signal unit_died(unit: TacticalUnit2D)");
		p_file->store_line("");
		p_file->store_line("# Combat state");
		p_file->store_line("enum CombatPhase { DEPLOYMENT, PLAYER_TURN, ALLY_TURN, ENEMY_TURN, VICTORY, DEFEAT }");
		p_file->store_line("var current_phase: CombatPhase = CombatPhase.DEPLOYMENT");
		p_file->store_line("var current_turn: int = 1");
		p_file->store_line("var selected_unit: TacticalUnit2D = null");
		p_file->store_line("");
		p_file->store_line("# Battle components");
		p_file->store_line("var battlefield: TacticalGrid2D");
		p_file->store_line("var tactical_ui: Control");
		p_file->store_line("var movement_calculator: MovementCalculator");
		p_file->store_line("var attack_calculator: AttackCalculator");
		p_file->store_line("var tactical_ai: TacticalAI");
		p_file->store_line("");
		p_file->store_line("# Unit management");
		p_file->store_line("var player_units: Array[TacticalUnit2D] = []");
		p_file->store_line("var ally_units: Array[TacticalUnit2D] = []");
		p_file->store_line("var enemy_units: Array[TacticalUnit2D] = []");
		p_file->store_line("var units_acted_this_turn: Array[TacticalUnit2D] = []");
		p_file->store_line("");
		p_file->store_line("# Battle settings");
		p_file->store_line("@export var grid_size: Vector2i = Vector2i(20, 15)");
		p_file->store_line("@export var tile_size: int = 32");
		p_file->store_line("@export var allow_unit_stacking: bool = false");
		p_file->store_line("@export var fog_of_war: bool = false");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Initialize systems");
		p_file->store_line("\tmovement_calculator = MovementCalculator.new()");
		p_file->store_line("\tattack_calculator = AttackCalculator.new()");
		p_file->store_line("\ttactical_ai = TacticalAI.new()");
		p_file->store_line("\t");
		p_file->store_line("\t# Load UI");
		p_file->store_line("\tvar ui_scene = preload(\"res://scenes/ui/TacticalUI.tscn\")");
		p_file->store_line("\ttactical_ui = ui_scene.instantiate()");
		p_file->store_line("\ttactical_ui.visible = false");
		p_file->store_line("\tget_tree().current_scene.add_child(tactical_ui)");
		p_file->store_line("");
		p_file->store_line("func start_battle(enemy_army: EnemyArmy, battlefield_scene: PackedScene = null):");
		p_file->store_line("\t# Load battlefield");
		p_file->store_line("\tif battlefield_scene:");
		p_file->store_line("\t\tbattlefield = battlefield_scene.instantiate()");
		p_file->store_line("\telse:");
		p_file->store_line("\t\tvar default_battlefield = preload(\"res://scenes/tactical/TacticalBattlefield2D.tscn\")");
		p_file->store_line("\t\tbattlefield = default_battlefield.instantiate()");
		p_file->store_line("\t");
		p_file->store_line("\tget_tree().current_scene.add_child(battlefield)");
		p_file->store_line("\tbattlefield.setup_grid(grid_size, tile_size)");
		p_file->store_line("\t");
		p_file->store_line("\t# Setup enemy units");
		p_file->store_line("\t_spawn_enemy_army(enemy_army)");
		p_file->store_line("\t");
		p_file->store_line("\t# Show UI");
		p_file->store_line("\ttactical_ui.visible = true");
		p_file->store_line("\ttactical_ui.setup_for_battle(self)");
		p_file->store_line("\t");
		p_file->store_line("\t# Start deployment phase");
		p_file->store_line("\tcurrent_phase = CombatPhase.DEPLOYMENT");
		p_file->store_line("\tbattle_started.emit(battlefield)");
		p_file->store_line("");
		p_file->store_line("func deploy_player_unit(unit: TacticalUnit, grid_position: Vector2i) -> bool:");
		p_file->store_line("\tif current_phase != CombatPhase.DEPLOYMENT:");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if position is valid deployment zone");
		p_file->store_line("\tif not battlefield.is_valid_deployment_position(grid_position, \"player\"):");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Create tactical unit");
		p_file->store_line("\tvar tactical_unit = _create_tactical_unit_2d(unit)");
		p_file->store_line("\ttactical_unit.grid_position = grid_position");
		p_file->store_line("\ttactical_unit.faction = \"player\"");
		p_file->store_line("\t");
		p_file->store_line("\t# Add to battlefield");
		p_file->store_line("\tbattlefield.place_unit(tactical_unit, grid_position)");
		p_file->store_line("\tplayer_units.append(tactical_unit)");
		p_file->store_line("\t");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func start_combat_phase():");
		p_file->store_line("\tif current_phase != CombatPhase.DEPLOYMENT:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tcurrent_phase = CombatPhase.PLAYER_TURN");
		p_file->store_line("\tcurrent_turn = 1");
		p_file->store_line("\t_start_player_turn()");
		p_file->store_line("");
		p_file->store_line("func _start_player_turn():");
		p_file->store_line("\tcurrent_phase = CombatPhase.PLAYER_TURN");
		p_file->store_line("\tunits_acted_this_turn.clear()");
		p_file->store_line("\t");
		p_file->store_line("\t# Reset unit actions");
		p_file->store_line("\tfor unit in player_units:");
		p_file->store_line("\t\tunit.reset_turn_actions()");
		p_file->store_line("\t");
		p_file->store_line("\tturn_started.emit(\"player\")");
		p_file->store_line("");
		p_file->store_line("func _start_ally_turn():");
		p_file->store_line("\tcurrent_phase = CombatPhase.ALLY_TURN");
		p_file->store_line("\t");
		p_file->store_line("\t# Reset ally actions");
		p_file->store_line("\tfor unit in ally_units:");
		p_file->store_line("\t\tunit.reset_turn_actions()");
		p_file->store_line("\t");
		p_file->store_line("\tturn_started.emit(\"ally\")");
		p_file->store_line("\t");
		p_file->store_line("\t# Process ally AI");
		p_file->store_line("\tawait _process_ai_turn(ally_units)");
		p_file->store_line("\t_start_enemy_turn()");
		p_file->store_line("");
		p_file->store_line("func _start_enemy_turn():");
		p_file->store_line("\tcurrent_phase = CombatPhase.ENEMY_TURN");
		p_file->store_line("\t");
		p_file->store_line("\t# Reset enemy actions");
		p_file->store_line("\tfor unit in enemy_units:");
		p_file->store_line("\t\tunit.reset_turn_actions()");
		p_file->store_line("\t");
		p_file->store_line("\tturn_started.emit(\"enemy\")");
		p_file->store_line("\t");
		p_file->store_line("\t# Process enemy AI");
		p_file->store_line("\tawait _process_ai_turn(enemy_units)");
		p_file->store_line("\t_end_turn()");
		p_file->store_line("");
		p_file->store_line("func _end_turn():");
		p_file->store_line("\tcurrent_turn += 1");
		p_file->store_line("\t");
		p_file->store_line("\t# Check victory conditions");
		p_file->store_line("\tif _check_victory_conditions():");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Start next turn");
		p_file->store_line("\t_start_player_turn()");
		p_file->store_line("");
		p_file->store_line("func end_player_turn():");
		p_file->store_line("\tif current_phase != CombatPhase.PLAYER_TURN:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tturn_ended.emit(\"player\")");
		p_file->store_line("\t");
		p_file->store_line("\tif ally_units.size() > 0:");
		p_file->store_line("\t\t_start_ally_turn()");
		p_file->store_line("\telse:");
		p_file->store_line("\t\t_start_enemy_turn()");
		p_file->store_line("");
		p_file->store_line("func select_unit(unit: TacticalUnit2D):");
		p_file->store_line("\tif current_phase != CombatPhase.PLAYER_TURN:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tif unit.faction != \"player\" or units_acted_this_turn.has(unit):");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tselected_unit = unit");
		p_file->store_line("\t");
		p_file->store_line("\t# Show movement range");
		p_file->store_line("\tvar movement_range = movement_calculator.calculate_movement_range(unit, battlefield)");
		p_file->store_line("\tbattlefield.highlight_tiles(movement_range, \"movement\")");
		p_file->store_line("\t");
		p_file->store_line("\t# Show attack range");
		p_file->store_line("\tvar attack_range = attack_calculator.calculate_attack_range(unit, battlefield)");
		p_file->store_line("\tbattlefield.highlight_tiles(attack_range, \"attack\")");
		p_file->store_line("\t");
		p_file->store_line("\tunit_selected.emit(unit)");
		p_file->store_line("");
		p_file->store_line("func move_unit(unit: TacticalUnit2D, target_position: Vector2i) -> bool:");
		p_file->store_line("\tif unit != selected_unit or units_acted_this_turn.has(unit):");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if movement is valid");
		p_file->store_line("\tvar movement_range = movement_calculator.calculate_movement_range(unit, battlefield)");
		p_file->store_line("\tif not movement_range.has(target_position):");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\tvar old_position = unit.grid_position");
		p_file->store_line("\t");
		p_file->store_line("\t# Move unit");
		p_file->store_line("\tbattlefield.move_unit(unit, target_position)");
		p_file->store_line("\tunit.grid_position = target_position");
		p_file->store_line("\tunit.has_moved = true");
		p_file->store_line("\t");
		p_file->store_line("\tunit_moved.emit(unit, old_position, target_position)");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func attack_unit(attacker: TacticalUnit2D, target: TacticalUnit2D) -> bool:");
		p_file->store_line("\tif attacker != selected_unit or units_acted_this_turn.has(attacker):");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if attack is valid");
		p_file->store_line("\tvar attack_range = attack_calculator.calculate_attack_range(attacker, battlefield)");
		p_file->store_line("\tif not attack_range.has(target.grid_position):");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate damage");
		p_file->store_line("\tvar damage = attack_calculator.calculate_damage(attacker, target)");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply damage");
		p_file->store_line("\ttarget.take_damage(damage)");
		p_file->store_line("\tattacker.has_attacked = true");
		p_file->store_line("\t");
		p_file->store_line("\tunit_attacked.emit(attacker, target, damage)");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if target died");
		p_file->store_line("\tif target.is_dead():");
		p_file->store_line("\t\t_handle_unit_death(target)");
		p_file->store_line("\t");
		p_file->store_line("\t# Mark unit as acted");
		p_file->store_line("\tunits_acted_this_turn.append(attacker)");
		p_file->store_line("\tselected_unit = null");
		p_file->store_line("\tbattlefield.clear_highlights()");
		p_file->store_line("\t");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func _handle_unit_death(unit: TacticalUnit2D):");
		p_file->store_line("\t# Remove from battlefield");
		p_file->store_line("\tbattlefield.remove_unit(unit)");
		p_file->store_line("\t");
		p_file->store_line("\t# Remove from unit arrays");
		p_file->store_line("\tplayer_units.erase(unit)");
		p_file->store_line("\tally_units.erase(unit)");
		p_file->store_line("\tenemy_units.erase(unit)");
		p_file->store_line("\t");
		p_file->store_line("\tunit_died.emit(unit)");
		p_file->store_line("\t");
		p_file->store_line("\t# Check victory conditions");
		p_file->store_line("\t_check_victory_conditions()");
		p_file->store_line("");
		p_file->store_line("func _check_victory_conditions() -> bool:");
		p_file->store_line("\t# Check defeat conditions");
		p_file->store_line("\tif player_units.is_empty():");
		p_file->store_line("\t\tcurrent_phase = CombatPhase.DEFEAT");
		p_file->store_line("\t\tbattle_ended.emit(false)");
		p_file->store_line("\t\treturn true");
		p_file->store_line("\t");
		p_file->store_line("\t# Check victory conditions");
		p_file->store_line("\tif enemy_units.is_empty():");
		p_file->store_line("\t\tcurrent_phase = CombatPhase.VICTORY");
		p_file->store_line("\t\tbattle_ended.emit(true)");
		p_file->store_line("\t\treturn true");
		p_file->store_line("\t");
		p_file->store_line("\treturn false");
		p_file->store_line("");
		p_file->store_line("func _process_ai_turn(units: Array[TacticalUnit2D]):");
		p_file->store_line("\tfor unit in units:");
		p_file->store_line("\t\tif unit.is_dead():");
		p_file->store_line("\t\t\tcontinue");
		p_file->store_line("\t\t");
		p_file->store_line("\t\t# AI decides action");
		p_file->store_line("\t\tvar action = tactical_ai.decide_action(unit, battlefield, player_units, enemy_units)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\t# Execute action");
		p_file->store_line("\t\tawait _execute_ai_action(unit, action)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\t# Small delay between AI actions");
		p_file->store_line("\t\tawait get_tree().create_timer(0.5).timeout");
		p_file->store_line("");
		p_file->store_line("func _execute_ai_action(unit: TacticalUnit2D, action: Dictionary):");
		p_file->store_line("\tmatch action.type:");
		p_file->store_line("\t\t\"move\":");
		p_file->store_line("\t\t\tmove_unit(unit, action.target_position)");
		p_file->store_line("\t\t\"attack\":");
		p_file->store_line("\t\t\tattack_unit(unit, action.target_unit)");
		p_file->store_line("\t\t\"wait\":");
		p_file->store_line("\t\t\tpass  # Do nothing");
		p_file->store_line("\t");
		p_file->store_line("\t# Animation delay");
		p_file->store_line("\tawait get_tree().create_timer(0.3).timeout");
	}
}

void TacticalCombat2DModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "TacticalBattlefield2D") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://tactical_battlefield_2d\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/tactical/TacticalGrid2D.gd\" id=\"1_grid_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"TacticalBattlefield2D\" type=\"Node2D\"]");
		p_file->store_line("script = ExtResource(\"1_grid_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"GridLayer\" type=\"Node2D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"UnitsLayer\" type=\"Node2D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"EffectsLayer\" type=\"Node2D\" parent=\".\"]");
	} else if (p_scene_name == "TacticalUnit2D") {
		p_file->store_line("[gd_scene load_steps=3 format=3 uid=\"uid://tactical_unit_2d\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/tactical/TacticalUnit2D.gd\" id=\"1_unit_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"RectangleShape2D\" id=\"RectangleShape2D_1\"]");
		p_file->store_line("size = Vector2(28, 28)");
		p_file->store_line("");
		p_file->store_line("[node name=\"TacticalUnit2D\" type=\"CharacterBody2D\"]");
		p_file->store_line("script = ExtResource(\"1_unit_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("modulate = Color(0.2, 0.6, 1, 1)");
		p_file->store_line("scale = Vector2(28, 28)");
		p_file->store_line("");
		p_file->store_line("[node name=\"HealthBar\" type=\"ProgressBar\" parent=\".\"]");
		p_file->store_line("offset_left = -14.0");
		p_file->store_line("offset_top = -20.0");
		p_file->store_line("offset_right = 14.0");
		p_file->store_line("offset_bottom = -16.0");
		p_file->store_line("max_value = 100.0");
		p_file->store_line("value = 100.0");
	} else if (p_scene_name == "TacticalUI") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://tactical_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/TacticalUI.gd\" id=\"1_ui_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"TacticalUI\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_ui_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"TopPanel\" type=\"Panel\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 10");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("offset_bottom = 60.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"TurnLabel\" type=\"Label\" parent=\"TopPanel\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 4");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = 20.0");
		p_file->store_line("offset_top = -12.0");
		p_file->store_line("offset_right = 200.0");
		p_file->store_line("offset_bottom = 12.0");
		p_file->store_line("text = \"Player Turn\"");
		p_file->store_line("vertical_alignment = 1");
		p_file->store_line("");
		p_file->store_line("[node name=\"EndTurnButton\" type=\"Button\" parent=\"TopPanel\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 6");
		p_file->store_line("anchor_left = 1.0");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = -120.0");
		p_file->store_line("offset_top = -15.0");
		p_file->store_line("offset_right = -20.0");
		p_file->store_line("offset_bottom = 15.0");
		p_file->store_line("text = \"End Turn\"");
	}
}
