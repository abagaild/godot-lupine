#include "topdown_rpg_main_scene_module.h"

void TopdownRPGMainSceneModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();

	if (filename == "GameManager.gd") {
		p_file->store_line("# GameManager.gd");
		p_file->store_line("# Generated by Lupine Engine - Top-down RPG Game Manager");
		p_file->store_line("# Central game state and system coordinator");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal game_paused()");
		p_file->store_line("signal game_unpaused()");
		p_file->store_line("signal scene_changed(new_scene: String)");
		p_file->store_line("signal player_spawned(player: Node)");
		p_file->store_line("");
		p_file->store_line("# Game state");
		p_file->store_line("var is_paused: bool = false");
		p_file->store_line("var current_scene: String = \"\"");
		p_file->store_line("var player_instance: Node = null");
		p_file->store_line("var game_ui: Control = null");
		p_file->store_line("");
		p_file->store_line("# Settings");
		p_file->store_line("var auto_save_interval: float = 300.0  # 5 minutes");
		p_file->store_line("var auto_save_timer: float = 0.0");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Setup input handling");
		p_file->store_line("\tset_process_unhandled_input(true)");
		p_file->store_line("\t");
		p_file->store_line("\t# Connect to other systems");
		p_file->store_line("\tif PlayerStats:");
		p_file->store_line("\t\tPlayerStats.player_died.connect(_on_player_died)");
		p_file->store_line("\t");
		p_file->store_line("\t# Load game UI");
		p_file->store_line("\t_setup_game_ui()");
		p_file->store_line("");
		p_file->store_line("func _process(delta: float):");
		p_file->store_line("\tif not is_paused:");
		p_file->store_line("\t\tauto_save_timer += delta");
		p_file->store_line("\t\tif auto_save_timer >= auto_save_interval:");
		p_file->store_line("\t\t\tauto_save_timer = 0.0");
		p_file->store_line("\t\t\t_auto_save()");
		p_file->store_line("");
		p_file->store_line("func _unhandled_input(event: InputEvent):");
		p_file->store_line("\tif event.is_action_pressed(\"pause_game\"):");
		p_file->store_line("\t\ttoggle_pause()");
		p_file->store_line("\telif event.is_action_pressed(\"open_inventory\"):");
		p_file->store_line("\t\ttoggle_inventory()");
		p_file->store_line("\telif event.is_action_pressed(\"open_journal\"):");
		p_file->store_line("\t\ttoggle_quest_journal()");
		p_file->store_line("");
		p_file->store_line("func toggle_pause():");
		p_file->store_line("\tis_paused = !is_paused");
		p_file->store_line("\tget_tree().paused = is_paused");
		p_file->store_line("\t");
		p_file->store_line("\tif is_paused:");
		p_file->store_line("\t\tgame_paused.emit()");
		p_file->store_line("\t\tif game_ui and game_ui.has_method(\"show_pause_menu\"):");
		p_file->store_line("\t\t\tgame_ui.show_pause_menu()");
		p_file->store_line("\telse:");
		p_file->store_line("\t\tgame_unpaused.emit()");
		p_file->store_line("\t\tif game_ui and game_ui.has_method(\"hide_pause_menu\"):");
		p_file->store_line("\t\t\tgame_ui.hide_pause_menu()");
		p_file->store_line("");
		p_file->store_line("func toggle_inventory():");
		p_file->store_line("\tif InventorySystem and game_ui:");
		p_file->store_line("\t\tif game_ui.has_method(\"toggle_inventory\"):");
		p_file->store_line("\t\t\tgame_ui.toggle_inventory()");
		p_file->store_line("");
		p_file->store_line("func toggle_quest_journal():");
		p_file->store_line("\tif QuestSystem and game_ui:");
		p_file->store_line("\t\tif game_ui.has_method(\"toggle_quest_journal\"):");
		p_file->store_line("\t\t\tgame_ui.toggle_quest_journal()");
		p_file->store_line("");
		p_file->store_line("func spawn_player(spawn_position: Vector2 = Vector2.ZERO):");
		p_file->store_line("\t# Load player scene");
		p_file->store_line("\tvar player_scene = preload(\"res://scenes/Player2DTopdown.tscn\")");
		p_file->store_line("\tplayer_instance = player_scene.instantiate()");
		p_file->store_line("\tplayer_instance.global_position = spawn_position");
		p_file->store_line("\t");
		p_file->store_line("\t# Add to current scene");
		p_file->store_line("\tget_tree().current_scene.add_child(player_instance)");
		p_file->store_line("\t");
		p_file->store_line("\t# Setup camera");
		p_file->store_line("\tvar camera = get_tree().get_first_node_in_group(\"camera\")");
		p_file->store_line("\tif camera and camera.has_method(\"set_target\"):");
		p_file->store_line("\t\tcamera.set_target(player_instance)");
		p_file->store_line("\t");
		p_file->store_line("\tplayer_spawned.emit(player_instance)");
		p_file->store_line("");
		p_file->store_line("func change_scene(scene_path: String, spawn_position: Vector2 = Vector2.ZERO):");
		p_file->store_line("\tcurrent_scene = scene_path");
		p_file->store_line("\tget_tree().change_scene_to_file(scene_path)");
		p_file->store_line("\t");
		p_file->store_line("\t# Wait for scene to load, then spawn player");
		p_file->store_line("\tawait get_tree().process_frame");
		p_file->store_line("\tspawn_player(spawn_position)");
		p_file->store_line("\t");
		p_file->store_line("\tscene_changed.emit(scene_path)");
		p_file->store_line("");
		p_file->store_line("func _setup_game_ui():");
		p_file->store_line("\tvar ui_scene = preload(\"res://scenes/ui/GameUI.tscn\")");
		p_file->store_line("\tgame_ui = ui_scene.instantiate()");
		p_file->store_line("\tget_tree().current_scene.add_child(game_ui)");
		p_file->store_line("");
		p_file->store_line("func _auto_save():");
		p_file->store_line("\tif SaveLoadSystem:");
		p_file->store_line("\t\tSaveLoadSystem.auto_save()");
		p_file->store_line("");
		p_file->store_line("func _on_player_died():");
		p_file->store_line("\t# Handle player death");
		p_file->store_line("\tif game_ui and game_ui.has_method(\"show_death_screen\"):");
		p_file->store_line("\t\tgame_ui.show_death_screen()");
	} else if (filename == "WorldManager.gd") {
		p_file->store_line("# WorldManager.gd");
		p_file->store_line("# Generated by Lupine Engine - World Manager");
		p_file->store_line("# Manages world state, NPCs, enemies, and interactive objects");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("class_name WorldManager");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal area_entered(area_name: String)");
		p_file->store_line("signal area_exited(area_name: String)");
		p_file->store_line("signal enemy_spawned(enemy: Node)");
		p_file->store_line("signal enemy_defeated(enemy: Node)");
		p_file->store_line("");
		p_file->store_line("# World state");
		p_file->store_line("var current_area: String = \"\"");
		p_file->store_line("var active_enemies: Array[Node] = []");
		p_file->store_line("var active_npcs: Array[Node] = []");
		p_file->store_line("var world_objects: Dictionary = {}");
		p_file->store_line("");
		p_file->store_line("# Spawn settings");
		p_file->store_line("@export var max_enemies_per_area: int = 10");
		p_file->store_line("@export var enemy_respawn_time: float = 60.0");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Connect to game events");
		p_file->store_line("\tif GameManager:");
		p_file->store_line("\t\tGameManager.scene_changed.connect(_on_scene_changed)");
		p_file->store_line("");
		p_file->store_line("func register_enemy(enemy: Node):");
		p_file->store_line("\tactive_enemies.append(enemy)");
		p_file->store_line("\tenemy.enemy_died.connect(_on_enemy_died)");
		p_file->store_line("\tenemy_spawned.emit(enemy)");
		p_file->store_line("");
		p_file->store_line("func register_npc(npc: Node):");
		p_file->store_line("\tactive_npcs.append(npc)");
		p_file->store_line("");
		p_file->store_line("func register_world_object(object: Node, object_id: String):");
		p_file->store_line("\tworld_objects[object_id] = object");
		p_file->store_line("");
		p_file->store_line("func get_world_object(object_id: String) -> Node:");
		p_file->store_line("\treturn world_objects.get(object_id, null)");
		p_file->store_line("");
		p_file->store_line("func _on_enemy_died(enemy: Node):");
		p_file->store_line("\tactive_enemies.erase(enemy)");
		p_file->store_line("\tenemy_defeated.emit(enemy)");
		p_file->store_line("\t");
		p_file->store_line("\t# Update quest progress");
		p_file->store_line("\tif QuestSystem and enemy.has_method(\"get_enemy_type\"):");
		p_file->store_line("\t\tQuestSystem.update_objective_progress(\"\", \"enemy_killed\", enemy.get_enemy_type())");
		p_file->store_line("");
		p_file->store_line("func _on_scene_changed(scene_path: String):");
		p_file->store_line("\t# Clear previous scene data");
		p_file->store_line("\tactive_enemies.clear()");
		p_file->store_line("\tactive_npcs.clear()");
		p_file->store_line("\tworld_objects.clear()");
		p_file->store_line("\t");
		p_file->store_line("\t# Initialize new scene");
		p_file->store_line("\tcurrent_area = scene_path.get_file().get_basename()");
		p_file->store_line("\tarea_entered.emit(current_area)");
	} else if (filename == "InputManager.gd") {
		p_file->store_line("# InputManager.gd");
		p_file->store_line("# Generated by Lupine Engine - Input Manager");
		p_file->store_line("# Centralized input handling and key binding management");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("class_name InputManager");
		p_file->store_line("");
		p_file->store_line("# Input action mappings");
		p_file->store_line("var action_mappings: Dictionary = {");
		p_file->store_line("\t\"move_up\": [KEY_W, KEY_UP],");
		p_file->store_line("\t\"move_down\": [KEY_S, KEY_DOWN],");
		p_file->store_line("\t\"move_left\": [KEY_A, KEY_LEFT],");
		p_file->store_line("\t\"move_right\": [KEY_D, KEY_RIGHT],");
		p_file->store_line("\t\"sprint\": [KEY_SHIFT],");
		p_file->store_line("\t\"attack\": [KEY_F, MOUSE_BUTTON_LEFT],");
		p_file->store_line("\t\"ranged_attack\": [KEY_R, MOUSE_BUTTON_RIGHT],");
		p_file->store_line("\t\"dash\": [KEY_TAB],");
		p_file->store_line("\t\"interact\": [KEY_E],");
		p_file->store_line("\t\"pause_game\": [KEY_ESCAPE],");
		p_file->store_line("\t\"open_inventory\": [KEY_I],");
		p_file->store_line("\t\"open_journal\": [KEY_J],");
		p_file->store_line("\t\"quick_save\": [KEY_F5],");
		p_file->store_line("\t\"quick_load\": [KEY_F9]");
		p_file->store_line("}");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t_setup_input_actions()");
		p_file->store_line("");
		p_file->store_line("func _setup_input_actions():");
		p_file->store_line("\t# Create input actions if they don't exist");
		p_file->store_line("\tfor action_name in action_mappings:");
		p_file->store_line("\t\tif not InputMap.has_action(action_name):");
		p_file->store_line("\t\t\tInputMap.add_action(action_name)");
		p_file->store_line("\t\t\t");
		p_file->store_line("\t\t\t# Add key bindings");
		p_file->store_line("\t\t\tfor key_code in action_mappings[action_name]:");
		p_file->store_line("\t\t\t\tvar event: InputEvent");
		p_file->store_line("\t\t\t\tif key_code >= MOUSE_BUTTON_LEFT and key_code <= MOUSE_BUTTON_XBUTTON2:");
		p_file->store_line("\t\t\t\t\tevent = InputEventMouseButton.new()");
		p_file->store_line("\t\t\t\t\tevent.button_index = key_code");
		p_file->store_line("\t\t\t\telse:");
		p_file->store_line("\t\t\t\t\tevent = InputEventKey.new()");
		p_file->store_line("\t\t\t\t\tevent.keycode = key_code");
		p_file->store_line("\t\t\t\t");
		p_file->store_line("\t\t\t\tInputMap.action_add_event(action_name, event)");
		p_file->store_line("");
		p_file->store_line("func get_action_display_name(action_name: String) -> String:");
		p_file->store_line("\t# Return user-friendly action names");
		p_file->store_line("\tmatch action_name:");
		p_file->store_line("\t\t\"move_up\": return \"Move Up\"");
		p_file->store_line("\t\t\"move_down\": return \"Move Down\"");
		p_file->store_line("\t\t\"move_left\": return \"Move Left\"");
		p_file->store_line("\t\t\"move_right\": return \"Move Right\"");
		p_file->store_line("\t\t\"sprint\": return \"Sprint\"");
		p_file->store_line("\t\t\"attack\": return \"Attack\"");
		p_file->store_line("\t\t\"ranged_attack\": return \"Ranged Attack\"");
		p_file->store_line("\t\t\"dash\": return \"Dash\"");
		p_file->store_line("\t\t\"interact\": return \"Interact\"");
		p_file->store_line("\t\t\"pause_game\": return \"Pause\"");
		p_file->store_line("\t\t\"open_inventory\": return \"Inventory\"");
		p_file->store_line("\t\t\"open_journal\": return \"Quest Journal\"");
		p_file->store_line("\t\t_: return action_name.capitalize()");
	} else if (filename == "GameUI.gd") {
		p_file->store_line("# GameUI.gd");
		p_file->store_line("# Generated by Lupine Engine - Game UI Controller");
		p_file->store_line("# Main UI controller for top-down RPG");
		p_file->store_line("");
		p_file->store_line("extends Control");
		p_file->store_line("class_name GameUI");
		p_file->store_line("");
		p_file->store_line("# UI References");
		p_file->store_line("@onready var health_bar: ProgressBar = $HUD/HealthBar");
		p_file->store_line("@onready var stamina_bar: ProgressBar = $HUD/StaminaBar");
		p_file->store_line("@onready var mana_bar: ProgressBar = $HUD/ManaBar");
		p_file->store_line("@onready var experience_bar: ProgressBar = $HUD/ExperienceBar");
		p_file->store_line("@onready var level_label: Label = $HUD/LevelLabel");
		p_file->store_line("@onready var pause_menu: Control = $PauseMenu");
		p_file->store_line("@onready var inventory_ui: Control = $InventoryUI");
		p_file->store_line("@onready var quest_journal: Control = $QuestJournal");
		p_file->store_line("@onready var dialogue_ui: Control = $DialogueUI");
		p_file->store_line("@onready var death_screen: Control = $DeathScreen");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Connect to player stats");
		p_file->store_line("\tif PlayerStats:");
		p_file->store_line("\t\tPlayerStats.health_changed.connect(_on_health_changed)");
		p_file->store_line("\t\tPlayerStats.stamina_changed.connect(_on_stamina_changed)");
		p_file->store_line("\t\tPlayerStats.mana_changed.connect(_on_mana_changed)");
		p_file->store_line("\t\tPlayerStats.experience_changed.connect(_on_experience_changed)");
		p_file->store_line("\t\tPlayerStats.level_changed.connect(_on_level_changed)");
		p_file->store_line("\t");
		p_file->store_line("\t# Initialize UI");
		p_file->store_line("\t_update_all_bars()");
		p_file->store_line("\t");
		p_file->store_line("\t# Hide menus initially");
		p_file->store_line("\tpause_menu.visible = false");
		p_file->store_line("\tinventory_ui.visible = false");
		p_file->store_line("\tquest_journal.visible = false");
		p_file->store_line("\tdeath_screen.visible = false");
		p_file->store_line("");
		p_file->store_line("func _on_health_changed(new_health: float, max_health: float):");
		p_file->store_line("\thealth_bar.value = (new_health / max_health) * 100");
		p_file->store_line("");
		p_file->store_line("func _on_stamina_changed(new_stamina: float, max_stamina: float):");
		p_file->store_line("\tstamina_bar.value = (new_stamina / max_stamina) * 100");
		p_file->store_line("");
		p_file->store_line("func _on_mana_changed(new_mana: float, max_mana: float):");
		p_file->store_line("\tmana_bar.value = (new_mana / max_mana) * 100");
		p_file->store_line("");
		p_file->store_line("func _on_experience_changed(new_exp: int, exp_to_next: int):");
		p_file->store_line("\texperience_bar.value = (float(new_exp) / float(exp_to_next)) * 100");
		p_file->store_line("");
		p_file->store_line("func _on_level_changed(new_level: int):");
		p_file->store_line("\tlevel_label.text = \"Level \" + str(new_level)");
		p_file->store_line("");
		p_file->store_line("func show_pause_menu():");
		p_file->store_line("\tpause_menu.visible = true");
		p_file->store_line("");
		p_file->store_line("func hide_pause_menu():");
		p_file->store_line("\tpause_menu.visible = false");
		p_file->store_line("");
		p_file->store_line("func toggle_inventory():");
		p_file->store_line("\tinventory_ui.visible = !inventory_ui.visible");
		p_file->store_line("");
		p_file->store_line("func toggle_quest_journal():");
		p_file->store_line("\tquest_journal.visible = !quest_journal.visible");
		p_file->store_line("");
		p_file->store_line("func show_death_screen():");
		p_file->store_line("\tdeath_screen.visible = true");
		p_file->store_line("");
		p_file->store_line("func _update_all_bars():");
		p_file->store_line("\tif PlayerStats:");
		p_file->store_line("\t\t_on_health_changed(PlayerStats.current_health, PlayerStats.max_health)");
		p_file->store_line("\t\t_on_stamina_changed(PlayerStats.current_stamina, PlayerStats.max_stamina)");
		p_file->store_line("\t\t_on_mana_changed(PlayerStats.current_mana, PlayerStats.max_mana)");
		p_file->store_line("\t\t_on_experience_changed(PlayerStats.current_experience, PlayerStats.experience_to_next_level)");
		p_file->store_line("\t\t_on_level_changed(PlayerStats.current_level)");
	} else if (filename == "BasicNPC.gd") {
		p_file->store_line("# BasicNPC.gd");
		p_file->store_line("# Generated by Lupine Engine - Basic NPC");
		p_file->store_line("# Simple NPC with dialogue interaction");
		p_file->store_line("");
		p_file->store_line("extends CharacterBody2D");
		p_file->store_line("class_name BasicNPC");
		p_file->store_line("");
		p_file->store_line("# NPC Properties");
		p_file->store_line("@export var npc_name: String = \"Villager\"");
		p_file->store_line("@export var dialogue_id: String = \"default_greeting\"");
		p_file->store_line("@export var can_move: bool = false");
		p_file->store_line("@export var movement_speed: float = 50.0");
		p_file->store_line("@export var interaction_range: float = 40.0");
		p_file->store_line("");
		p_file->store_line("# Internal state");
		p_file->store_line("var player_in_range: bool = false");
		p_file->store_line("var is_talking: bool = false");
		p_file->store_line("");
		p_file->store_line("# Movement (if enabled)");
		p_file->store_line("var movement_timer: float = 0.0");
		p_file->store_line("var movement_direction: Vector2 = Vector2.ZERO");
		p_file->store_line("var movement_change_interval: float = 3.0");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Connect interaction area");
		p_file->store_line("\tvar interaction_area = $InteractionArea");
		p_file->store_line("\tif interaction_area:");
		p_file->store_line("\t\tinteraction_area.body_entered.connect(_on_player_entered)");
		p_file->store_line("\t\tinteraction_area.body_exited.connect(_on_player_exited)");
		p_file->store_line("\t");
		p_file->store_line("\t# Setup random movement if enabled");
		p_file->store_line("\tif can_move:");
		p_file->store_line("\t\t_change_movement_direction()");
		p_file->store_line("");
		p_file->store_line("func _physics_process(delta: float):");
		p_file->store_line("\tif can_move and not is_talking:");
		p_file->store_line("\t\tmovement_timer += delta");
		p_file->store_line("\t\tif movement_timer >= movement_change_interval:");
		p_file->store_line("\t\t\tmovement_timer = 0.0");
		p_file->store_line("\t\t\t_change_movement_direction()");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tvelocity = movement_direction * movement_speed");
		p_file->store_line("\t\tmove_and_slide()");
		p_file->store_line("");
		p_file->store_line("func _unhandled_input(event: InputEvent):");
		p_file->store_line("\tif event.is_action_pressed(\"interact\") and player_in_range and not is_talking:");
		p_file->store_line("\t\tstart_dialogue()");
		p_file->store_line("");
		p_file->store_line("func _on_player_entered(body: Node):");
		p_file->store_line("\tif body.name == \"Player\" or body.has_method(\"is_player\"):");
		p_file->store_line("\t\tplayer_in_range = true");
		p_file->store_line("\t\t# Show interaction prompt");
		p_file->store_line("\t\tif PopupManager:");
		p_file->store_line("\t\t\tPopupManager.show_interaction_prompt(\"Press E to talk\")");
		p_file->store_line("");
		p_file->store_line("func _on_player_exited(body: Node):");
		p_file->store_line("\tif body.name == \"Player\" or body.has_method(\"is_player\"):");
		p_file->store_line("\t\tplayer_in_range = false");
		p_file->store_line("\t\t# Hide interaction prompt");
		p_file->store_line("\t\tif PopupManager:");
		p_file->store_line("\t\t\tPopupManager.hide_interaction_prompt()");
		p_file->store_line("");
		p_file->store_line("func start_dialogue():");
		p_file->store_line("\tis_talking = true");
		p_file->store_line("\tif DialogueSystem:");
		p_file->store_line("\t\tDialogueSystem.start_dialogue(dialogue_id, self)");
		p_file->store_line("\t\tDialogueSystem.dialogue_ended.connect(_on_dialogue_ended, CONNECT_ONE_SHOT)");
		p_file->store_line("");
		p_file->store_line("func _on_dialogue_ended():");
		p_file->store_line("\tis_talking = false");
		p_file->store_line("");
		p_file->store_line("func _change_movement_direction():");
		p_file->store_line("\t# Random movement pattern");
		p_file->store_line("\tvar directions = [Vector2.UP, Vector2.DOWN, Vector2.LEFT, Vector2.RIGHT, Vector2.ZERO]");
		p_file->store_line("\tmovement_direction = directions[randi() % directions.size()]");
	} else if (filename == "TreasureChest.gd") {
		p_file->store_line("# TreasureChest.gd");
		p_file->store_line("# Generated by Lupine Engine - Treasure Chest");
		p_file->store_line("# Interactive treasure chest with loot");
		p_file->store_line("");
		p_file->store_line("extends Area2D");
		p_file->store_line("class_name TreasureChest");
		p_file->store_line("");
		p_file->store_line("# Chest Properties");
		p_file->store_line("@export var chest_id: String = \"chest_001\"");
		p_file->store_line("@export var is_opened: bool = false");
		p_file->store_line("@export var loot_items: Array[String] = [\"health_potion\", \"gold_coin\"]");
		p_file->store_line("@export var loot_amounts: Array[int] = [1, 10]");
		p_file->store_line("@export var requires_key: bool = false");
		p_file->store_line("@export var required_key_id: String = \"\"");
		p_file->store_line("");
		p_file->store_line("# Visual feedback");
		p_file->store_line("var player_in_range: bool = false");
		p_file->store_line("var sprite: Sprite2D");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Connect signals");
		p_file->store_line("\tbody_entered.connect(_on_player_entered)");
		p_file->store_line("\tbody_exited.connect(_on_player_exited)");
		p_file->store_line("\t");
		p_file->store_line("\t# Get sprite reference");
		p_file->store_line("\tsprite = $Sprite2D");
		p_file->store_line("\t");
		p_file->store_line("\t# Update visual state");
		p_file->store_line("\t_update_visual_state()");
		p_file->store_line("");
		p_file->store_line("func _unhandled_input(event: InputEvent):");
		p_file->store_line("\tif event.is_action_pressed(\"interact\") and player_in_range and not is_opened:");
		p_file->store_line("\t\topen_chest()");
		p_file->store_line("");
		p_file->store_line("func _on_player_entered(body: Node):");
		p_file->store_line("\tif body.name == \"Player\" or body.has_method(\"is_player\"):");
		p_file->store_line("\t\tplayer_in_range = true");
		p_file->store_line("\t\tif not is_opened:");
		p_file->store_line("\t\t\tif PopupManager:");
		p_file->store_line("\t\t\t\tPopupManager.show_interaction_prompt(\"Press E to open chest\")");
		p_file->store_line("");
		p_file->store_line("func _on_player_exited(body: Node):");
		p_file->store_line("\tif body.name == \"Player\" or body.has_method(\"is_player\"):");
		p_file->store_line("\t\tplayer_in_range = false");
		p_file->store_line("\t\tif PopupManager:");
		p_file->store_line("\t\t\tPopupManager.hide_interaction_prompt()");
		p_file->store_line("");
		p_file->store_line("func open_chest():");
		p_file->store_line("\tif is_opened:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if key is required");
		p_file->store_line("\tif requires_key and not _has_required_key():");
		p_file->store_line("\t\tif PopupManager:");
		p_file->store_line("\t\t\tPopupManager.show_message(\"This chest is locked. You need a key.\")");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Open the chest");
		p_file->store_line("\tis_opened = true");
		p_file->store_line("\t_update_visual_state()");
		p_file->store_line("\t");
		p_file->store_line("\t# Give loot to player");
		p_file->store_line("\t_give_loot()");
		p_file->store_line("\t");
		p_file->store_line("\t# Hide interaction prompt");
		p_file->store_line("\tif PopupManager:");
		p_file->store_line("\t\tPopupManager.hide_interaction_prompt()");
		p_file->store_line("");
		p_file->store_line("func _has_required_key() -> bool:");
		p_file->store_line("\tif not InventorySystem or required_key_id.is_empty():");
		p_file->store_line("\t\treturn true");
		p_file->store_line("\treturn InventorySystem.has_item(required_key_id)");
		p_file->store_line("");
		p_file->store_line("func _give_loot():");
		p_file->store_line("\tif not InventorySystem:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tfor i in range(loot_items.size()):");
		p_file->store_line("\t\tvar item_id = loot_items[i]");
		p_file->store_line("\t\tvar amount = loot_amounts[i] if i < loot_amounts.size() else 1");
		p_file->store_line("\t\tInventorySystem.add_item(item_id, amount)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\t# Show loot notification");
		p_file->store_line("\t\tif PopupManager:");
		p_file->store_line("\t\t\tPopupManager.show_message(\"Found: \" + item_id + \" x\" + str(amount))");
		p_file->store_line("");
		p_file->store_line("func _update_visual_state():");
		p_file->store_line("\tif sprite:");
		p_file->store_line("\t\tif is_opened:");
		p_file->store_line("\t\t\tsprite.modulate = Color(0.6, 0.6, 0.6, 1)  # Darker when opened");
		p_file->store_line("\t\telse:");
		p_file->store_line("\t\t\tsprite.modulate = Color(0.8, 0.6, 0.2, 1)  # Golden when closed");
	}
}

void TopdownRPGMainSceneModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "Main") {
		// Enhanced main scene with complete example setup
		p_file->store_line("[gd_scene load_steps=12 format=3 uid=\"uid://main_topdown_rpg\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/WorldManager.gd\" id=\"1_world_manager\"]");
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"res://scenes/Player2DTopdown.tscn\" id=\"2_player\"]");
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"res://scenes/CameraTopdownRPG.tscn\" id=\"3_camera\"]");
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"res://scenes/ui/GameUI.tscn\" id=\"4_game_ui\"]");
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"res://scenes/enemies/EnemyPatrolGuard.tscn\" id=\"5_enemy_guard\"]");
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"res://scenes/enemies/EnemyChaser.tscn\" id=\"6_enemy_chaser\"]");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/characters/BasicNPC.gd\" id=\"7_npc_script\"]");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/world/TreasureChest.gd\" id=\"8_chest_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"RectangleShape2D\" id=\"RectangleShape2D_1\"]");
		p_file->store_line("size = Vector2(20, 30)");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CircleShape2D\" id=\"CircleShape2D_1\"]");
		p_file->store_line("radius = 40.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"Main\" type=\"Node2D\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"WorldManager\" type=\"Node\" parent=\".\"]");
		p_file->store_line("script = ExtResource(\"1_world_manager\")");
		p_file->store_line("");
		p_file->store_line("# Background Environment");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_right = 1200.0");
		p_file->store_line("offset_bottom = 800.0");
		p_file->store_line("color = Color(0.2, 0.6, 0.2, 1)");
		p_file->store_line("z_index = -10");
		p_file->store_line("");
		p_file->store_line("# Player Character");
		p_file->store_line("[node name=\"Player\" parent=\".\" instance=ExtResource(\"2_player\")]");
		p_file->store_line("position = Vector2(600, 400)");
		p_file->store_line("");
		p_file->store_line("# Camera System");
		p_file->store_line("[node name=\"Camera\" parent=\".\" groups=[\"camera\"] instance=ExtResource(\"3_camera\")]");
		p_file->store_line("");
		p_file->store_line("# World Container");
		p_file->store_line("[node name=\"World\" type=\"Node2D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("# Environment Objects");
		p_file->store_line("[node name=\"Environment\" type=\"Node2D\" parent=\"World\"]");
		p_file->store_line("");
		p_file->store_line("# Example Walls/Obstacles");
		p_file->store_line("[node name=\"Wall1\" type=\"StaticBody2D\" parent=\"World/Environment\"]");
		p_file->store_line("position = Vector2(200, 200)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\"World/Environment/Wall1\"]");
		p_file->store_line("modulate = Color(0.5, 0.3, 0.1, 1)");
		p_file->store_line("scale = Vector2(100, 20)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"World/Environment/Wall1\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("scale = Vector2(5, 1)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Wall2\" type=\"StaticBody2D\" parent=\"World/Environment\"]");
		p_file->store_line("position = Vector2(1000, 600)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\"World/Environment/Wall2\"]");
		p_file->store_line("modulate = Color(0.5, 0.3, 0.1, 1)");
		p_file->store_line("scale = Vector2(20, 100)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"World/Environment/Wall2\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("scale = Vector2(1, 5)");
		p_file->store_line("");
		p_file->store_line("# Enemy Examples");
		p_file->store_line("[node name=\"Enemies\" type=\"Node2D\" parent=\"World\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"PatrolGuard1\" parent=\"World/Enemies\" instance=ExtResource(\"5_enemy_guard\")]");
		p_file->store_line("position = Vector2(300, 300)");
		p_file->store_line("");
		p_file->store_line("[node name=\"PatrolGuard2\" parent=\"World/Enemies\" instance=ExtResource(\"5_enemy_guard\")]");
		p_file->store_line("position = Vector2(800, 200)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Chaser1\" parent=\"World/Enemies\" instance=ExtResource(\"6_enemy_chaser\")]");
		p_file->store_line("position = Vector2(900, 500)");
		p_file->store_line("");
		p_file->store_line("# NPC Examples");
		p_file->store_line("[node name=\"NPCs\" type=\"Node2D\" parent=\"World\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"VillageElder\" type=\"CharacterBody2D\" parent=\"World/NPCs\"]");
		p_file->store_line("position = Vector2(400, 150)");
		p_file->store_line("script = ExtResource(\"7_npc_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\"World/NPCs/VillageElder\"]");
		p_file->store_line("modulate = Color(0.8, 0.8, 1, 1)");
		p_file->store_line("scale = Vector2(20, 30)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"World/NPCs/VillageElder\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"InteractionArea\" type=\"Area2D\" parent=\"World/NPCs/VillageElder\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"World/NPCs/VillageElder/InteractionArea\"]");
		p_file->store_line("shape = SubResource(\"CircleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Merchant\" type=\"CharacterBody2D\" parent=\"World/NPCs\"]");
		p_file->store_line("position = Vector2(700, 150)");
		p_file->store_line("script = ExtResource(\"7_npc_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\"World/NPCs/Merchant\"]");
		p_file->store_line("modulate = Color(1, 0.8, 0.2, 1)");
		p_file->store_line("scale = Vector2(20, 30)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"World/NPCs/Merchant\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"InteractionArea\" type=\"Area2D\" parent=\"World/NPCs/Merchant\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"World/NPCs/Merchant/InteractionArea\"]");
		p_file->store_line("shape = SubResource(\"CircleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("# Collectibles and Interactive Objects");
		p_file->store_line("[node name=\"Collectibles\" type=\"Node2D\" parent=\"World\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"TreasureChest1\" type=\"Area2D\" parent=\"World/Collectibles\"]");
		p_file->store_line("position = Vector2(150, 500)");
		p_file->store_line("script = ExtResource(\"8_chest_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\"World/Collectibles/TreasureChest1\"]");
		p_file->store_line("modulate = Color(0.8, 0.6, 0.2, 1)");
		p_file->store_line("scale = Vector2(25, 20)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"World/Collectibles/TreasureChest1\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"TreasureChest2\" type=\"Area2D\" parent=\"World/Collectibles\"]");
		p_file->store_line("position = Vector2(1050, 300)");
		p_file->store_line("script = ExtResource(\"8_chest_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\"World/Collectibles/TreasureChest2\"]");
		p_file->store_line("modulate = Color(0.8, 0.6, 0.2, 1)");
		p_file->store_line("scale = Vector2(25, 20)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"World/Collectibles/TreasureChest2\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("# UI Layer");
		p_file->store_line("[node name=\"UI\" type=\"CanvasLayer\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"GameUI\" parent=\"UI\" instance=ExtResource(\"4_game_ui\")]");
	} else if (p_scene_name == "GameUI") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://game_ui_topdown\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/GameUI.gd\" id=\"1_game_ui_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"GameUI\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_game_ui_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"HUD\" type=\"Control\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"HealthBar\" type=\"ProgressBar\" parent=\"HUD\"]");
		p_file->store_line("layout_mode = 0");
		p_file->store_line("anchors_preset = 2");
		p_file->store_line("anchor_top = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 20.0");
		p_file->store_line("offset_top = -80.0");
		p_file->store_line("offset_right = 220.0");
		p_file->store_line("offset_bottom = -60.0");
		p_file->store_line("value = 100.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"StaminaBar\" type=\"ProgressBar\" parent=\"HUD\"]");
		p_file->store_line("layout_mode = 0");
		p_file->store_line("anchors_preset = 2");
		p_file->store_line("anchor_top = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 20.0");
		p_file->store_line("offset_top = -55.0");
		p_file->store_line("offset_right = 220.0");
		p_file->store_line("offset_bottom = -35.0");
		p_file->store_line("value = 100.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"ManaBar\" type=\"ProgressBar\" parent=\"HUD\"]");
		p_file->store_line("layout_mode = 0");
		p_file->store_line("anchors_preset = 2");
		p_file->store_line("anchor_top = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 20.0");
		p_file->store_line("offset_top = -30.0");
		p_file->store_line("offset_right = 220.0");
		p_file->store_line("offset_bottom = -10.0");
		p_file->store_line("value = 100.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"ExperienceBar\" type=\"ProgressBar\" parent=\"HUD\"]");
		p_file->store_line("layout_mode = 0");
		p_file->store_line("anchors_preset = 7");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 1.0");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = -200.0");
		p_file->store_line("offset_top = -25.0");
		p_file->store_line("offset_right = 200.0");
		p_file->store_line("offset_bottom = -10.0");
		p_file->store_line("value = 0.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"LevelLabel\" type=\"Label\" parent=\"HUD\"]");
		p_file->store_line("layout_mode = 0");
		p_file->store_line("anchors_preset = 1");
		p_file->store_line("anchor_left = 1.0");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("offset_left = -100.0");
		p_file->store_line("offset_top = 20.0");
		p_file->store_line("offset_right = -20.0");
		p_file->store_line("offset_bottom = 40.0");
		p_file->store_line("text = \"Level 1\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"PauseMenu\" type=\"Control\" parent=\".\"]");
		p_file->store_line("visible = false");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"InventoryUI\" type=\"Control\" parent=\".\"]");
		p_file->store_line("visible = false");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"QuestJournal\" type=\"Control\" parent=\".\"]");
		p_file->store_line("visible = false");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"DialogueUI\" type=\"Control\" parent=\".\"]");
		p_file->store_line("visible = false");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"DeathScreen\" type=\"Control\" parent=\".\"]");
		p_file->store_line("visible = false");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
	}
}
