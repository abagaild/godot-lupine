#include "pokemon_battle_system_module.h"

void PokemonBattleSystemModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();

	if (filename == "PokemonBattleManager.gd") {
		p_file->store_line("# PokemonBattleManager.gd");
		p_file->store_line("# Generated by Lupine Engine - Pokemon Battle Manager");
		p_file->store_line("# Central battle system for Pokemon-style turn-based combat");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal battle_started(player_pokemon: Array, enemy_pokemon: Array)");
		p_file->store_line("signal battle_ended(victory: bool, rewards: Dictionary)");
		p_file->store_line("signal turn_started(pokemon: Pokemon)");
		p_file->store_line("signal turn_ended(pokemon: Pokemon)");
		p_file->store_line("signal move_used(user: Pokemon, target: Pokemon, move: PokemonMove)");
		p_file->store_line("signal pokemon_fainted(pokemon: Pokemon)");
		p_file->store_line("signal pokemon_switched(old_pokemon: Pokemon, new_pokemon: Pokemon)");
		p_file->store_line("");
		p_file->store_line("# Battle states");
		p_file->store_line("enum BattleState {");
		p_file->store_line("\tINACTIVE,");
		p_file->store_line("\tSETUP,");
		p_file->store_line("\tPLAYER_TURN,");
		p_file->store_line("\tENEMY_TURN,");
		p_file->store_line("\tPROCESSING,");
		p_file->store_line("\tENDED");
		p_file->store_line("}");
		p_file->store_line("");
		p_file->store_line("# Battle variables");
		p_file->store_line("var current_state: BattleState = BattleState.INACTIVE");
		p_file->store_line("var current_battle: PokemonBattle");
		p_file->store_line("var battle_ui: Control");
		p_file->store_line("var battle_calculator: BattleCalculator");
		p_file->store_line("var battle_ai: BattleAI");
		p_file->store_line("");
		p_file->store_line("# Player and enemy teams");
		p_file->store_line("var player_team: Array[Pokemon] = []");
		p_file->store_line("var enemy_team: Array[Pokemon] = []");
		p_file->store_line("var current_player_pokemon: Pokemon");
		p_file->store_line("var current_enemy_pokemon: Pokemon");
		p_file->store_line("");
		p_file->store_line("# Turn management");
		p_file->store_line("var turn_queue: Array = []");
		p_file->store_line("var current_turn_index: int = 0");
		p_file->store_line("");
		p_file->store_line("# Battle settings");
		p_file->store_line("@export var animation_speed: float = 1.0");
		p_file->store_line("@export var auto_battle_speed: float = 2.0");
		p_file->store_line("@export var allow_escape: bool = true");
		p_file->store_line("@export var wild_pokemon_escape_chance: float = 0.1");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Initialize systems");
		p_file->store_line("\tbattle_calculator = BattleCalculator.new()");
		p_file->store_line("\tbattle_ai = BattleAI.new()");
		p_file->store_line("\t");
		p_file->store_line("\t# Load battle UI");
		p_file->store_line("\tvar ui_scene = preload(\"res://scenes/ui/PokemonBattleUI.tscn\")");
		p_file->store_line("\tbattle_ui = ui_scene.instantiate()");
		p_file->store_line("\tbattle_ui.visible = false");
		p_file->store_line("\tget_tree().current_scene.add_child(battle_ui)");
		p_file->store_line("");
		p_file->store_line("func start_battle(player_pokemon: Array[Pokemon], enemy_pokemon: Array[Pokemon], is_wild: bool = false):");
		p_file->store_line("\tplayer_team = player_pokemon");
		p_file->store_line("\tenemy_team = enemy_pokemon");
		p_file->store_line("\t");
		p_file->store_line("\t# Set active Pokemon");
		p_file->store_line("\tcurrent_player_pokemon = _get_first_conscious_pokemon(player_team)");
		p_file->store_line("\tcurrent_enemy_pokemon = _get_first_conscious_pokemon(enemy_team)");
		p_file->store_line("\t");
		p_file->store_line("\tif not current_player_pokemon or not current_enemy_pokemon:");
		p_file->store_line("\t\tprint(\"Error: No conscious Pokemon available for battle\")");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Setup battle");
		p_file->store_line("\tcurrent_state = BattleState.SETUP");
		p_file->store_line("\tcurrent_battle = PokemonBattle.new()");
		p_file->store_line("\tcurrent_battle.setup(player_team, enemy_team, is_wild)");
		p_file->store_line("\t");
		p_file->store_line("\t# Show battle UI");
		p_file->store_line("\tbattle_ui.visible = true");
		p_file->store_line("\tbattle_ui.setup_battle(current_player_pokemon, current_enemy_pokemon)");
		p_file->store_line("\t");
		p_file->store_line("\tbattle_started.emit(player_team, enemy_team)");
		p_file->store_line("\t");
		p_file->store_line("\t# Start first turn");
		p_file->store_line("\t_start_turn()");
		p_file->store_line("");
		p_file->store_line("func _get_first_conscious_pokemon(team: Array[Pokemon]) -> Pokemon:");
		p_file->store_line("\tfor pokemon in team:");
		p_file->store_line("\t\tif pokemon.current_hp > 0:");
		p_file->store_line("\t\t\treturn pokemon");
		p_file->store_line("\treturn null");
		p_file->store_line("");
		p_file->store_line("func _start_turn():");
		p_file->store_line("\tif current_state == BattleState.ENDED:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for battle end conditions");
		p_file->store_line("\tif _check_battle_end():");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Determine turn order based on speed and priority");
		p_file->store_line("\t_calculate_turn_order()");
		p_file->store_line("\t");
		p_file->store_line("\t# Start player turn");
		p_file->store_line("\tcurrent_state = BattleState.PLAYER_TURN");
		p_file->store_line("\tturn_started.emit(current_player_pokemon)");
		p_file->store_line("\tbattle_ui.show_action_menu()");
		p_file->store_line("");
		p_file->store_line("func _calculate_turn_order():");
		p_file->store_line("\t# Simple speed-based turn order");
		p_file->store_line("\t# In a full implementation, this would consider move priority, items, abilities, etc.");
		p_file->store_line("\tturn_queue.clear()");
		p_file->store_line("\t");
		p_file->store_line("\tvar player_speed = current_player_pokemon.get_effective_speed()");
		p_file->store_line("\tvar enemy_speed = current_enemy_pokemon.get_effective_speed()");
		p_file->store_line("\t");
		p_file->store_line("\tif player_speed >= enemy_speed:");
		p_file->store_line("\t\tturn_queue = [current_player_pokemon, current_enemy_pokemon]");
		p_file->store_line("\telse:");
		p_file->store_line("\t\tturn_queue = [current_enemy_pokemon, current_player_pokemon]");
		p_file->store_line("");
		p_file->store_line("func use_move(user: Pokemon, target: Pokemon, move: PokemonMove):");
		p_file->store_line("\tcurrent_state = BattleState.PROCESSING");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate damage and effects");
		p_file->store_line("\tvar result = battle_calculator.calculate_move_damage(user, target, move)");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply damage");
		p_file->store_line("\ttarget.take_damage(result.damage)");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply status effects");
		p_file->store_line("\tif result.status_effect:");
		p_file->store_line("\t\ttarget.apply_status_effect(result.status_effect)");
		p_file->store_line("\t");
		p_file->store_line("\t# Emit signal");
		p_file->store_line("\tmove_used.emit(user, target, move)");
		p_file->store_line("\t");
		p_file->store_line("\t# Update UI");
		p_file->store_line("\tbattle_ui.show_move_result(user, target, move, result)");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if target fainted");
		p_file->store_line("\tif target.current_hp <= 0:");
		p_file->store_line("\t\ttarget.faint()");
		p_file->store_line("\t\tpokemon_fainted.emit(target)");
		p_file->store_line("\t");
		p_file->store_line("\t# Continue to next turn or end battle");
		p_file->store_line("\tawait get_tree().create_timer(1.0).timeout");
		p_file->store_line("\t_next_turn()");
		p_file->store_line("");
		p_file->store_line("func switch_pokemon(new_pokemon: Pokemon):");
		p_file->store_line("\tvar old_pokemon = current_player_pokemon");
		p_file->store_line("\tcurrent_player_pokemon = new_pokemon");
		p_file->store_line("\t");
		p_file->store_line("\tpokemon_switched.emit(old_pokemon, new_pokemon)");
		p_file->store_line("\tbattle_ui.update_player_pokemon(new_pokemon)");
		p_file->store_line("\t");
		p_file->store_line("\t# Switching takes the turn");
		p_file->store_line("\t_next_turn()");
		p_file->store_line("");
		p_file->store_line("func _next_turn():");
		p_file->store_line("\tif current_state == BattleState.ENDED:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for battle end");
		p_file->store_line("\tif _check_battle_end():");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Process enemy turn if it's their turn");
		p_file->store_line("\tif current_state == BattleState.PLAYER_TURN:");
		p_file->store_line("\t\t_process_enemy_turn()");
		p_file->store_line("\telse:");
		p_file->store_line("\t\t_start_turn()");
		p_file->store_line("");
		p_file->store_line("func _process_enemy_turn():");
		p_file->store_line("\tcurrent_state = BattleState.ENEMY_TURN");
		p_file->store_line("\tturn_started.emit(current_enemy_pokemon)");
		p_file->store_line("\t");
		p_file->store_line("\t# AI chooses move");
		p_file->store_line("\tvar chosen_move = battle_ai.choose_move(current_enemy_pokemon, current_player_pokemon)");
		p_file->store_line("\t");
		p_file->store_line("\t# Use the move");
		p_file->store_line("\tuse_move(current_enemy_pokemon, current_player_pokemon, chosen_move)");
		p_file->store_line("");
		p_file->store_line("func _check_battle_end() -> bool:");
		p_file->store_line("\t# Check if all player Pokemon are fainted");
		p_file->store_line("\tvar player_conscious = false");
		p_file->store_line("\tfor pokemon in player_team:");
		p_file->store_line("\t\tif pokemon.current_hp > 0:");
		p_file->store_line("\t\t\tplayer_conscious = true");
		p_file->store_line("\t\t\tbreak");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if all enemy Pokemon are fainted");
		p_file->store_line("\tvar enemy_conscious = false");
		p_file->store_line("\tfor pokemon in enemy_team:");
		p_file->store_line("\t\tif pokemon.current_hp > 0:");
		p_file->store_line("\t\t\tenemy_conscious = true");
		p_file->store_line("\t\t\tbreak");
		p_file->store_line("\t");
		p_file->store_line("\tif not player_conscious:");
		p_file->store_line("\t\t_end_battle(false)");
		p_file->store_line("\t\treturn true");
		p_file->store_line("\telif not enemy_conscious:");
		p_file->store_line("\t\t_end_battle(true)");
		p_file->store_line("\t\treturn true");
		p_file->store_line("\t");
		p_file->store_line("\treturn false");
		p_file->store_line("");
		p_file->store_line("func _end_battle(victory: bool):");
		p_file->store_line("\tcurrent_state = BattleState.ENDED");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate rewards");
		p_file->store_line("\tvar rewards = {}");
		p_file->store_line("\tif victory:");
		p_file->store_line("\t\trewards = _calculate_victory_rewards()");
		p_file->store_line("\t");
		p_file->store_line("\t# Hide battle UI");
		p_file->store_line("\tbattle_ui.visible = false");
		p_file->store_line("\t");
		p_file->store_line("\tbattle_ended.emit(victory, rewards)");
		p_file->store_line("");
		p_file->store_line("func _calculate_victory_rewards() -> Dictionary:");
		p_file->store_line("\tvar rewards = {");
		p_file->store_line("\t\t\"experience\": 0,");
		p_file->store_line("\t\t\"money\": 0,");
		p_file->store_line("\t\t\"items\": []");
		p_file->store_line("\t}");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate experience based on defeated Pokemon");
		p_file->store_line("\tfor pokemon in enemy_team:");
		p_file->store_line("\t\tif pokemon.current_hp <= 0:");
		p_file->store_line("\t\t\trewards.experience += pokemon.base_experience");
		p_file->store_line("\t");
		p_file->store_line("\treturn rewards");
		p_file->store_line("");
		p_file->store_line("func attempt_escape() -> bool:");
		p_file->store_line("\tif not allow_escape:");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate escape chance based on speed difference");
		p_file->store_line("\tvar player_speed = current_player_pokemon.get_effective_speed()");
		p_file->store_line("\tvar enemy_speed = current_enemy_pokemon.get_effective_speed()");
		p_file->store_line("\tvar escape_chance = 0.5 + (player_speed - enemy_speed) * 0.01");
		p_file->store_line("\tescape_chance = clamp(escape_chance, 0.1, 0.9)");
		p_file->store_line("\t");
		p_file->store_line("\tif randf() < escape_chance:");
		p_file->store_line("\t\t_end_battle(false)");
		p_file->store_line("\t\treturn true");
		p_file->store_line("\t");
		p_file->store_line("\treturn false");

	} else if (filename == "PokemonBattle.gd") {
		p_file->store_line("# PokemonBattle.gd");
		p_file->store_line("# Generated by Lupine Engine - Pokemon Battle Data");
		p_file->store_line("# Represents a single battle encounter");
		p_file->store_line("");
		p_file->store_line("class_name PokemonBattle");
		p_file->store_line("extends Resource");
		p_file->store_line("");
		p_file->store_line("@export var player_team: Array[Pokemon]");
		p_file->store_line("@export var enemy_team: Array[Pokemon]");
		p_file->store_line("@export var is_wild_battle: bool = false");
		p_file->store_line("@export var battle_background: String = \"\"");
		p_file->store_line("@export var battle_music: String = \"\"");
		p_file->store_line("@export var weather: String = \"none\"");
		p_file->store_line("");
		p_file->store_line("func setup(p_player_team: Array[Pokemon], p_enemy_team: Array[Pokemon], p_is_wild: bool = false):");
		p_file->store_line("\tplayer_team = p_player_team");
		p_file->store_line("\tenemy_team = p_enemy_team");
		p_file->store_line("\tis_wild_battle = p_is_wild");

	} else if (filename == "PokemonMove.gd") {
		p_file->store_line("# PokemonMove.gd");
		p_file->store_line("# Generated by Lupine Engine - Pokemon Move System");
		p_file->store_line("# Represents a Pokemon move with all its properties");
		p_file->store_line("");
		p_file->store_line("class_name PokemonMove");
		p_file->store_line("extends Resource");
		p_file->store_line("");
		p_file->store_line("@export var move_name: String");
		p_file->store_line("@export var move_type: String");
		p_file->store_line("@export var power: int = 0");
		p_file->store_line("@export var accuracy: int = 100");
		p_file->store_line("@export var pp: int = 10");
		p_file->store_line("@export var current_pp: int = 10");
		p_file->store_line("@export var priority: int = 0");
		p_file->store_line("@export var category: String = \"physical\"  # physical, special, status");
		p_file->store_line("@export var description: String = \"\"");
		p_file->store_line("@export var status_effect: String = \"\"");
		p_file->store_line("@export var status_chance: float = 0.0");
		p_file->store_line("@export var target: String = \"enemy\"  # enemy, self, all_enemies, all_allies");
		p_file->store_line("");
		p_file->store_line("func _init(name: String = \"\", type: String = \"normal\", pow: int = 0):");
		p_file->store_line("\tmove_name = name");
		p_file->store_line("\tmove_type = type");
		p_file->store_line("\tpower = pow");
		p_file->store_line("\tcurrent_pp = pp");
		p_file->store_line("");
		p_file->store_line("func can_use() -> bool:");
		p_file->store_line("\treturn current_pp > 0");
		p_file->store_line("");
		p_file->store_line("func use_move():");
		p_file->store_line("\tif can_use():");
		p_file->store_line("\t\tcurrent_pp -= 1");

	} else if (filename == "PokemonType.gd") {
		p_file->store_line("# PokemonType.gd");
		p_file->store_line("# Generated by Lupine Engine - Pokemon Type System");
		p_file->store_line("# Handles type effectiveness and relationships");
		p_file->store_line("");
		p_file->store_line("class_name PokemonType");
		p_file->store_line("extends Resource");
		p_file->store_line("");
		p_file->store_line("# Type effectiveness chart");
		p_file->store_line("const TYPE_CHART = {");
		p_file->store_line("\t\"normal\": {\"weak_to\": [\"fighting\"], \"resists\": [], \"immune_to\": [\"ghost\"]},");
		p_file->store_line("\t\"fire\": {\"weak_to\": [\"water\", \"ground\", \"rock\"], \"resists\": [\"fire\", \"grass\", \"ice\", \"bug\", \"steel\", \"fairy\"], \"immune_to\": []},");
		p_file->store_line("\t\"water\": {\"weak_to\": [\"electric\", \"grass\"], \"resists\": [\"fire\", \"water\", \"ice\", \"steel\"], \"immune_to\": []},");
		p_file->store_line("\t\"electric\": {\"weak_to\": [\"ground\"], \"resists\": [\"electric\", \"flying\", \"steel\"], \"immune_to\": []},");
		p_file->store_line("\t\"grass\": {\"weak_to\": [\"fire\", \"ice\", \"poison\", \"flying\", \"bug\"], \"resists\": [\"water\", \"electric\", \"grass\", \"ground\"], \"immune_to\": []},");
		p_file->store_line("\t\"ice\": {\"weak_to\": [\"fire\", \"fighting\", \"rock\", \"steel\"], \"resists\": [\"ice\"], \"immune_to\": []},");
		p_file->store_line("\t\"fighting\": {\"weak_to\": [\"flying\", \"psychic\", \"fairy\"], \"resists\": [\"bug\", \"rock\", \"dark\"], \"immune_to\": [\"ghost\"]},");
		p_file->store_line("\t\"poison\": {\"weak_to\": [\"ground\", \"psychic\"], \"resists\": [\"grass\", \"fighting\", \"poison\", \"bug\", \"fairy\"], \"immune_to\": []},");
		p_file->store_line("\t\"ground\": {\"weak_to\": [\"water\", \"grass\", \"ice\"], \"resists\": [\"poison\", \"rock\"], \"immune_to\": [\"electric\"]},");
		p_file->store_line("\t\"flying\": {\"weak_to\": [\"electric\", \"ice\", \"rock\"], \"resists\": [\"grass\", \"fighting\", \"bug\"], \"immune_to\": [\"ground\"]},");
		p_file->store_line("\t\"psychic\": {\"weak_to\": [\"bug\", \"ghost\", \"dark\"], \"resists\": [\"fighting\", \"psychic\"], \"immune_to\": []},");
		p_file->store_line("\t\"bug\": {\"weak_to\": [\"fire\", \"flying\", \"rock\"], \"resists\": [\"grass\", \"fighting\", \"ground\"], \"immune_to\": []},");
		p_file->store_line("\t\"rock\": {\"weak_to\": [\"water\", \"grass\", \"fighting\", \"ground\", \"steel\"], \"resists\": [\"normal\", \"fire\", \"poison\", \"flying\"], \"immune_to\": []},");
		p_file->store_line("\t\"ghost\": {\"weak_to\": [\"ghost\", \"dark\"], \"resists\": [\"poison\", \"bug\"], \"immune_to\": [\"normal\", \"fighting\"]},");
		p_file->store_line("\t\"dragon\": {\"weak_to\": [\"ice\", \"dragon\", \"fairy\"], \"resists\": [\"fire\", \"water\", \"electric\", \"grass\"], \"immune_to\": []},");
		p_file->store_line("\t\"dark\": {\"weak_to\": [\"fighting\", \"bug\", \"fairy\"], \"resists\": [\"ghost\", \"dark\"], \"immune_to\": [\"psychic\"]},");
		p_file->store_line("\t\"steel\": {\"weak_to\": [\"fire\", \"fighting\", \"ground\"], \"resists\": [\"normal\", \"grass\", \"ice\", \"flying\", \"psychic\", \"bug\", \"rock\", \"dragon\", \"steel\", \"fairy\"], \"immune_to\": [\"poison\"]},");
		p_file->store_line("\t\"fairy\": {\"weak_to\": [\"poison\", \"steel\"], \"resists\": [\"fighting\", \"bug\", \"dark\"], \"immune_to\": [\"dragon\"]}");
		p_file->store_line("};");
		p_file->store_line("");
		p_file->store_line("static func get_effectiveness(attacking_type: String, defending_type: String) -> float:");
		p_file->store_line("\tif not TYPE_CHART.has(defending_type):");
		p_file->store_line("\t\treturn 1.0");
		p_file->store_line("\t");
		p_file->store_line("\tvar defending_data = TYPE_CHART[defending_type]");
		p_file->store_line("\t");
		p_file->store_line("\tif attacking_type in defending_data.immune_to:");
		p_file->store_line("\t\treturn 0.0");
		p_file->store_line("\telif attacking_type in defending_data.weak_to:");
		p_file->store_line("\t\treturn 2.0");
		p_file->store_line("\telif attacking_type in defending_data.resists:");
		p_file->store_line("\t\treturn 0.5");
		p_file->store_line("\telse:");
		p_file->store_line("\t\treturn 1.0");
		p_file->store_line("");
		p_file->store_line("static func get_effectiveness_dual_type(attacking_type: String, defending_type1: String, defending_type2: String) -> float:");
		p_file->store_line("\tvar effectiveness1 = get_effectiveness(attacking_type, defending_type1)");
		p_file->store_line("\tvar effectiveness2 = get_effectiveness(attacking_type, defending_type2)");
		p_file->store_line("\treturn effectiveness1 * effectiveness2");

	} else if (filename == "StatusEffect.gd") {
		p_file->store_line("# StatusEffect.gd");
		p_file->store_line("# Generated by Lupine Engine - Pokemon Status Effects");
		p_file->store_line("# Handles status conditions like poison, burn, paralysis, etc.");
		p_file->store_line("");
		p_file->store_line("class_name StatusEffect");
		p_file->store_line("extends Resource");
		p_file->store_line("");
		p_file->store_line("@export var effect_name: String");
		p_file->store_line("@export var effect_type: String  # poison, burn, paralysis, sleep, freeze, confusion");
		p_file->store_line("@export var duration: int = -1  # -1 for permanent until cured");
		p_file->store_line("@export var damage_per_turn: int = 0");
		p_file->store_line("@export var stat_modifiers: Dictionary = {}");
		p_file->store_line("@export var prevents_action: bool = false");
		p_file->store_line("@export var action_chance: float = 1.0  # Chance to act when affected");
		p_file->store_line("");
		p_file->store_line("func _init(name: String = \"\", type: String = \"\"):");
		p_file->store_line("\teffect_name = name");
		p_file->store_line("\teffect_type = type");
		p_file->store_line("");
		p_file->store_line("func apply_turn_effect(pokemon: Pokemon) -> Dictionary:");
		p_file->store_line("\tvar result = {\"damage\": 0, \"message\": \"\", \"cured\": false}");
		p_file->store_line("\t");
		p_file->store_line("\tmatch effect_type:");
		p_file->store_line("\t\t\"poison\":");
		p_file->store_line("\t\t\tresult.damage = pokemon.max_hp / 8");
		p_file->store_line("\t\t\tresult.message = pokemon.name + \" is hurt by poison!\"");
		p_file->store_line("\t\t\"burn\":");
		p_file->store_line("\t\t\tresult.damage = pokemon.max_hp / 16");
		p_file->store_line("\t\t\tresult.message = pokemon.name + \" is hurt by its burn!\"");
		p_file->store_line("\t\t\"sleep\":");
		p_file->store_line("\t\t\tif duration > 0:");
		p_file->store_line("\t\t\t\tduration -= 1");
		p_file->store_line("\t\t\t\tif duration <= 0:");
		p_file->store_line("\t\t\t\t\tresult.cured = true");
		p_file->store_line("\t\t\t\t\tresult.message = pokemon.name + \" woke up!\"");
		p_file->store_line("\t\t\t\telse:");
		p_file->store_line("\t\t\t\t\tresult.message = pokemon.name + \" is fast asleep.\"");
		p_file->store_line("\t");
		p_file->store_line("\treturn result");

	} else if (filename == "BattleCalculator.gd") {
		p_file->store_line("# BattleCalculator.gd");
		p_file->store_line("# Generated by Lupine Engine - Pokemon Battle Calculator");
		p_file->store_line("# Handles damage calculation and battle mechanics");
		p_file->store_line("");
		p_file->store_line("class_name BattleCalculator");
		p_file->store_line("extends RefCounted");
		p_file->store_line("");
		p_file->store_line("func calculate_move_damage(attacker: Pokemon, defender: Pokemon, move: PokemonMove) -> Dictionary:");
		p_file->store_line("\tvar result = {");
		p_file->store_line("\t\t\"damage\": 0,");
		p_file->store_line("\t\t\"effectiveness\": 1.0,");
		p_file->store_line("\t\t\"critical\": false,");
		p_file->store_line("\t\t\"status_effect\": null,");
		p_file->store_line("\t\t\"missed\": false");
		p_file->store_line("\t}");
		p_file->store_line("\t");
		p_file->store_line("\t# Check accuracy");
		p_file->store_line("\tif randf() * 100 > move.accuracy:");
		p_file->store_line("\t\tresult.missed = true");
		p_file->store_line("\t\treturn result");
		p_file->store_line("\t");
		p_file->store_line("\t# Status moves don't deal damage");
		p_file->store_line("\tif move.category == \"status\":");
		p_file->store_line("\t\tif move.status_effect != \"\" and randf() < move.status_chance:");
		p_file->store_line("\t\t\tresult.status_effect = _create_status_effect(move.status_effect)");
		p_file->store_line("\t\treturn result");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate type effectiveness");
		p_file->store_line("\tresult.effectiveness = PokemonType.get_effectiveness_dual_type(move.move_type, defender.type1, defender.type2)");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for critical hit");
		p_file->store_line("\tvar crit_chance = attacker.get_critical_hit_ratio()");
		p_file->store_line("\tresult.critical = randf() < crit_chance");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate base damage");
		p_file->store_line("\tvar level = attacker.level");
		p_file->store_line("\tvar attack_stat = attacker.get_attack_stat(move.category)");
		p_file->store_line("\tvar defense_stat = defender.get_defense_stat(move.category)");
		p_file->store_line("\t");
		p_file->store_line("\t# Pokemon damage formula");
		p_file->store_line("\tvar damage = ((((2 * level / 5 + 2) * move.power * attack_stat / defense_stat) / 50) + 2)");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply modifiers");
		p_file->store_line("\tif result.critical:");
		p_file->store_line("\t\tdamage *= 1.5");
		p_file->store_line("\t");
		p_file->store_line("\t# STAB (Same Type Attack Bonus)");
		p_file->store_line("\tif move.move_type == attacker.type1 or move.move_type == attacker.type2:");
		p_file->store_line("\t\tdamage *= 1.5");
		p_file->store_line("\t");
		p_file->store_line("\t# Type effectiveness");
		p_file->store_line("\tdamage *= result.effectiveness");
		p_file->store_line("\t");
		p_file->store_line("\t# Random factor (85-100%)");
		p_file->store_line("\tdamage *= randf_range(0.85, 1.0)");
		p_file->store_line("\t");
		p_file->store_line("\tresult.damage = max(1, int(damage))");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for status effect");
		p_file->store_line("\tif move.status_effect != \"\" and randf() < move.status_chance:");
		p_file->store_line("\t\tresult.status_effect = _create_status_effect(move.status_effect)");
		p_file->store_line("\t");
		p_file->store_line("\treturn result");
		p_file->store_line("");
		p_file->store_line("func _create_status_effect(effect_name: String) -> StatusEffect:");
		p_file->store_line("\tvar effect = StatusEffect.new()");
		p_file->store_line("\teffect.effect_name = effect_name");
		p_file->store_line("\teffect.effect_type = effect_name");
		p_file->store_line("\t");
		p_file->store_line("\tmatch effect_name:");
		p_file->store_line("\t\t\"poison\":");
		p_file->store_line("\t\t\teffect.damage_per_turn = 1");
		p_file->store_line("\t\t\"burn\":");
		p_file->store_line("\t\t\teffect.damage_per_turn = 1");
		p_file->store_line("\t\t\teffect.stat_modifiers[\"attack\"] = 0.5");
		p_file->store_line("\t\t\"paralysis\":");
		p_file->store_line("\t\t\teffect.stat_modifiers[\"speed\"] = 0.25");
		p_file->store_line("\t\t\teffect.action_chance = 0.75");
		p_file->store_line("\t\t\"sleep\":");
		p_file->store_line("\t\t\teffect.duration = randi_range(1, 3)");
		p_file->store_line("\t\t\teffect.prevents_action = true");
		p_file->store_line("\t\t\"freeze\":");
		p_file->store_line("\t\t\teffect.prevents_action = true");
		p_file->store_line("\t");
		p_file->store_line("\treturn effect");

	} else if (filename == "BattleAI.gd") {
		p_file->store_line("# BattleAI.gd");
		p_file->store_line("# Generated by Lupine Engine - Pokemon Battle AI");
		p_file->store_line("# AI system for enemy Pokemon decision making");
		p_file->store_line("");
		p_file->store_line("class_name BattleAI");
		p_file->store_line("extends RefCounted");
		p_file->store_line("");
		p_file->store_line("enum AILevel {");
		p_file->store_line("\tRANDOM,");
		p_file->store_line("\tSMART,");
		p_file->store_line("\tEXPERT");
		p_file->store_line("}");
		p_file->store_line("");
		p_file->store_line("var ai_level: AILevel = AILevel.SMART");
		p_file->store_line("");
		p_file->store_line("func choose_move(pokemon: Pokemon, target: Pokemon) -> PokemonMove:");
		p_file->store_line("\tvar available_moves = pokemon.get_usable_moves()");
		p_file->store_line("\t");
		p_file->store_line("\tif available_moves.is_empty():");
		p_file->store_line("\t\t# Use Struggle if no moves available");
		p_file->store_line("\t\treturn _get_struggle_move()");
		p_file->store_line("\t");
		p_file->store_line("\tmatch ai_level:");
		p_file->store_line("\t\tAILevel.RANDOM:");
		p_file->store_line("\t\t\treturn available_moves[randi() % available_moves.size()]");
		p_file->store_line("\t\tAILevel.SMART:");
		p_file->store_line("\t\t\treturn _choose_smart_move(pokemon, target, available_moves)");
		p_file->store_line("\t\tAILevel.EXPERT:");
		p_file->store_line("\t\t\treturn _choose_expert_move(pokemon, target, available_moves)");
		p_file->store_line("\t");
		p_file->store_line("\treturn available_moves[0]");
		p_file->store_line("");
		p_file->store_line("func _choose_smart_move(pokemon: Pokemon, target: Pokemon, moves: Array) -> PokemonMove:");
		p_file->store_line("\tvar best_move = moves[0]");
		p_file->store_line("\tvar best_score = 0.0");
		p_file->store_line("\t");
		p_file->store_line("\tfor move in moves:");
		p_file->store_line("\t\tvar score = _evaluate_move(pokemon, target, move)");
		p_file->store_line("\t\tif score > best_score:");
		p_file->store_line("\t\t\tbest_score = score");
		p_file->store_line("\t\t\tbest_move = move");
		p_file->store_line("\t");
		p_file->store_line("\treturn best_move");
		p_file->store_line("");
		p_file->store_line("func _evaluate_move(pokemon: Pokemon, target: Pokemon, move: PokemonMove) -> float:");
		p_file->store_line("\tvar score = 0.0");
		p_file->store_line("\t");
		p_file->store_line("\t# Base power score");
		p_file->store_line("\tscore += move.power * 0.1");
		p_file->store_line("\t");
		p_file->store_line("\t# Type effectiveness bonus");
		p_file->store_line("\tvar effectiveness = PokemonType.get_effectiveness_dual_type(move.move_type, target.type1, target.type2)");
		p_file->store_line("\tscore += effectiveness * 50");
		p_file->store_line("\t");
		p_file->store_line("\t# STAB bonus");
		p_file->store_line("\tif move.move_type == pokemon.type1 or move.move_type == pokemon.type2:");
		p_file->store_line("\t\tscore += 25");
		p_file->store_line("\t");
		p_file->store_line("\t# Accuracy consideration");
		p_file->store_line("\tscore *= (move.accuracy / 100.0)");
		p_file->store_line("\t");
		p_file->store_line("\treturn score");
		p_file->store_line("");
		p_file->store_line("func _choose_expert_move(pokemon: Pokemon, target: Pokemon, moves: Array) -> PokemonMove:");
		p_file->store_line("\t# More advanced AI logic would go here");
		p_file->store_line("\t# For now, use smart AI");
		p_file->store_line("\treturn _choose_smart_move(pokemon, target, moves)");
		p_file->store_line("");
		p_file->store_line("func _get_struggle_move() -> PokemonMove:");
		p_file->store_line("\tvar struggle = PokemonMove.new()");
		p_file->store_line("\tstruggle.move_name = \"Struggle\"");
		p_file->store_line("\tstruggle.move_type = \"normal\"");
		p_file->store_line("\tstruggle.power = 50");
		p_file->store_line("\tstruggle.accuracy = 100");
		p_file->store_line("\tstruggle.category = \"physical\"");
		p_file->store_line("\treturn struggle");

	}
}

void PokemonBattleSystemModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "PokemonBattle") {
		p_file->store_line("[gd_scene load_steps=3 format=3 uid=\"uid://pokemon_battle_scene\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/pokemon/PokemonBattle.gd\" id=\"1_battle_script\"]");
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"res://scenes/ui/PokemonBattleUI.tscn\" id=\"2_battle_ui\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"PokemonBattle\" type=\"Node2D\"]");
		p_file->store_line("script = ExtResource(\"1_battle_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 0");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("color = Color(0.2, 0.6, 0.2, 1)");
		p_file->store_line("");
		p_file->store_line("[node name=\"PlayerSide\" type=\"Node2D\" parent=\".\"]");
		p_file->store_line("position = Vector2(200, 400)");
		p_file->store_line("");
		p_file->store_line("[node name=\"EnemySide\" type=\"Node2D\" parent=\".\"]");
		p_file->store_line("position = Vector2(600, 200)");
		p_file->store_line("");
		p_file->store_line("[node name=\"BattleUI\" parent=\".\" instance=ExtResource(\"2_battle_ui\")]");

	} else if (p_scene_name == "PokemonBattleUI") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://pokemon_battle_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/PokemonBattleUI.gd\" id=\"1_ui_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"PokemonBattleUI\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_ui_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"ActionMenu\" type=\"VBoxContainer\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 3");
		p_file->store_line("anchor_left = 1.0");
		p_file->store_line("anchor_top = 1.0");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = -200.0");
		p_file->store_line("offset_top = -150.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"FightButton\" type=\"Button\" parent=\"ActionMenu\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Fight\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"PokemonButton\" type=\"Button\" parent=\"ActionMenu\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Pokemon\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"BagButton\" type=\"Button\" parent=\"ActionMenu\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Bag\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"RunButton\" type=\"Button\" parent=\"ActionMenu\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Run\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"HPBars\" type=\"Control\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"PlayerHP\" type=\"ProgressBar\" parent=\"HPBars\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 2");
		p_file->store_line("anchor_top = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 50.0");
		p_file->store_line("offset_top = -200.0");
		p_file->store_line("offset_right = 250.0");
		p_file->store_line("offset_bottom = -180.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"EnemyHP\" type=\"ProgressBar\" parent=\"HPBars\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 1");
		p_file->store_line("anchor_left = 1.0");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("offset_left = -250.0");
		p_file->store_line("offset_top = 50.0");
		p_file->store_line("offset_right = -50.0");
		p_file->store_line("offset_bottom = 70.0");

	} else if (p_scene_name == "MoveSelector") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://move_selector\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/MoveSelector.gd\" id=\"1_move_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"MoveSelector\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_move_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"MoveGrid\" type=\"GridContainer\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 7");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 1.0");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = -200.0");
		p_file->store_line("offset_top = -150.0");
		p_file->store_line("offset_right = 200.0");
		p_file->store_line("columns = 2");

	} else if (p_scene_name == "PokemonSwitcher") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://pokemon_switcher\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/PokemonSwitcher.gd\" id=\"1_switcher_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"PokemonSwitcher\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_switcher_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"PartyList\" type=\"VBoxContainer\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 8");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = -150.0");
		p_file->store_line("offset_top = -200.0");
		p_file->store_line("offset_right = 150.0");
		p_file->store_line("offset_bottom = 200.0");
	}
}
