#include "player_controller_2d_topdown_8dir_module.h"

void PlayerController2DTopdown8DirModule::generate_script(Ref<FileAccess> p_file) {
	p_file->store_line("# PlayerController2DTopdown8Dir.gd");
	p_file->store_line("# Generated by Lupine Engine - 2D Top-down Player Controller (8-Direction)");
	p_file->store_line("# 8-directional movement with health, stamina, combat, and interaction");
	p_file->store_line("");
	p_file->store_line("extends CharacterBody2D");
	p_file->store_line("class_name PlayerController2DTopdown8Dir");
	p_file->store_line("");
	p_file->store_line("# Movement settings");
	p_file->store_line("@export var base_speed: float = 200.0");
	p_file->store_line("@export var sprint_speed: float = 350.0");
	p_file->store_line("@export var sprint_stamina_cost: float = 30.0");
	p_file->store_line("");
	p_file->store_line("# Combat settings");
	p_file->store_line("@export var attack_damage: float = 25.0");
	p_file->store_line("@export var attack_range: float = 50.0");
	p_file->store_line("@export var attack_cooldown: float = 0.5");
	p_file->store_line("@export var ranged_attack_damage: float = 15.0");
	p_file->store_line("@export var ranged_attack_range: float = 200.0");
	p_file->store_line("");
	p_file->store_line("# Dash settings");
	p_file->store_line("@export var dash_distance: float = 100.0");
	p_file->store_line("@export var dash_duration: float = 0.2");
	p_file->store_line("@export var dash_stamina_cost: float = 20.0");
	p_file->store_line("@export var dash_cooldown: float = 1.0");
	p_file->store_line("");
	p_file->store_line("# Internal state");
	p_file->store_line("var current_speed: float");
	p_file->store_line("var is_sprinting: bool = false");
	p_file->store_line("var is_dashing: bool = false");
	p_file->store_line("var dash_direction: Vector2");
	p_file->store_line("var dash_timer: float = 0.0");
	p_file->store_line("var attack_timer: float = 0.0");
	p_file->store_line("var dash_cooldown_timer: float = 0.0");
	p_file->store_line("");
	p_file->store_line("# Input buffering");
	p_file->store_line("var input_buffer: Vector2 = Vector2.ZERO");
	p_file->store_line("var last_movement_direction: Vector2 = Vector2.DOWN");
	p_file->store_line("");
	p_file->store_line("# Node references");
	p_file->store_line("@onready var sprite: Sprite2D = $Sprite2D");
	p_file->store_line("@onready var collision_shape: CollisionShape2D = $CollisionShape2D");
	p_file->store_line("@onready var interaction_area: Area2D = $InteractionArea");
	p_file->store_line("@onready var attack_area: Area2D = $AttackArea");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\tcurrent_speed = base_speed");
	p_file->store_line("\t");
	p_file->store_line("\t# Connect to PlayerStats if available");
	p_file->store_line("\tif PlayerStats:");
	p_file->store_line("\t\tPlayerStats.health_depleted.connect(_on_health_depleted)");
	p_file->store_line("");
	p_file->store_line("func _physics_process(delta: float):");
	p_file->store_line("\t# Update timers");
	p_file->store_line("\tattack_timer = max(0, attack_timer - delta)");
	p_file->store_line("\tdash_cooldown_timer = max(0, dash_cooldown_timer - delta)");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle dash");
	p_file->store_line("\tif is_dashing:");
	p_file->store_line("\t\t_handle_dash(delta)");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Get input");
	p_file->store_line("\tinput_buffer = _get_movement_input()");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle movement");
	p_file->store_line("\t_handle_movement(delta)");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle actions");
	p_file->store_line("\t_handle_actions()");
	p_file->store_line("");
	p_file->store_line("func _get_movement_input() -> Vector2:");
	p_file->store_line("\t# 8-directional input using Input.get_vector for smooth diagonal movement");
	p_file->store_line("\tvar input = Input.get_vector(\"move_left\", \"move_right\", \"move_up\", \"move_down\")");
	p_file->store_line("\t");
	p_file->store_line("\t# Normalize diagonal movement to prevent faster diagonal speed");
	p_file->store_line("\tif input.length() > 1.0:");
	p_file->store_line("\t\tinput = input.normalized()");
	p_file->store_line("\t");
	p_file->store_line("\treturn input");
	p_file->store_line("");
	p_file->store_line("func _handle_movement(delta: float):");
	p_file->store_line("\tif input_buffer.length() > 0:");
	p_file->store_line("\t\tlast_movement_direction = input_buffer.normalized()");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle sprinting");
	p_file->store_line("\tis_sprinting = Input.is_action_pressed(\"sprint\") and input_buffer.length() > 0");
	p_file->store_line("\tif is_sprinting and PlayerStats and PlayerStats.current_stamina > 0:");
	p_file->store_line("\t\tcurrent_speed = sprint_speed");
	p_file->store_line("\t\tPlayerStats.use_stamina(sprint_stamina_cost * delta)");
	p_file->store_line("\telse:");
	p_file->store_line("\t\tcurrent_speed = base_speed");
	p_file->store_line("\t\tis_sprinting = false");
	p_file->store_line("\t");
	p_file->store_line("\t# Apply movement");
	p_file->store_line("\tvelocity = input_buffer * current_speed");
	p_file->store_line("\tmove_and_slide()");
	p_file->store_line("");
	p_file->store_line("func _handle_actions():");
	p_file->store_line("\t# Attack");
	p_file->store_line("\tif Input.is_action_just_pressed(\"attack\") and attack_timer <= 0:");
	p_file->store_line("\t\t_perform_attack()");
	p_file->store_line("\t");
	p_file->store_line("\t# Ranged attack");
	p_file->store_line("\tif Input.is_action_just_pressed(\"ranged_attack\") and attack_timer <= 0:");
	p_file->store_line("\t\t_perform_ranged_attack()");
	p_file->store_line("\t");
	p_file->store_line("\t# Dash");
	p_file->store_line("\tif Input.is_action_just_pressed(\"dash\") and dash_cooldown_timer <= 0:");
	p_file->store_line("\t\t_perform_dash()");
	p_file->store_line("\t");
	p_file->store_line("\t# Interaction");
	p_file->store_line("\tif Input.is_action_just_pressed(\"interact\"):");
	p_file->store_line("\t\t_handle_interaction()");
	p_file->store_line("");
	p_file->store_line("func _perform_attack():");
	p_file->store_line("\tif not PlayerStats or PlayerStats.current_health <= 0:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tattack_timer = attack_cooldown");
	p_file->store_line("\t");
	p_file->store_line("\t# Position attack area in front of player");
	p_file->store_line("\tvar attack_position = global_position + (last_movement_direction * attack_range)");
	p_file->store_line("\tattack_area.global_position = attack_position");
	p_file->store_line("\tattack_area.get_child(0).disabled = false");
	p_file->store_line("\t");
	p_file->store_line("\t# Check for enemies in attack range");
	p_file->store_line("\tawait get_tree().process_frame");
	p_file->store_line("\tvar enemies = attack_area.get_overlapping_bodies()");
	p_file->store_line("\tfor enemy in enemies:");
	p_file->store_line("\t\tif enemy.has_method(\"take_damage\"):");
	p_file->store_line("\t\t\tenemy.take_damage(attack_damage)");
	p_file->store_line("\t");
	p_file->store_line("\t# Disable attack area");
	p_file->store_line("\tattack_area.get_child(0).disabled = true");
	p_file->store_line("");
	p_file->store_line("func _perform_ranged_attack():");
	p_file->store_line("\tif not PlayerStats or PlayerStats.current_health <= 0:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tattack_timer = attack_cooldown");
	p_file->store_line("\t");
	p_file->store_line("\t# Create projectile (if TopdownCombatManager is available)");
	p_file->store_line("\tif TopdownCombatManager:");
	p_file->store_line("\t\tvar projectile_data = {");
	p_file->store_line("\t\t\t\"damage\": ranged_attack_damage,");
	p_file->store_line("\t\t\t\"speed\": 400.0,");
	p_file->store_line("\t\t\t\"range\": ranged_attack_range,");
	p_file->store_line("\t\t\t\"direction\": last_movement_direction");
	p_file->store_line("\t\t}");
	p_file->store_line("\t\tTopdownCombatManager.create_projectile(global_position, projectile_data)");
	p_file->store_line("");
	p_file->store_line("func _perform_dash():");
	p_file->store_line("\tif not PlayerStats or PlayerStats.current_stamina < dash_stamina_cost:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tPlayerStats.use_stamina(dash_stamina_cost)");
	p_file->store_line("\tdash_cooldown_timer = dash_cooldown");
	p_file->store_line("\t");
	p_file->store_line("\t# Use current input or last movement direction");
	p_file->store_line("\tdash_direction = input_buffer if input_buffer.length() > 0 else last_movement_direction");
	p_file->store_line("\tdash_direction = dash_direction.normalized()");
	p_file->store_line("\t");
	p_file->store_line("\tis_dashing = true");
	p_file->store_line("\tdash_timer = dash_duration");
	p_file->store_line("");
	p_file->store_line("func _handle_dash(delta: float):");
	p_file->store_line("\tdash_timer -= delta");
	p_file->store_line("\t");
	p_file->store_line("\tif dash_timer <= 0:");
	p_file->store_line("\t\tis_dashing = false");
	p_file->store_line("\t\tvelocity = Vector2.ZERO");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Calculate dash speed");
	p_file->store_line("\tvar dash_speed = dash_distance / dash_duration");
	p_file->store_line("\tvelocity = dash_direction * dash_speed");
	p_file->store_line("\tmove_and_slide()");
	p_file->store_line("");
	p_file->store_line("func _handle_interaction():");
	p_file->store_line("\t# Check for interactable objects");
	p_file->store_line("\tvar interactables = interaction_area.get_overlapping_areas()");
	p_file->store_line("\tfor area in interactables:");
	p_file->store_line("\t\tif area.get_parent().has_method(\"interact\"):");
	p_file->store_line("\t\t\tarea.get_parent().interact(self)");
	p_file->store_line("\t\t\tbreak");
	p_file->store_line("\t");
	p_file->store_line("\t# Check for interactable bodies");
	p_file->store_line("\tvar bodies = interaction_area.get_overlapping_bodies()");
	p_file->store_line("\tfor body in bodies:");
	p_file->store_line("\t\tif body != self and body.has_method(\"interact\"):");
	p_file->store_line("\t\t\tbody.interact(self)");
	p_file->store_line("\t\t\tbreak");
	p_file->store_line("");
	p_file->store_line("func _on_health_depleted():");
	p_file->store_line("\t# Handle player death");
	p_file->store_line("\tvelocity = Vector2.ZERO");
	p_file->store_line("\tis_dashing = false");
	p_file->store_line("\tset_physics_process(false)");
	p_file->store_line("\t");
	p_file->store_line("\t# Trigger game over or respawn logic");
	p_file->store_line("\tif GameManager:");
	p_file->store_line("\t\tGameManager.player_died()");
	p_file->store_line("");
	p_file->store_line("func take_damage(amount: float):");
	p_file->store_line("\tif PlayerStats:");
	p_file->store_line("\t\tPlayerStats.take_damage(amount)");
	p_file->store_line("");
	p_file->store_line("func heal(amount: float):");
	p_file->store_line("\tif PlayerStats:");
	p_file->store_line("\t\tPlayerStats.heal(amount)");
	p_file->store_line("");
	p_file->store_line("func is_player() -> bool:");
	p_file->store_line("\treturn true");
}

void PlayerController2DTopdown8DirModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "Player2DTopdown8Dir") {
		// Enhanced Player2DTopdown8Dir scene with all necessary components
		p_file->store_line("[gd_scene load_steps=4 format=3 uid=\"uid://player_2d_topdown_8dir\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/PlayerController2DTopdown8Dir.gd\" id=\"1_player_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"RectangleShape2D\" id=\"RectangleShape2D_1\"]");
		p_file->store_line("size = Vector2(20, 30)");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CircleShape2D\" id=\"CircleShape2D_1\"]");
		p_file->store_line("radius = 40.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"Player2DTopdown8Dir\" type=\"CharacterBody2D\"]");
		p_file->store_line("script = ExtResource(\"1_player_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("modulate = Color(0.2, 0.8, 0.2, 1)");
		p_file->store_line("scale = Vector2(20, 30)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"InteractionArea\" type=\"Area2D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"InteractionArea\"]");
		p_file->store_line("shape = SubResource(\"CircleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"AttackArea\" type=\"Area2D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"AttackArea\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("disabled = true");
	}
}
