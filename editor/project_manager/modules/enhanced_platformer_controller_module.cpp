#include "enhanced_platformer_controller_module.h"

void EnhancedPlatformerControllerModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();
	
	if (filename == "EnhancedPlatformerController.gd") {
		p_file->store_line("# EnhancedPlatformerController.gd");
		p_file->store_line("# Generated by Lupine Engine - Enhanced 2D Platformer Controller");
		p_file->store_line("# Advanced platformer with wall jumping, climbing, and status effects");
		p_file->store_line("");
		p_file->store_line("extends CharacterBody2D");
		p_file->store_line("class_name EnhancedPlatformerController");
		p_file->store_line("");
		p_file->store_line("# Movement constants");
		p_file->store_line("const SPEED = 200.0");
		p_file->store_line("const JUMP_VELOCITY = -400.0");
		p_file->store_line("const WALL_JUMP_VELOCITY = Vector2(300, -350)");
		p_file->store_line("const CLIMB_SPEED = 150.0");
		p_file->store_line("const WALL_SLIDE_SPEED = 100.0");
		p_file->store_line("const COYOTE_TIME = 0.1");
		p_file->store_line("const JUMP_BUFFER_TIME = 0.1");
		p_file->store_line("");
		p_file->store_line("# Get the gravity from the project settings");
		p_file->store_line("var gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")");
		p_file->store_line("");
		p_file->store_line("# State variables");
		p_file->store_line("var is_climbing: bool = false");
		p_file->store_line("var is_wall_sliding: bool = false");
		p_file->store_line("var can_wall_jump: bool = false");
		p_file->store_line("var wall_jump_direction: int = 0");
		p_file->store_line("var coyote_timer: float = 0.0");
		p_file->store_line("var jump_buffer_timer: float = 0.0");
		p_file->store_line("var current_climbable: ClimbableSurface = null");
		p_file->store_line("");
		p_file->store_line("# Components");
		p_file->store_line("@onready var sprite: Sprite2D = $Sprite2D");
		p_file->store_line("@onready var collision: CollisionShape2D = $CollisionShape2D");
		p_file->store_line("@onready var wall_check_left: RayCast2D = $WallCheckLeft");
		p_file->store_line("@onready var wall_check_right: RayCast2D = $WallCheckRight");
		p_file->store_line("@onready var status_manager: StatusEffectManager = $StatusEffectManager");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tadd_to_group(\"player\")");
		p_file->store_line("");
		p_file->store_line("func _physics_process(delta):");
		p_file->store_line("\t# Update timers");
		p_file->store_line("\tcoyote_timer -= delta");
		p_file->store_line("\tjump_buffer_timer -= delta");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if we just left the ground");
		p_file->store_line("\tif was_on_floor() and not is_on_floor():");
		p_file->store_line("\t\tcoyote_timer = COYOTE_TIME");
		p_file->store_line("\t");
		p_file->store_line("\t# Handle input (affected by status effects)");
		p_file->store_line("\tvar input_vector = _get_input_vector()");
		p_file->store_line("\t");
		p_file->store_line("\t# Handle different movement states");
		p_file->store_line("\tif is_climbing:");
		p_file->store_line("\t\t_handle_climbing(input_vector, delta)");
		p_file->store_line("\telse:");
		p_file->store_line("\t\t_handle_normal_movement(input_vector, delta)");
		p_file->store_line("\t");
		p_file->store_line("\tmove_and_slide()");
		p_file->store_line("");
		p_file->store_line("func _get_input_vector() -> Vector2:");
		p_file->store_line("\t# Get input, potentially modified by status effects");
		p_file->store_line("\tvar input = Vector2.ZERO");
		p_file->store_line("\t");
		p_file->store_line("\tif status_manager and status_manager.has_effect(\"confused\"):");
		p_file->store_line("\t\t# Reverse controls when confused");
		p_file->store_line("\t\tinput.x = Input.get_axis(\"move_right\", \"move_left\")");
		p_file->store_line("\t\tinput.y = Input.get_axis(\"move_down\", \"move_up\")");
		p_file->store_line("\telse:");
		p_file->store_line("\t\tinput.x = Input.get_axis(\"move_left\", \"move_right\")");
		p_file->store_line("\t\tinput.y = Input.get_axis(\"move_up\", \"move_down\")");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for stun effect");
		p_file->store_line("\tif status_manager and status_manager.has_effect(\"stunned\"):");
		p_file->store_line("\t\treturn Vector2.ZERO");
		p_file->store_line("\t");
		p_file->store_line("\treturn input");
		p_file->store_line("");
		p_file->store_line("func _handle_normal_movement(input_vector: Vector2, delta: float):");
		p_file->store_line("\t# Add gravity");
		p_file->store_line("\tif not is_on_floor():");
		p_file->store_line("\t\tvelocity.y += gravity * delta");
		p_file->store_line("\t");
		p_file->store_line("\t# Handle jumping");
		p_file->store_line("\tif Input.is_action_just_pressed(\"jump\"):");
		p_file->store_line("\t\tjump_buffer_timer = JUMP_BUFFER_TIME");
		p_file->store_line("\t");
		p_file->store_line("\tif jump_buffer_timer > 0:");
		p_file->store_line("\t\tif is_on_floor() or coyote_timer > 0:");
		p_file->store_line("\t\t\t_jump()");
		p_file->store_line("\t\telif can_wall_jump:");
		p_file->store_line("\t\t\t_wall_jump()");
		p_file->store_line("\t");
		p_file->store_line("\t# Handle horizontal movement");
		p_file->store_line("\tif input_vector.x != 0:");
		p_file->store_line("\t\tvelocity.x = input_vector.x * SPEED");
		p_file->store_line("\t\tsprite.flip_h = input_vector.x < 0");
		p_file->store_line("\telse:");
		p_file->store_line("\t\tvelocity.x = move_toward(velocity.x, 0, SPEED * delta * 5)");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for wall sliding");
		p_file->store_line("\t_check_wall_sliding(input_vector)");
		p_file->store_line("");
		p_file->store_line("func _handle_climbing(input_vector: Vector2, delta: float):");
		p_file->store_line("\t# Climbing movement");
		p_file->store_line("\tvelocity.y = input_vector.y * CLIMB_SPEED");
		p_file->store_line("\tvelocity.x = input_vector.x * CLIMB_SPEED * 0.5");
		p_file->store_line("\t");
		p_file->store_line("\t# Jump off ladder/rope");
		p_file->store_line("\tif Input.is_action_just_pressed(\"jump\"):");
		p_file->store_line("\t\tstop_climbing()");
		p_file->store_line("\t\tvelocity.y = JUMP_VELOCITY * 0.8");
		p_file->store_line("");
		p_file->store_line("func _check_wall_sliding(input_vector: Vector2):");
		p_file->store_line("\tif is_on_floor():");
		p_file->store_line("\t\tis_wall_sliding = false");
		p_file->store_line("\t\tcan_wall_jump = false");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar is_touching_wall = false");
		p_file->store_line("\twall_jump_direction = 0");
		p_file->store_line("\t");
		p_file->store_line("\tif wall_check_left.is_colliding() and input_vector.x < 0:");
		p_file->store_line("\t\tis_touching_wall = true");
		p_file->store_line("\t\twall_jump_direction = 1");
		p_file->store_line("\telif wall_check_right.is_colliding() and input_vector.x > 0:");
		p_file->store_line("\t\tis_touching_wall = true");
		p_file->store_line("\t\twall_jump_direction = -1");
		p_file->store_line("\t");
		p_file->store_line("\tif is_touching_wall and velocity.y > 0:");
		p_file->store_line("\t\tis_wall_sliding = true");
		p_file->store_line("\t\tcan_wall_jump = true");
		p_file->store_line("\t\tvelocity.y = min(velocity.y, WALL_SLIDE_SPEED)");
		p_file->store_line("\telse:");
		p_file->store_line("\t\tis_wall_sliding = false");
		p_file->store_line("\t\tcan_wall_jump = false");
		p_file->store_line("");
		p_file->store_line("func _jump():");
		p_file->store_line("\tvelocity.y = JUMP_VELOCITY");
		p_file->store_line("\tjump_buffer_timer = 0");
		p_file->store_line("\tcoyote_timer = 0");
		p_file->store_line("");
		p_file->store_line("func _wall_jump():");
		p_file->store_line("\tvelocity.x = WALL_JUMP_VELOCITY.x * wall_jump_direction");
		p_file->store_line("\tvelocity.y = WALL_JUMP_VELOCITY.y");
		p_file->store_line("\tjump_buffer_timer = 0");
		p_file->store_line("\tis_wall_sliding = false");
		p_file->store_line("\tcan_wall_jump = false");
		p_file->store_line("");
		p_file->store_line("func start_climbing(climbable: ClimbableSurface):");
		p_file->store_line("\tis_climbing = true");
		p_file->store_line("\tcurrent_climbable = climbable");
		p_file->store_line("\tvelocity.y = 0");
		p_file->store_line("\t");
		p_file->store_line("\t# Snap to climbable if needed");
		p_file->store_line("\tif climbable.auto_snap:");
		p_file->store_line("\t\tglobal_position.x = climbable.global_position.x");
		p_file->store_line("");
		p_file->store_line("func stop_climbing():");
		p_file->store_line("\tis_climbing = false");
		p_file->store_line("\tcurrent_climbable = null");
		p_file->store_line("");
		p_file->store_line("func apply_bounce(force: Vector2):");
		p_file->store_line("\tvelocity += force");
		p_file->store_line("");
		p_file->store_line("func take_damage(damage: float, knockback: Vector2 = Vector2.ZERO):");
		p_file->store_line("\tif PlayerStats:");
		p_file->store_line("\t\tPlayerStats.take_damage(damage)");
		p_file->store_line("\t");
		p_file->store_line("\tif knockback != Vector2.ZERO:");
		p_file->store_line("\t\tvelocity += knockback");
		p_file->store_line("\t");
		p_file->store_line("\t# Flash effect");
		p_file->store_line("\tif ScreenEffects:");
		p_file->store_line("\t\tScreenEffects.damage_flash()");
		p_file->store_line("");
		p_file->store_line("func apply_status_effect(effect_type: String, duration: float):");
		p_file->store_line("\tif status_manager:");
		p_file->store_line("\t\tstatus_manager.apply_effect(effect_type, duration)");
		p_file->store_line("");
		p_file->store_line("func respawn():");
		p_file->store_line("\t# Reset state");
		p_file->store_line("\tvelocity = Vector2.ZERO");
		p_file->store_line("\tis_climbing = false");
		p_file->store_line("\tis_wall_sliding = false");
		p_file->store_line("\tcan_wall_jump = false");
		p_file->store_line("\t");
		p_file->store_line("\t# Clear status effects");
		p_file->store_line("\tif status_manager:");
		p_file->store_line("\t\tstatus_manager.clear_all_effects()");
	} else if (filename == "StatusEffectManager.gd") {
		p_file->store_line("# StatusEffectManager.gd");
		p_file->store_line("# Generated by Lupine Engine - Status Effect Manager");
		p_file->store_line("# Manages temporary status effects on the player");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("class_name StatusEffectManager");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal effect_applied(effect_type: String, duration: float)");
		p_file->store_line("signal effect_removed(effect_type: String)");
		p_file->store_line("");
		p_file->store_line("# Active effects");
		p_file->store_line("var active_effects: Dictionary = {}");
		p_file->store_line("");
		p_file->store_line("# Effect configurations");
		p_file->store_line("var effect_configs: Dictionary = {");
		p_file->store_line("\t\"burn\": {");
		p_file->store_line("\t\t\"damage_per_second\": 5.0,");
		p_file->store_line("\t\t\"tick_interval\": 1.0,");
		p_file->store_line("\t\t\"color\": Color.RED");
		p_file->store_line("\t},");
		p_file->store_line("\t\"poison\": {");
		p_file->store_line("\t\t\"damage_per_second\": 3.0,");
		p_file->store_line("\t\t\"tick_interval\": 0.5,");
		p_file->store_line("\t\t\"color\": Color.GREEN");
		p_file->store_line("\t},");
		p_file->store_line("\t\"confused\": {");
		p_file->store_line("\t\t\"color\": Color.PURPLE");
		p_file->store_line("\t},");
		p_file->store_line("\t\"stunned\": {");
		p_file->store_line("\t\t\"color\": Color.YELLOW");
		p_file->store_line("\t}");
		p_file->store_line("}");
		p_file->store_line("");
		p_file->store_line("func _process(delta):");
		p_file->store_line("\t_update_effects(delta)");
		p_file->store_line("");
		p_file->store_line("func apply_effect(effect_type: String, duration: float):");
		p_file->store_line("\tif not effect_configs.has(effect_type):");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar effect_data = {");
		p_file->store_line("\t\t\"type\": effect_type,");
		p_file->store_line("\t\t\"duration\": duration,");
		p_file->store_line("\t\t\"remaining_time\": duration,");
		p_file->store_line("\t\t\"tick_timer\": 0.0");
		p_file->store_line("\t}");
		p_file->store_line("\t");
		p_file->store_line("\tactive_effects[effect_type] = effect_data");
		p_file->store_line("\teffect_applied.emit(effect_type, duration)");
		p_file->store_line("\t");
		p_file->store_line("\t# Show visual effect");
		p_file->store_line("\t_show_effect_visual(effect_type)");
		p_file->store_line("");
		p_file->store_line("func remove_effect(effect_type: String):");
		p_file->store_line("\tif active_effects.has(effect_type):");
		p_file->store_line("\t\tactive_effects.erase(effect_type)");
		p_file->store_line("\t\teffect_removed.emit(effect_type)");
		p_file->store_line("");
		p_file->store_line("func has_effect(effect_type: String) -> bool:");
		p_file->store_line("\treturn active_effects.has(effect_type)");
		p_file->store_line("");
		p_file->store_line("func get_effect_remaining_time(effect_type: String) -> float:");
		p_file->store_line("\tif active_effects.has(effect_type):");
		p_file->store_line("\t\treturn active_effects[effect_type].remaining_time");
		p_file->store_line("\treturn 0.0");
		p_file->store_line("");
		p_file->store_line("func clear_all_effects():");
		p_file->store_line("\tfor effect_type in active_effects.keys():");
		p_file->store_line("\t\teffect_removed.emit(effect_type)");
		p_file->store_line("\tactive_effects.clear()");
		p_file->store_line("");
		p_file->store_line("func _update_effects(delta: float):");
		p_file->store_line("\tfor effect_type in active_effects.keys():");
		p_file->store_line("\t\tvar effect = active_effects[effect_type]");
		p_file->store_line("\t\teffect.remaining_time -= delta");
		p_file->store_line("\t\t");
		p_file->store_line("\t\t# Handle damage over time effects");
		p_file->store_line("\t\tif effect_type in [\"burn\", \"poison\"]:");
		p_file->store_line("\t\t\teffect.tick_timer += delta");
		p_file->store_line("\t\t\tvar config = effect_configs[effect_type]");
		p_file->store_line("\t\t\t");
		p_file->store_line("\t\t\tif effect.tick_timer >= config.tick_interval:");
		p_file->store_line("\t\t\t\teffect.tick_timer = 0.0");
		p_file->store_line("\t\t\t\tvar damage = config.damage_per_second * config.tick_interval");
		p_file->store_line("\t\t\t\t");
		p_file->store_line("\t\t\t\tif PlayerStats:");
		p_file->store_line("\t\t\t\t\tPlayerStats.take_damage(damage)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\t# Remove expired effects");
		p_file->store_line("\t\tif effect.remaining_time <= 0:");
		p_file->store_line("\t\t\tremove_effect(effect_type)");
		p_file->store_line("");
		p_file->store_line("func _show_effect_visual(effect_type: String):");
		p_file->store_line("\t# Create visual indicator for status effect");
		p_file->store_line("\tif PopupManager:");
		p_file->store_line("\t\tvar effect_name = effect_type.capitalize()");
		p_file->store_line("\t\tPopupManager.show_status_effect(effect_name, effect_configs[effect_type].color)");
	}
}

void EnhancedPlatformerControllerModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "EnhancedPlatformerPlayer") {
		p_file->store_line("[gd_scene load_steps=4 format=3 uid=\"uid://enhanced_platformer_player\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/player/EnhancedPlatformerController.gd\" id=\"1_player_script\"]");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/player/StatusEffectManager.gd\" id=\"2_status_manager_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"RectangleShape2D\" id=\"RectangleShape2D_1\"]");
		p_file->store_line("size = Vector2(20, 40)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Player\" type=\"CharacterBody2D\"]");
		p_file->store_line("script = ExtResource(\"1_player_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("modulate = Color(0.5, 0.5, 1, 1)");
		p_file->store_line("scale = Vector2(20, 40)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"WallCheckLeft\" type=\"RayCast2D\" parent=\".\"]");
		p_file->store_line("position = Vector2(-10, 0)");
		p_file->store_line("target_position = Vector2(-5, 0)");
		p_file->store_line("");
		p_file->store_line("[node name=\"WallCheckRight\" type=\"RayCast2D\" parent=\".\"]");
		p_file->store_line("position = Vector2(10, 0)");
		p_file->store_line("target_position = Vector2(5, 0)");
		p_file->store_line("");
		p_file->store_line("[node name=\"StatusEffectManager\" type=\"Node\" parent=\".\"]");
		p_file->store_line("script = ExtResource(\"2_status_manager_script\")");
	}
}
