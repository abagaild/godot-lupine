#include "support_conversation_module.h"

void SupportConversationModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();

	if (filename == "SupportConversationManager.gd") {
		p_file->store_line("# SupportConversationManager.gd");
		p_file->store_line("# Generated by Lupine Engine - Support Conversation Manager");
		p_file->store_line("# Fire Emblem-style support conversation system");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal support_unlocked(char1_id: String, char2_id: String, rank: String)");
		p_file->store_line("signal support_viewed(char1_id: String, char2_id: String, rank: String)");
		p_file->store_line("signal support_rank_increased(char1_id: String, char2_id: String, new_rank: String)");
		p_file->store_line("signal support_maxed(char1_id: String, char2_id: String)");
		p_file->store_line("signal romance_support_unlocked(char1_id: String, char2_id: String)");
		p_file->store_line("");
		p_file->store_line("# Support data");
		p_file->store_line("var support_pairs: Dictionary = {}  # \"char1_char2\" -> SupportPair");
		p_file->store_line("var support_dialogues: Dictionary = {}  # \"char1_char2_rank\" -> SupportDialogue");
		p_file->store_line("var support_conditions: Dictionary = {}  # condition_id -> SupportCondition");
		p_file->store_line("var viewed_supports: Array[String] = []  # \"char1_char2_rank\"");
		p_file->store_line("");
		p_file->store_line("# Support ranks");
		p_file->store_line("enum SupportRank { NONE, C, B, A, S }");
		p_file->store_line("var rank_names: Array[String] = [\"None\", \"C\", \"B\", \"A\", \"S\"]");
		p_file->store_line("var rank_thresholds: Array[int] = [0, 100, 300, 600, 1000]");
		p_file->store_line("");
		p_file->store_line("# Battle support tracking");
		p_file->store_line("var battle_support_points: Dictionary = {}  # \"char1_char2\" -> points");
		p_file->store_line("var adjacent_turns: Dictionary = {}  # \"char1_char2\" -> turn_count");
		p_file->store_line("var combat_assists: Dictionary = {}  # \"char1_char2\" -> assist_count");
		p_file->store_line("");
		p_file->store_line("# Settings");
		p_file->store_line("@export var support_points_per_adjacent_turn: int = 2");
		p_file->store_line("@export var support_points_per_combat_assist: int = 10");
		p_file->store_line("@export var support_points_per_heal: int = 15");
		p_file->store_line("@export var max_support_rank: SupportRank = SupportRank.A");
		p_file->store_line("@export var romance_support_enabled: bool = true");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Load support data");
		p_file->store_line("\tload_support_pairs()");
		p_file->store_line("\tload_support_dialogues()");
		p_file->store_line("\tload_support_conditions()");
		p_file->store_line("\t");
		p_file->store_line("\t# Connect to tactical combat if available");
		p_file->store_line("\tif TacticalCombatManager:");
		p_file->store_line("\t\tTacticalCombatManager.turn_ended.connect(_on_turn_ended)");
		p_file->store_line("\t\tTacticalCombatManager.unit_attacked.connect(_on_unit_attacked)");
		p_file->store_line("");
		p_file->store_line("func load_support_pairs():");
		p_file->store_line("\tvar file_path = \"res://data/support/support_pairs.json\"");
		p_file->store_line("\tif not FileAccess.file_exists(file_path):");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar file = FileAccess.open(file_path, FileAccess.READ)");
		p_file->store_line("\tvar json_text = file.get_as_text()");
		p_file->store_line("\tfile.close()");
		p_file->store_line("\t");
		p_file->store_line("\tvar json = JSON.new()");
		p_file->store_line("\tvar parse_result = json.parse(json_text)");
		p_file->store_line("\tif parse_result != OK:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar data = json.data");
		p_file->store_line("\tfor pair_data in data.support_pairs:");
		p_file->store_line("\t\tvar support_pair = SupportPair.new()");
		p_file->store_line("\t\tsupport_pair.initialize_from_data(pair_data)");
		p_file->store_line("\t\tvar key = _get_support_key(support_pair.character1_id, support_pair.character2_id)");
		p_file->store_line("\t\tsupport_pairs[key] = support_pair");
		p_file->store_line("");
		p_file->store_line("func get_support_pair(char1_id: String, char2_id: String) -> SupportPair:");
		p_file->store_line("\tvar key = _get_support_key(char1_id, char2_id)");
		p_file->store_line("\treturn support_pairs.get(key, null)");
		p_file->store_line("");
		p_file->store_line("func _get_support_key(char1_id: String, char2_id: String) -> String:");
		p_file->store_line("\t# Always use alphabetical order for consistency");
		p_file->store_line("\tif char1_id < char2_id:");
		p_file->store_line("\t\treturn char1_id + \"_\" + char2_id");
		p_file->store_line("\telse:");
		p_file->store_line("\t\treturn char2_id + \"_\" + char1_id");
		p_file->store_line("");
		p_file->store_line("func add_support_points(char1_id: String, char2_id: String, points: int, reason: String = \"\"):");
		p_file->store_line("\tvar support_pair = get_support_pair(char1_id, char2_id)");
		p_file->store_line("\tif not support_pair:");
		p_file->store_line("\t\treturn  # No support relationship exists");
		p_file->store_line("\t");
		p_file->store_line("\tvar old_rank = get_current_support_rank(char1_id, char2_id)");
		p_file->store_line("\tsupport_pair.support_points += points");
		p_file->store_line("\tsupport_pair.support_points = max(0, support_pair.support_points)");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for rank increase");
		p_file->store_line("\tvar new_rank = get_current_support_rank(char1_id, char2_id)");
		p_file->store_line("\tif new_rank > old_rank:");
		p_file->store_line("\t\tsupport_rank_increased.emit(char1_id, char2_id, rank_names[new_rank])");
		p_file->store_line("\t\t_unlock_support_conversation(char1_id, char2_id, new_rank)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\t# Check for max rank");
		p_file->store_line("\t\tif new_rank == support_pair.max_rank:");
		p_file->store_line("\t\t\tsupport_maxed.emit(char1_id, char2_id)");
		p_file->store_line("\t\t\t");
		p_file->store_line("\t\t\t# Check for romance unlock");
		p_file->store_line("\t\t\tif support_pair.can_romance and romance_support_enabled:");
		p_file->store_line("\t\t\t\tromance_support_unlocked.emit(char1_id, char2_id)");
		p_file->store_line("");
		p_file->store_line("func get_current_support_rank(char1_id: String, char2_id: String) -> SupportRank:");
		p_file->store_line("\tvar support_pair = get_support_pair(char1_id, char2_id)");
		p_file->store_line("\tif not support_pair:");
		p_file->store_line("\t\treturn SupportRank.NONE");
		p_file->store_line("\t");
		p_file->store_line("\tvar points = support_pair.support_points");
		p_file->store_line("\tfor i in range(rank_thresholds.size() - 1, -1, -1):");
		p_file->store_line("\t\tif points >= rank_thresholds[i] and i <= support_pair.max_rank:");
		p_file->store_line("\t\t\treturn i");
		p_file->store_line("\t");
		p_file->store_line("\treturn SupportRank.NONE");
		p_file->store_line("");
		p_file->store_line("func _unlock_support_conversation(char1_id: String, char2_id: String, rank: SupportRank):");
		p_file->store_line("\tvar dialogue_key = _get_support_key(char1_id, char2_id) + \"_\" + rank_names[rank]");
		p_file->store_line("\tif support_dialogues.has(dialogue_key):");
		p_file->store_line("\t\tsupport_unlocked.emit(char1_id, char2_id, rank_names[rank])");
		p_file->store_line("");
		p_file->store_line("func can_view_support(char1_id: String, char2_id: String, rank: SupportRank) -> bool:");
		p_file->store_line("\t# Check if support rank is unlocked");
		p_file->store_line("\tvar current_rank = get_current_support_rank(char1_id, char2_id)");
		p_file->store_line("\tif rank > current_rank:");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Check conditions");
		p_file->store_line("\tvar dialogue_key = _get_support_key(char1_id, char2_id) + \"_\" + rank_names[rank]");
		p_file->store_line("\tif support_dialogues.has(dialogue_key):");
		p_file->store_line("\t\tvar dialogue = support_dialogues[dialogue_key]");
		p_file->store_line("\t\treturn dialogue.check_conditions()");
		p_file->store_line("\t");
		p_file->store_line("\treturn false");
		p_file->store_line("");
		p_file->store_line("func view_support_conversation(char1_id: String, char2_id: String, rank: SupportRank):");
		p_file->store_line("\tif not can_view_support(char1_id, char2_id, rank):");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar dialogue_key = _get_support_key(char1_id, char2_id) + \"_\" + rank_names[rank]");
		p_file->store_line("\tvar dialogue = support_dialogues[dialogue_key]");
		p_file->store_line("\t");
		p_file->store_line("\t# Mark as viewed");
		p_file->store_line("\tif not viewed_supports.has(dialogue_key):");
		p_file->store_line("\t\tviewed_supports.append(dialogue_key)");
		p_file->store_line("\t");
		p_file->store_line("\t# Start dialogue");
		p_file->store_line("\tif DialogueSystem:");
		p_file->store_line("\t\tDialogueSystem.start_dialogue(dialogue.dialogue_file)");
		p_file->store_line("\t");
		p_file->store_line("\tsupport_viewed.emit(char1_id, char2_id, rank_names[rank])");
		p_file->store_line("");
		p_file->store_line("func get_available_supports(character_id: String) -> Array[Dictionary]:");
		p_file->store_line("\tvar available: Array[Dictionary] = []");
		p_file->store_line("\t");
		p_file->store_line("\tfor key in support_pairs.keys():");
		p_file->store_line("\t\tvar pair = support_pairs[key]");
		p_file->store_line("\t\tvar other_char = \"\"");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tif pair.character1_id == character_id:");
		p_file->store_line("\t\t\tother_char = pair.character2_id");
		p_file->store_line("\t\telif pair.character2_id == character_id:");
		p_file->store_line("\t\t\tother_char = pair.character1_id");
		p_file->store_line("\t\telse:");
		p_file->store_line("\t\t\tcontinue");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tvar current_rank = get_current_support_rank(character_id, other_char)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\t# Check each rank for available conversations");
		p_file->store_line("\t\tfor rank in range(SupportRank.C, current_rank + 1):");
		p_file->store_line("\t\t\tif can_view_support(character_id, other_char, rank):");
		p_file->store_line("\t\t\t\tavailable.append({");
		p_file->store_line("\t\t\t\t\t\"character_id\": other_char,");
		p_file->store_line("\t\t\t\t\t\"rank\": rank,");
		p_file->store_line("\t\t\t\t\t\"rank_name\": rank_names[rank],");
		p_file->store_line("\t\t\t\t\t\"support_points\": pair.support_points,");
		p_file->store_line("\t\t\t\t\t\"can_romance\": pair.can_romance");
		p_file->store_line("\t\t\t\t})");
		p_file->store_line("\t");
		p_file->store_line("\treturn available");
		p_file->store_line("");
		p_file->store_line("# Battle support tracking");
		p_file->store_line("func _on_turn_ended(faction: String):");
		p_file->store_line("\tif faction == \"player\":");
		p_file->store_line("\t\t_check_adjacent_units()");
		p_file->store_line("");
		p_file->store_line("func _check_adjacent_units():");
		p_file->store_line("\t# Check for units adjacent to each other and award support points");
		p_file->store_line("\tif not TacticalCombatManager:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar player_units = TacticalCombatManager.player_units");
		p_file->store_line("\tfor i in range(player_units.size()):");
		p_file->store_line("\t\tfor j in range(i + 1, player_units.size()):");
		p_file->store_line("\t\t\tvar unit1 = player_units[i]");
		p_file->store_line("\t\t\tvar unit2 = player_units[j]");
		p_file->store_line("\t\t\t");
		p_file->store_line("\t\t\t# Check if units are adjacent");
		p_file->store_line("\t\t\tvar distance = unit1.grid_position.distance_to(unit2.grid_position)");
		p_file->store_line("\t\t\tif distance <= 1.5:  # Adjacent or diagonal");
		p_file->store_line("\t\t\t\tadd_support_points(unit1.unit_id, unit2.unit_id, support_points_per_adjacent_turn, \"adjacent\")");
		p_file->store_line("");
		p_file->store_line("func _on_unit_attacked(attacker, target, damage):");
		p_file->store_line("\t# Check for combat assists (healing, supporting attacks, etc.)");
		p_file->store_line("\tif attacker.faction == \"player\" and target.faction != \"player\":");
		p_file->store_line("\t\t_check_combat_assists(attacker, target)");
		p_file->store_line("");
		p_file->store_line("func _check_combat_assists(attacker, target):");
		p_file->store_line("\t# Award support points for units that assist in combat");
		p_file->store_line("\tif not TacticalCombatManager:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar player_units = TacticalCombatManager.player_units");
		p_file->store_line("\tfor unit in player_units:");
		p_file->store_line("\t\tif unit == attacker:");
		p_file->store_line("\t\t\tcontinue");
		p_file->store_line("\t\t");
		p_file->store_line("\t\t# Check if unit is in range to assist");
		p_file->store_line("\t\tvar distance_to_attacker = unit.grid_position.distance_to(attacker.grid_position)");
		p_file->store_line("\t\tvar distance_to_target = unit.grid_position.distance_to(target.grid_position)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tif distance_to_attacker <= 2 or distance_to_target <= 2:");
		p_file->store_line("\t\t\tadd_support_points(attacker.unit_id, unit.unit_id, support_points_per_combat_assist, \"combat_assist\")");
	}
}

void SupportConversationModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "SupportConversationUI") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://support_conversation_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/SupportConversationUI.gd\" id=\"1_support_ui_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"SupportConversationUI\" type=\"Control\"]");
		p_file->store_line("process_mode = 2");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_support_ui_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("color = Color(0, 0, 0, 0.8)");
		p_file->store_line("");
		p_file->store_line("[node name=\"ConversationPanel\" type=\"Panel\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 8");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = -400.0");
		p_file->store_line("offset_top = -200.0");
		p_file->store_line("offset_right = 400.0");
		p_file->store_line("offset_bottom = 200.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"DialogueText\" type=\"RichTextLabel\" parent=\"ConversationPanel\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 20.0");
		p_file->store_line("offset_top = 20.0");
		p_file->store_line("offset_right = -20.0");
		p_file->store_line("offset_bottom = -60.0");
		p_file->store_line("bbcode_enabled = true");
		p_file->store_line("text = \"Support conversation text will appear here...\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"ContinueButton\" type=\"Button\" parent=\"ConversationPanel\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 3");
		p_file->store_line("anchor_left = 1.0");
		p_file->store_line("anchor_top = 1.0");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = -100.0");
		p_file->store_line("offset_top = -40.0");
		p_file->store_line("offset_right = -20.0");
		p_file->store_line("offset_bottom = -20.0");
		p_file->store_line("text = \"Continue\"");
	}
}
