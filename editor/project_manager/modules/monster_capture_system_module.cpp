#include "monster_capture_system_module.h"

void MonsterCaptureSystemModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();

	if (filename == "CaptureManager.gd") {
		p_file->store_line("# CaptureManager.gd");
		p_file->store_line("# Generated by Lupine Engine - Capture Manager");
		p_file->store_line("# Handles Pokemon capture mechanics and Pokeball usage");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal capture_attempted(pokemon: Pokemon, pokeball: Pokeball)");
		p_file->store_line("signal capture_successful(pokemon: Pokemon)");
		p_file->store_line("signal capture_failed(pokemon: Pokemon, shakes: int)");
		p_file->store_line("signal pokeball_thrown(pokeball: Pokeball)");
		p_file->store_line("");
		p_file->store_line("# Capture system");
		p_file->store_line("var capture_calculator: CaptureCalculator");
		p_file->store_line("var capture_ui: Control");
		p_file->store_line("var current_wild_pokemon: Pokemon");
		p_file->store_line("var is_capturing: bool = false");
		p_file->store_line("");
		p_file->store_line("# Pokeball data");
		p_file->store_line("var pokeball_database: Dictionary = {}");
		p_file->store_line("var catch_rate_database: Dictionary = {}");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Initialize systems");
		p_file->store_line("\tcapture_calculator = CaptureCalculator.new()");
		p_file->store_line("\t");
		p_file->store_line("\t# Load capture UI");
		p_file->store_line("\tvar ui_scene = preload(\"res://scenes/ui/CaptureUI.tscn\")");
		p_file->store_line("\tcapture_ui = ui_scene.instantiate()");
		p_file->store_line("\tcapture_ui.visible = false");
		p_file->store_line("\tget_tree().current_scene.add_child(capture_ui)");
		p_file->store_line("\t");
		p_file->store_line("\t# Load databases");
		p_file->store_line("\t_load_databases()");
		p_file->store_line("");
		p_file->store_line("func _load_databases():");
		p_file->store_line("\t# Load Pokeball data");
		p_file->store_line("\tvar pokeball_file = FileAccess.open(\"res://data/capture/pokeballs.json\", FileAccess.READ)");
		p_file->store_line("\tif pokeball_file:");
		p_file->store_line("\t\tvar json_string = pokeball_file.get_as_text()");
		p_file->store_line("\t\tpokeball_file.close()");
		p_file->store_line("\t\tvar json = JSON.new()");
		p_file->store_line("\t\tvar parse_result = json.parse(json_string)");
		p_file->store_line("\t\tif parse_result == OK:");
		p_file->store_line("\t\t\tpokeball_database = json.data");
		p_file->store_line("\t");
		p_file->store_line("\t# Load catch rate data");
		p_file->store_line("\tvar catch_rate_file = FileAccess.open(\"res://data/capture/catch_rates.json\", FileAccess.READ)");
		p_file->store_line("\tif catch_rate_file:");
		p_file->store_line("\t\tvar json_string = catch_rate_file.get_as_text()");
		p_file->store_line("\t\tcatch_rate_file.close()");
		p_file->store_line("\t\tvar json = JSON.new()");
		p_file->store_line("\t\tvar parse_result = json.parse(json_string)");
		p_file->store_line("\t\tif parse_result == OK:");
		p_file->store_line("\t\t\tcatch_rate_database = json.data");
		p_file->store_line("");
		p_file->store_line("func attempt_capture(pokemon: Pokemon, pokeball_type: String = \"pokeball\") -> bool:");
		p_file->store_line("\tif is_capturing:");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\tif not pokeball_database.has(pokeball_type):");
		p_file->store_line("\t\tprint(\"Error: Unknown Pokeball type: \", pokeball_type)");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\tcurrent_wild_pokemon = pokemon");
		p_file->store_line("\tis_capturing = true");
		p_file->store_line("\t");
		p_file->store_line("\t# Create Pokeball");
		p_file->store_line("\tvar pokeball = Pokeball.new()");
		p_file->store_line("\tpokeball.setup_from_data(pokeball_database[pokeball_type])");
		p_file->store_line("\t");
		p_file->store_line("\t# Emit signal");
		p_file->store_line("\tcapture_attempted.emit(pokemon, pokeball)");
		p_file->store_line("\tpokeball_thrown.emit(pokeball)");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate capture");
		p_file->store_line("\tvar capture_result = capture_calculator.calculate_capture(pokemon, pokeball)");
		p_file->store_line("\t");
		p_file->store_line("\t# Show capture animation");
		p_file->store_line("\t_show_capture_animation(pokeball, capture_result)");
		p_file->store_line("\t");
		p_file->store_line("\treturn capture_result.success");
		p_file->store_line("");
		p_file->store_line("func _show_capture_animation(pokeball: Pokeball, result: Dictionary):");
		p_file->store_line("\t# Show capture UI");
		p_file->store_line("\tcapture_ui.visible = true");
		p_file->store_line("\tcapture_ui.start_capture_animation(pokeball, result)");
		p_file->store_line("\t");
		p_file->store_line("\t# Wait for animation to complete");
		p_file->store_line("\tawait capture_ui.animation_completed");
		p_file->store_line("\t");
		p_file->store_line("\t# Hide UI");
		p_file->store_line("\tcapture_ui.visible = false");
		p_file->store_line("\t");
		p_file->store_line("\t# Handle result");
		p_file->store_line("\tif result.success:");
		p_file->store_line("\t\t_handle_successful_capture()");
		p_file->store_line("\telse:");
		p_file->store_line("\t\t_handle_failed_capture(result.shakes)");
		p_file->store_line("\t");
		p_file->store_line("\tis_capturing = false");
		p_file->store_line("");
		p_file->store_line("func _handle_successful_capture():");
		p_file->store_line("\t# Add Pokemon to player's collection");
		p_file->store_line("\tif MonsterManager:");
		p_file->store_line("\t\tMonsterManager.catch_pokemon(current_wild_pokemon)");
		p_file->store_line("\t");
		p_file->store_line("\tcapture_successful.emit(current_wild_pokemon)");
		p_file->store_line("\tcurrent_wild_pokemon = null");
		p_file->store_line("");
		p_file->store_line("func _handle_failed_capture(shakes: int):");
		p_file->store_line("\tcapture_failed.emit(current_wild_pokemon, shakes)");
		p_file->store_line("\tcurrent_wild_pokemon = null");
		p_file->store_line("");
		p_file->store_line("func get_pokeball_data(pokeball_type: String) -> Dictionary:");
		p_file->store_line("\treturn pokeball_database.get(pokeball_type, {})");
		p_file->store_line("");
		p_file->store_line("func get_catch_rate(species_name: String) -> int:");
		p_file->store_line("\treturn catch_rate_database.get(species_name, 45)  # Default catch rate");

	} else if (filename == "Pokeball.gd") {
		p_file->store_line("# Pokeball.gd");
		p_file->store_line("# Generated by Lupine Engine - Pokeball Class");
		p_file->store_line("# Represents different types of Pokeballs with their properties");
		p_file->store_line("");
		p_file->store_line("class_name Pokeball");
		p_file->store_line("extends Resource");
		p_file->store_line("");
		p_file->store_line("@export var ball_name: String = \"Poke Ball\"");
		p_file->store_line("@export var ball_type: String = \"pokeball\"");
		p_file->store_line("@export var catch_rate_modifier: float = 1.0");
		p_file->store_line("@export var special_conditions: Dictionary = {}");
		p_file->store_line("@export var description: String = \"\"");
		p_file->store_line("@export var cost: int = 200");
		p_file->store_line("");
		p_file->store_line("func setup_from_data(data: Dictionary):");
		p_file->store_line("\tball_name = data.get(\"name\", \"Poke Ball\")");
		p_file->store_line("\tball_type = data.get(\"type\", \"pokeball\")");
		p_file->store_line("\tcatch_rate_modifier = data.get(\"catch_rate_modifier\", 1.0)");
		p_file->store_line("\tspecial_conditions = data.get(\"special_conditions\", {})");
		p_file->store_line("\tdescription = data.get(\"description\", \"\")");
		p_file->store_line("\tcost = data.get(\"cost\", 200)");
		p_file->store_line("");
		p_file->store_line("func get_effective_catch_rate(pokemon: Pokemon) -> float:");
		p_file->store_line("\tvar modifier = catch_rate_modifier");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply special conditions");
		p_file->store_line("\tfor condition in special_conditions:");
		p_file->store_line("\t\tmatch condition:");
		p_file->store_line("\t\t\t\"water_type\":");
		p_file->store_line("\t\t\t\tif pokemon.type1 == \"water\" or pokemon.type2 == \"water\":");
		p_file->store_line("\t\t\t\t\tmodifier *= special_conditions[condition]");
		p_file->store_line("\t\t\t\"fire_type\":");
		p_file->store_line("\t\t\t\tif pokemon.type1 == \"fire\" or pokemon.type2 == \"fire\":");
		p_file->store_line("\t\t\t\t\tmodifier *= special_conditions[condition]");
		p_file->store_line("\t\t\t\"low_level\":");
		p_file->store_line("\t\t\t\tif pokemon.level <= 20:");
		p_file->store_line("\t\t\t\t\tmodifier *= special_conditions[condition]");
		p_file->store_line("\t\t\t\"heavy_pokemon\":");
		p_file->store_line("\t\t\t\t# Would check weight if implemented");
		p_file->store_line("\t\t\t\tpass");
		p_file->store_line("\t");
		p_file->store_line("\treturn modifier");

	} else if (filename == "CaptureCalculator.gd") {
		p_file->store_line("# CaptureCalculator.gd");
		p_file->store_line("# Generated by Lupine Engine - Capture Calculator");
		p_file->store_line("# Calculates capture success using Pokemon-style formulas");
		p_file->store_line("");
		p_file->store_line("class_name CaptureCalculator");
		p_file->store_line("extends RefCounted");
		p_file->store_line("");
		p_file->store_line("func calculate_capture(pokemon: Pokemon, pokeball: Pokeball) -> Dictionary:");
		p_file->store_line("\tvar result = {");
		p_file->store_line("\t\t\"success\": false,");
		p_file->store_line("\t\t\"shakes\": 0,");
		p_file->store_line("\t\t\"catch_rate\": 0.0,");
		p_file->store_line("\t\t\"critical_capture\": false");
		p_file->store_line("\t}");
		p_file->store_line("\t");
		p_file->store_line("\t# Get base catch rate");
		p_file->store_line("\tvar base_catch_rate = CaptureManager.get_catch_rate(pokemon.species_name)");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply Pokeball modifier");
		p_file->store_line("\tvar pokeball_modifier = pokeball.get_effective_catch_rate(pokemon)");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply status condition modifiers");
		p_file->store_line("\tvar status_modifier = _get_status_modifier(pokemon)");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply HP modifier");
		p_file->store_line("\tvar hp_modifier = _get_hp_modifier(pokemon)");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate final catch rate");
		p_file->store_line("\tvar catch_rate = base_catch_rate * pokeball_modifier * status_modifier * hp_modifier");
		p_file->store_line("\tresult.catch_rate = catch_rate");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for critical capture (rare event)");
		p_file->store_line("\tif randf() < 0.05:  # 5% chance");
		p_file->store_line("\t\tresult.critical_capture = true");
		p_file->store_line("\t\tresult.success = randf() < (catch_rate / 255.0)");
		p_file->store_line("\t\tresult.shakes = 1 if result.success else 0");
		p_file->store_line("\t\treturn result");
		p_file->store_line("\t");
		p_file->store_line("\t# Normal capture calculation");
		p_file->store_line("\tvar shake_probability = catch_rate / 255.0");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate number of shakes (0-3)");
		p_file->store_line("\tfor shake in range(4):");
		p_file->store_line("\t\tif randf() < shake_probability:");
		p_file->store_line("\t\t\tresult.shakes += 1");
		p_file->store_line("\t\telse:");
		p_file->store_line("\t\t\tbreak");
		p_file->store_line("\t");
		p_file->store_line("\t# Success if all 4 shakes pass");
		p_file->store_line("\tresult.success = (result.shakes >= 4)");
		p_file->store_line("\tresult.shakes = min(result.shakes, 3)  # Max 3 visible shakes");
		p_file->store_line("\t");
		p_file->store_line("\treturn result");
		p_file->store_line("");
		p_file->store_line("func _get_status_modifier(pokemon: Pokemon) -> float:");
		p_file->store_line("\t# Status conditions affect catch rate");
		p_file->store_line("\tfor effect in pokemon.status_effects:");
		p_file->store_line("\t\tmatch effect.effect_type:");
		p_file->store_line("\t\t\t\"sleep\", \"freeze\":");
		p_file->store_line("\t\t\t\treturn 2.0");
		p_file->store_line("\t\t\t\"paralysis\", \"burn\", \"poison\":");
		p_file->store_line("\t\t\t\treturn 1.5");
		p_file->store_line("\t");
		p_file->store_line("\treturn 1.0");
		p_file->store_line("");
		p_file->store_line("func _get_hp_modifier(pokemon: Pokemon) -> float:");
		p_file->store_line("\t# Lower HP increases catch rate");
		p_file->store_line("\tvar hp_percentage = float(pokemon.current_hp) / float(pokemon.max_hp)");
		p_file->store_line("\t");
		p_file->store_line("\tif hp_percentage <= 0.1:");
		p_file->store_line("\t\treturn 3.0");
		p_file->store_line("\telif hp_percentage <= 0.25:");
		p_file->store_line("\t\treturn 2.0");
		p_file->store_line("\telif hp_percentage <= 0.5:");
		p_file->store_line("\t\treturn 1.5");
		p_file->store_line("\telse:");
		p_file->store_line("\t\treturn 1.0");

	} else if (filename == "WildPokemon.gd") {
		p_file->store_line("# WildPokemon.gd");
		p_file->store_line("# Generated by Lupine Engine - Wild Pokemon Encounter");
		p_file->store_line("# Handles wild Pokemon encounters and behavior");
		p_file->store_line("");
		p_file->store_line("class_name WildPokemon");
		p_file->store_line("extends CharacterBody2D");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal encounter_started(pokemon: Pokemon)");
		p_file->store_line("signal pokemon_fled()");
		p_file->store_line("");
		p_file->store_line("# Pokemon data");
		p_file->store_line("@export var pokemon: Pokemon");
		p_file->store_line("@export var encounter_chance: float = 0.1");
		p_file->store_line("@export var can_flee: bool = true");
		p_file->store_line("@export var flee_chance: float = 0.1");
		p_file->store_line("");
		p_file->store_line("# Movement");
		p_file->store_line("@export var movement_speed: float = 50.0");
		p_file->store_line("@export var wander_radius: float = 100.0");
		p_file->store_line("var home_position: Vector2");
		p_file->store_line("var movement_timer: float = 0.0");
		p_file->store_line("var movement_direction: Vector2 = Vector2.ZERO");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\thome_position = global_position");
		p_file->store_line("\t_choose_new_direction()");
		p_file->store_line("");
		p_file->store_line("func _physics_process(delta):");
		p_file->store_line("\t# Simple wandering AI");
		p_file->store_line("\tmovement_timer -= delta");
		p_file->store_line("\t");
		p_file->store_line("\tif movement_timer <= 0:");
		p_file->store_line("\t\t_choose_new_direction()");
		p_file->store_line("\t");
		p_file->store_line("\t# Move");
		p_file->store_line("\tvelocity = movement_direction * movement_speed");
		p_file->store_line("\t");
		p_file->store_line("\t# Keep within wander radius");
		p_file->store_line("\tif global_position.distance_to(home_position) > wander_radius:");
		p_file->store_line("\t\tmovement_direction = (home_position - global_position).normalized()");
		p_file->store_line("\t");
		p_file->store_line("\tmove_and_slide()");
		p_file->store_line("");
		p_file->store_line("func _choose_new_direction():");
		p_file->store_line("\tmovement_timer = randf_range(1.0, 3.0)");
		p_file->store_line("\t");
		p_file->store_line("\t# 30% chance to stop, 70% chance to move");
		p_file->store_line("\tif randf() < 0.3:");
		p_file->store_line("\t\tmovement_direction = Vector2.ZERO");
		p_file->store_line("\telse:");
		p_file->store_line("\t\tmovement_direction = Vector2(randf_range(-1, 1), randf_range(-1, 1)).normalized()");
		p_file->store_line("");
		p_file->store_line("func setup_pokemon(species_name: String, level: int = 5):");
		p_file->store_line("\tif MonsterManager:");
		p_file->store_line("\t\tpokemon = MonsterManager.create_pokemon(species_name, level)");
		p_file->store_line("");
		p_file->store_line("func trigger_encounter():");
		p_file->store_line("\tif pokemon:");
		p_file->store_line("\t\tencounter_started.emit(pokemon)");
		p_file->store_line("");
		p_file->store_line("func attempt_flee() -> bool:");
		p_file->store_line("\tif can_flee and randf() < flee_chance:");
		p_file->store_line("\t\tpokemon_fled.emit()");
		p_file->store_line("\t\tqueue_free()");
		p_file->store_line("\t\treturn true");
		p_file->store_line("\treturn false");

	}
}

void MonsterCaptureSystemModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "Pokeball") {
		p_file->store_line("[gd_scene load_steps=3 format=3 uid=\"uid://pokeball_scene\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/capture/Pokeball.gd\" id=\"1_pokeball_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CircleShape2D\" id=\"CircleShape2D_1\"]");
		p_file->store_line("radius = 16.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"Pokeball\" type=\"RigidBody2D\"]");
		p_file->store_line("script = ExtResource(\"1_pokeball_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("modulate = Color(1, 0.2, 0.2, 1)");
		p_file->store_line("scale = Vector2(32, 32)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"CircleShape2D_1\")");

	} else if (p_scene_name == "CaptureAnimation") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://capture_animation\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/capture/CaptureAnimation.gd\" id=\"1_capture_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"CaptureAnimation\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_capture_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"PokeballSprite\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("position = Vector2(400, 300)");
		p_file->store_line("modulate = Color(1, 0.2, 0.2, 1)");
		p_file->store_line("scale = Vector2(32, 32)");
		p_file->store_line("");
		p_file->store_line("[node name=\"AnimationPlayer\" type=\"AnimationPlayer\" parent=\".\"]");

	} else if (p_scene_name == "CaptureUI") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://capture_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/CaptureUI.gd\" id=\"1_capture_ui_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"CaptureUI\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_capture_ui_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"CaptureAnimation\" type=\"Control\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 8");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("");
		p_file->store_line("[node name=\"MessageLabel\" type=\"Label\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 7");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 1.0");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = -200.0");
		p_file->store_line("offset_top = -100.0");
		p_file->store_line("offset_right = 200.0");
		p_file->store_line("text = \"Capture Message\"");
		p_file->store_line("horizontal_alignment = 1");
	}
}
