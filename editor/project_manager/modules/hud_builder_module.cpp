#include "hud_builder_module.h"

void HUDBuilderModule::generate_script(Ref<FileAccess> p_file) {
	p_file->store_line("# HUDBuilder.gd");
	p_file->store_line("# Generated by Lupine Engine - HUD Builder System");
	p_file->store_line("# Modular HUD system with real-time data binding");
	p_file->store_line("");
	p_file->store_line("extends Node");
	p_file->store_line("");
	p_file->store_line("# Signals");
	p_file->store_line("signal hud_component_added(component_name: String, component: Control)");
	p_file->store_line("signal hud_component_removed(component_name: String)");
	p_file->store_line("signal hud_data_updated(data_key: String, value: Variant)");
	p_file->store_line("");
	p_file->store_line("# HUD registry");
	p_file->store_line("var registered_components: Dictionary = {}");
	p_file->store_line("var active_components: Dictionary = {}");
	p_file->store_line("var hud_container: Control");
	p_file->store_line("");
	p_file->store_line("# Data binding");
	p_file->store_line("var bound_data: Dictionary = {}");
	p_file->store_line("var data_bindings: Dictionary = {}");
	p_file->store_line("");
	p_file->store_line("# Configuration");
	p_file->store_line("var hud_config: Dictionary = {}");
	p_file->store_line("var current_layout: String = \"default\"");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\t# Load HUD configuration");
	p_file->store_line("\tload_hud_config()");
	p_file->store_line("\t");
	p_file->store_line("\t# Create HUD container");
	p_file->store_line("\tsetup_hud_container()");
	p_file->store_line("\t");
	p_file->store_line("\tprint(\"HUD Builder initialized\")");
	p_file->store_line("");
	p_file->store_line("func setup_hud_container():");
	p_file->store_line("\t# Create main HUD container");
	p_file->store_line("\thud_container = Control.new()");
	p_file->store_line("\thud_container.name = \"HUDContainer\"");
	p_file->store_line("\thud_container.set_anchors_and_offsets_preset(Control.PRESET_FULL_RECT)");
	p_file->store_line("\thud_container.mouse_filter = Control.MOUSE_FILTER_IGNORE");
	p_file->store_line("\t");
	p_file->store_line("\t# Add to scene tree");
	p_file->store_line("\tget_tree().current_scene.add_child(hud_container)");
	p_file->store_line("");
	p_file->store_line("# Register a HUD component");
	p_file->store_line("func register_component(component_name: String, component_scene: PackedScene, default_position: Vector2 = Vector2.ZERO):");
	p_file->store_line("\tregistered_components[component_name] = {");
	p_file->store_line("\t\t\"scene\": component_scene,");
	p_file->store_line("\t\t\"default_position\": default_position,");
	p_file->store_line("\t\t\"instance\": null");
	p_file->store_line("\t}");
	p_file->store_line("\tprint(\"Registered HUD component: \", component_name)");
	p_file->store_line("");
	p_file->store_line("# Add a component to the HUD");
	p_file->store_line("func add_component(component_name: String, position: Vector2 = Vector2.ZERO) -> Control:");
	p_file->store_line("\tif not registered_components.has(component_name):");
	p_file->store_line("\t\tprint(\"Error: HUD component not registered: \", component_name)");
	p_file->store_line("\t\treturn null");
	p_file->store_line("\t");
	p_file->store_line("\tif active_components.has(component_name):");
	p_file->store_line("\t\tprint(\"Warning: Component already active: \", component_name)");
	p_file->store_line("\t\treturn active_components[component_name]");
	p_file->store_line("\t");
	p_file->store_line("\tvar component_info = registered_components[component_name]");
	p_file->store_line("\tvar component_instance = component_info.scene.instantiate()");
	p_file->store_line("\t");
	p_file->store_line("\t# Set position");
	p_file->store_line("\tif position == Vector2.ZERO:");
	p_file->store_line("\t\tposition = component_info.default_position");
	p_file->store_line("\tcomponent_instance.position = position");
	p_file->store_line("\t");
	p_file->store_line("\t# Add to HUD");
	p_file->store_line("\thud_container.add_child(component_instance)");
	p_file->store_line("\tactive_components[component_name] = component_instance");
	p_file->store_line("\t");
	p_file->store_line("\t# Connect data binding if component supports it");
	p_file->store_line("\tif component_instance.has_method(\"bind_data\"):");
	p_file->store_line("\t\tsetup_component_data_binding(component_name, component_instance)");
	p_file->store_line("\t");
	p_file->store_line("\temit_signal(\"hud_component_added\", component_name, component_instance)");
	p_file->store_line("\treturn component_instance");
	p_file->store_line("");
	p_file->store_line("# Remove a component from the HUD");
	p_file->store_line("func remove_component(component_name: String):");
	p_file->store_line("\tif not active_components.has(component_name):");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tvar component = active_components[component_name]");
	p_file->store_line("\tcomponent.queue_free()");
	p_file->store_line("\tactive_components.erase(component_name)");
	p_file->store_line("\t");
	p_file->store_line("\temit_signal(\"hud_component_removed\", component_name)");
	p_file->store_line("");
	p_file->store_line("# Get an active component");
	p_file->store_line("func get_component(component_name: String) -> Control:");
	p_file->store_line("\treturn active_components.get(component_name, null)");
	p_file->store_line("");
	p_file->store_line("# Update data for bound components");
	p_file->store_line("func update_data(data_key: String, value: Variant):");
	p_file->store_line("\tbound_data[data_key] = value");
	p_file->store_line("\t");
	p_file->store_line("\t# Update all bound components");
	p_file->store_line("\tif data_bindings.has(data_key):");
	p_file->store_line("\t\tfor binding in data_bindings[data_key]:");
	p_file->store_line("\t\t\tvar component = binding.component");
	p_file->store_line("\t\t\tvar method = binding.method");
	p_file->store_line("\t\t\tif is_instance_valid(component) and component.has_method(method):");
	p_file->store_line("\t\t\t\tcomponent.call(method, value)");
	p_file->store_line("\t");
	p_file->store_line("\temit_signal(\"hud_data_updated\", data_key, value)");
	p_file->store_line("");
	p_file->store_line("# Bind component to data");
	p_file->store_line("func bind_component_data(component: Control, data_key: String, update_method: String):");
	p_file->store_line("\tif not data_bindings.has(data_key):");
	p_file->store_line("\t\tdata_bindings[data_key] = []");
	p_file->store_line("\t");
	p_file->store_line("\tdata_bindings[data_key].append({");
	p_file->store_line("\t\t\"component\": component,");
	p_file->store_line("\t\t\"method\": update_method");
	p_file->store_line("\t})");
	p_file->store_line("\t");
	p_file->store_line("\t# Send current value if available");
	p_file->store_line("\tif bound_data.has(data_key):");
	p_file->store_line("\t\tif component.has_method(update_method):");
	p_file->store_line("\t\t\tcomponent.call(update_method, bound_data[data_key])");
	p_file->store_line("");
	p_file->store_line("# Setup data binding for a component");
	p_file->store_line("func setup_component_data_binding(component_name: String, component: Control):");
	p_file->store_line("\t# Call the component's bind_data method if it exists");
	p_file->store_line("\tif component.has_method(\"bind_data\"):");
	p_file->store_line("\t\tcomponent.call(\"bind_data\", self)");
	p_file->store_line("");
	p_file->store_line("# Load HUD configuration");
	p_file->store_line("func load_hud_config():");
	p_file->store_line("\tvar config_path = \"res://data/hud/hud_config.json\"");
	p_file->store_line("\tif FileAccess.file_exists(config_path):");
	p_file->store_line("\t\tvar file = FileAccess.open(config_path, FileAccess.READ)");
	p_file->store_line("\t\tif file:");
	p_file->store_line("\t\t\tvar json_text = file.get_as_text()");
	p_file->store_line("\t\t\tfile.close()");
	p_file->store_line("\t\t\t");
	p_file->store_line("\t\t\tvar json = JSON.new()");
	p_file->store_line("\t\t\tvar parse_result = json.parse(json_text)");
	p_file->store_line("\t\t\tif parse_result == OK:");
	p_file->store_line("\t\t\t\thud_config = json.data");
	p_file->store_line("\t\t\t\tprint(\"HUD configuration loaded\")");
	p_file->store_line("\t\t\telse:");
	p_file->store_line("\t\t\t\tprint(\"Error parsing HUD config: \", json.error_string)");
	p_file->store_line("\telse:");
	p_file->store_line("\t\tprint(\"HUD config file not found, using defaults\")");
	p_file->store_line("");
	p_file->store_line("# Apply layout configuration");
	p_file->store_line("func apply_layout(layout_name: String):");
	p_file->store_line("\tcurrent_layout = layout_name");
	p_file->store_line("\t");
	p_file->store_line("\tif hud_config.has(\"layouts\") and hud_config.layouts.has(layout_name):");
	p_file->store_line("\t\tvar layout_data = hud_config.layouts[layout_name]");
	p_file->store_line("\t\t");
	p_file->store_line("\t\t# Apply component positions");
	p_file->store_line("\t\tfor component_name in layout_data:");
	p_file->store_line("\t\t\tvar component_config = layout_data[component_name]");
	p_file->store_line("\t\t\tif active_components.has(component_name):");
	p_file->store_line("\t\t\t\tvar component = active_components[component_name]");
	p_file->store_line("\t\t\t\tif component_config.has(\"position\"):");
	p_file->store_line("\t\t\t\t\tcomponent.position = Vector2(component_config.position.x, component_config.position.y)");
	p_file->store_line("\t\t\t\tif component_config.has(\"visible\"):");
	p_file->store_line("\t\t\t\t\tcomponent.visible = component_config.visible");
	p_file->store_line("");
	p_file->store_line("# Show/hide HUD");
	p_file->store_line("func set_hud_visible(visible: bool):");
	p_file->store_line("\tif hud_container:");
	p_file->store_line("\t\thud_container.visible = visible");
	p_file->store_line("");
	p_file->store_line("# Get current data value");
	p_file->store_line("func get_data(data_key: String) -> Variant:");
	p_file->store_line("\treturn bound_data.get(data_key, null)");
	p_file->store_line("");
	p_file->store_line("# Clear all components");
	p_file->store_line("func clear_all_components():");
	p_file->store_line("\tfor component_name in active_components.keys():");
	p_file->store_line("\t\tremove_component(component_name)");
}

void HUDBuilderModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "HUDBase") {
		// Generate base HUD scene template
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://hud_base\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/HUDBase.gd\" id=\"1_hud_base_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"HUDBase\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("mouse_filter = 2");
		p_file->store_line("script = ExtResource(\"1_hud_base_script\")");
	} else if (p_scene_name == "HealthBar") {
		// Generate health bar scene
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://health_bar\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/HealthBar.gd\" id=\"1_health_bar_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"HealthBar\" type=\"Control\"]");
		p_file->store_line("custom_minimum_size = Vector2(200, 30)");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 2");
		p_file->store_line("anchor_top = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 20.0");
		p_file->store_line("offset_top = -50.0");
		p_file->store_line("offset_right = 220.0");
		p_file->store_line("offset_bottom = -20.0");
		p_file->store_line("script = ExtResource(\"1_health_bar_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"NinePatchRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"HealthProgress\" type=\"ProgressBar\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 2.0");
		p_file->store_line("offset_top = 2.0");
		p_file->store_line("offset_right = -2.0");
		p_file->store_line("offset_bottom = -2.0");
		p_file->store_line("value = 100.0");
		p_file->store_line("show_percentage = false");
		p_file->store_line("");
		p_file->store_line("[node name=\"HealthLabel\" type=\"Label\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("text = \"100 / 100\"");
		p_file->store_line("horizontal_alignment = 1");
		p_file->store_line("vertical_alignment = 1");
	} else if (p_scene_name == "MiniMap") {
		// Generate mini-map scene
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://mini_map\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/MiniMap.gd\" id=\"1_mini_map_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"MiniMap\" type=\"Control\"]");
		p_file->store_line("custom_minimum_size = Vector2(150, 150)");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 1");
		p_file->store_line("anchor_left = 1.0");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("offset_left = -170.0");
		p_file->store_line("offset_top = 20.0");
		p_file->store_line("offset_right = -20.0");
		p_file->store_line("offset_bottom = 170.0");
		p_file->store_line("script = ExtResource(\"1_mini_map_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("color = Color(0, 0, 0, 0.7)");
		p_file->store_line("");
		p_file->store_line("[node name=\"MapViewport\" type=\"SubViewport\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 5.0");
		p_file->store_line("offset_top = 5.0");
		p_file->store_line("offset_right = -5.0");
		p_file->store_line("offset_bottom = -5.0");
		p_file->store_line("render_target_update_mode = 3");
		p_file->store_line("");
		p_file->store_line("[node name=\"MapCamera\" type=\"Camera2D\" parent=\"MapViewport\"]");
		p_file->store_line("zoom = Vector2(0.1, 0.1)");
	} else if (p_scene_name == "InventorySlot") {
		// Generate inventory slot scene
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://inventory_slot\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/InventorySlot.gd\" id=\"1_inventory_slot_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"InventorySlot\" type=\"Control\"]");
		p_file->store_line("custom_minimum_size = Vector2(64, 64)");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("script = ExtResource(\"1_inventory_slot_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"SlotBackground\" type=\"NinePatchRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"ItemIcon\" type=\"TextureRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 4.0");
		p_file->store_line("offset_top = 4.0");
		p_file->store_line("offset_right = -4.0");
		p_file->store_line("offset_bottom = -4.0");
		p_file->store_line("expand_mode = 1");
		p_file->store_line("");
		p_file->store_line("[node name=\"QuantityLabel\" type=\"Label\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 3");
		p_file->store_line("anchor_left = 1.0");
		p_file->store_line("anchor_top = 1.0");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = -20.0");
		p_file->store_line("offset_top = -20.0");
		p_file->store_line("text = \"1\"");
		p_file->store_line("horizontal_alignment = 2");
		p_file->store_line("vertical_alignment = 2");
	} else if (p_scene_name == "StatusDisplay") {
		// Generate status display scene
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://status_display\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/StatusDisplay.gd\" id=\"1_status_display_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"StatusDisplay\" type=\"VBoxContainer\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 1");
		p_file->store_line("anchor_left = 1.0");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("offset_left = -200.0");
		p_file->store_line("offset_top = 200.0");
		p_file->store_line("offset_bottom = 300.0");
		p_file->store_line("script = ExtResource(\"1_status_display_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"LevelLabel\" type=\"Label\" parent=\".\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Level: 1\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"ExperienceLabel\" type=\"Label\" parent=\".\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"EXP: 0 / 100\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"GoldLabel\" type=\"Label\" parent=\".\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Gold: 0\"");
	} else if (p_scene_name == "ActionBar") {
		// Generate action bar scene
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://action_bar\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/ActionBar.gd\" id=\"1_action_bar_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"ActionBar\" type=\"HBoxContainer\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 7");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 1.0");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = -200.0");
		p_file->store_line("offset_top = -80.0");
		p_file->store_line("offset_right = 200.0");
		p_file->store_line("offset_bottom = -20.0");
		p_file->store_line("script = ExtResource(\"1_action_bar_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"ActionSlot1\" type=\"Button\" parent=\".\"]");
		p_file->store_line("custom_minimum_size = Vector2(60, 60)");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"1\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"ActionSlot2\" type=\"Button\" parent=\".\"]");
		p_file->store_line("custom_minimum_size = Vector2(60, 60)");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"2\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"ActionSlot3\" type=\"Button\" parent=\".\"]");
		p_file->store_line("custom_minimum_size = Vector2(60, 60)");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"3\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"ActionSlot4\" type=\"Button\" parent=\".\"]");
		p_file->store_line("custom_minimum_size = Vector2(60, 60)");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"4\"");
	}
}

void HUDBuilderModule::generate_file(Ref<FileAccess> p_file, const String &p_relative_path) {
	String filename = p_relative_path.get_file();

	if (filename == "HUDBase.gd") {
		// Generate base HUD script
		p_file->store_line("# HUDBase.gd");
		p_file->store_line("# Generated by Lupine Engine - Base HUD Script");
		p_file->store_line("# Base class for HUD components");
		p_file->store_line("");
		p_file->store_line("extends Control");
		p_file->store_line("class_name HUDBase");
		p_file->store_line("");
		p_file->store_line("# HUD properties");
		p_file->store_line("@export var component_name: String = \"\"");
		p_file->store_line("@export var auto_register: bool = true");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tif auto_register and HUDBuilder:");
		p_file->store_line("\t\tHUDBuilder.register_component(component_name, PackedScene.new())");
		p_file->store_line("");
		p_file->store_line("# Override in derived classes for data binding");
		p_file->store_line("func bind_data(hud_builder: Node):");
		p_file->store_line("\tpass");
	} else if (filename == "HealthBar.gd") {
		// Generate health bar script
		p_file->store_line("# HealthBar.gd");
		p_file->store_line("# Generated by Lupine Engine - Health Bar Script");
		p_file->store_line("# Health bar HUD component");
		p_file->store_line("");
		p_file->store_line("extends HUDBase");
		p_file->store_line("");
		p_file->store_line("# UI references");
		p_file->store_line("@onready var health_progress = $HealthProgress");
		p_file->store_line("@onready var health_label = $HealthLabel");
		p_file->store_line("");
		p_file->store_line("# Health data");
		p_file->store_line("var current_health: float = 100.0");
		p_file->store_line("var max_health: float = 100.0");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tcomponent_name = \"health_bar\"");
		p_file->store_line("\tsuper._ready()");
		p_file->store_line("");
		p_file->store_line("func bind_data(hud_builder: Node):");
		p_file->store_line("\thud_builder.bind_component_data(self, \"current_health\", \"update_current_health\")");
		p_file->store_line("\thud_builder.bind_component_data(self, \"max_health\", \"update_max_health\")");
		p_file->store_line("");
		p_file->store_line("func update_current_health(value: float):");
		p_file->store_line("\tcurrent_health = value");
		p_file->store_line("\tupdate_display()");
		p_file->store_line("");
		p_file->store_line("func update_max_health(value: float):");
		p_file->store_line("\tmax_health = value");
		p_file->store_line("\tupdate_display()");
		p_file->store_line("");
		p_file->store_line("func update_display():");
		p_file->store_line("\tif health_progress:");
		p_file->store_line("\t\thealth_progress.max_value = max_health");
		p_file->store_line("\t\thealth_progress.value = current_health");
		p_file->store_line("\t");
		p_file->store_line("\tif health_label:");
		p_file->store_line("\t\thealth_label.text = str(int(current_health)) + \" / \" + str(int(max_health))");
	} else {
		// Default file generation
		LupineModuleBase::generate_file(p_file, p_relative_path);
	}
}
