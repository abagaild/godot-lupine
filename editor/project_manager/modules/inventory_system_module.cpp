#include "inventory_system_module.h"

void InventorySystemModule::generate_script(Ref<FileAccess> p_file) {
	p_file->store_line("# InventorySystem.gd");
	p_file->store_line("# Generated by Lupine Engine - Inventory System");
	p_file->store_line("# RPG inventory system with items, equipment, and consumables");
	p_file->store_line("");
	p_file->store_line("extends Node");
	p_file->store_line("");
	p_file->store_line("# Signals");
	p_file->store_line("signal item_added(item: Dictionary, quantity: int)");
	p_file->store_line("signal item_removed(item: Dictionary, quantity: int)");
	p_file->store_line("signal item_used(item: Dictionary)");
	p_file->store_line("signal equipment_changed(slot: String, item: Dictionary)");
	p_file->store_line("signal inventory_full()");
	p_file->store_line("");
	p_file->store_line("# Inventory data");
	p_file->store_line("var inventory_slots: int = 30");
	p_file->store_line("var items: Array[Dictionary] = []");
	p_file->store_line("var equipped_items: Dictionary = {}");
	p_file->store_line("");
	p_file->store_line("# Item database");
	p_file->store_line("var item_database: Dictionary = {}");
	p_file->store_line("");
	p_file->store_line("# Equipment slots");
	p_file->store_line("var equipment_slots: Array[String] = [");
	p_file->store_line("\t\"weapon\", \"armor\", \"helmet\", \"boots\", \"accessory\"");
	p_file->store_line("]");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\t_load_item_database()");
	p_file->store_line("\t_initialize_inventory()");
	p_file->store_line("");
	p_file->store_line("func _initialize_inventory():");
	p_file->store_line("\t# Initialize empty inventory");
	p_file->store_line("\titems.resize(inventory_slots)");
	p_file->store_line("\tfor i in range(inventory_slots):");
	p_file->store_line("\t\titems[i] = {}");
	p_file->store_line("\t");
	p_file->store_line("\t# Initialize equipment slots");
	p_file->store_line("\tfor slot in equipment_slots:");
	p_file->store_line("\t\tequipped_items[slot] = {}");
	p_file->store_line("");
	p_file->store_line("func add_item(item_id: String, quantity: int = 1) -> bool:");
	p_file->store_line("\tif not item_database.has(item_id):");
	p_file->store_line("\t\tprint(\"Item not found in database: \", item_id)");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\tvar item_data = item_database[item_id].duplicate()");
	p_file->store_line("\t");
	p_file->store_line("\t# Check if item is stackable");
	p_file->store_line("\tif item_data.get(\"stackable\", false):");
	p_file->store_line("\t\t# Try to stack with existing items");
	p_file->store_line("\t\tfor i in range(inventory_slots):");
	p_file->store_line("\t\t\tif items[i].has(\"id\") and items[i].id == item_id:");
	p_file->store_line("\t\t\t\tvar max_stack = item_data.get(\"max_stack\", 99)");
	p_file->store_line("\t\t\t\tvar current_quantity = items[i].get(\"quantity\", 1)");
	p_file->store_line("\t\t\t\tvar can_add = min(quantity, max_stack - current_quantity)");
	p_file->store_line("\t\t\t\t");
	p_file->store_line("\t\t\t\tif can_add > 0:");
	p_file->store_line("\t\t\t\t\titems[i].quantity = current_quantity + can_add");
	p_file->store_line("\t\t\t\t\tquantity -= can_add");
	p_file->store_line("\t\t\t\t\titem_added.emit(item_data, can_add)");
	p_file->store_line("\t\t\t\t\t");
	p_file->store_line("\t\t\t\t\tif quantity <= 0:");
	p_file->store_line("\t\t\t\t\t\treturn true");
	p_file->store_line("\t");
	p_file->store_line("\t# Add to empty slots");
	p_file->store_line("\twhile quantity > 0:");
	p_file->store_line("\t\tvar empty_slot = _find_empty_slot()");
	p_file->store_line("\t\tif empty_slot == -1:");
	p_file->store_line("\t\t\tinventory_full.emit()");
	p_file->store_line("\t\t\treturn false");
	p_file->store_line("\t\t");
	p_file->store_line("\t\tvar max_stack = item_data.get(\"max_stack\", 1) if item_data.get(\"stackable\", false) else 1");
	p_file->store_line("\t\tvar add_quantity = min(quantity, max_stack)");
	p_file->store_line("\t\t");
	p_file->store_line("\t\titems[empty_slot] = item_data.duplicate()");
	p_file->store_line("\t\titems[empty_slot].quantity = add_quantity");
	p_file->store_line("\t\t");
	p_file->store_line("\t\tquantity -= add_quantity");
	p_file->store_line("\t\titem_added.emit(item_data, add_quantity)");
	p_file->store_line("\t");
	p_file->store_line("\treturn true");
	p_file->store_line("");
	p_file->store_line("func remove_item(item_id: String, quantity: int = 1) -> bool:");
	p_file->store_line("\tvar removed_quantity = 0");
	p_file->store_line("\t");
	p_file->store_line("\tfor i in range(inventory_slots):");
	p_file->store_line("\t\tif items[i].has(\"id\") and items[i].id == item_id:");
	p_file->store_line("\t\t\tvar current_quantity = items[i].get(\"quantity\", 1)");
	p_file->store_line("\t\t\tvar remove_amount = min(quantity - removed_quantity, current_quantity)");
	p_file->store_line("\t\t\t");
	p_file->store_line("\t\t\titems[i].quantity = current_quantity - remove_amount");
	p_file->store_line("\t\t\tremoved_quantity += remove_amount");
	p_file->store_line("\t\t\t");
	p_file->store_line("\t\t\tif items[i].quantity <= 0:");
	p_file->store_line("\t\t\t\titems[i] = {}");
	p_file->store_line("\t\t\t");
	p_file->store_line("\t\t\tif removed_quantity >= quantity:");
	p_file->store_line("\t\t\t\tbreak");
	p_file->store_line("\t");
	p_file->store_line("\tif removed_quantity > 0:");
	p_file->store_line("\t\tvar item_data = item_database.get(item_id, {})");
	p_file->store_line("\t\titem_removed.emit(item_data, removed_quantity)");
	p_file->store_line("\t\treturn true");
	p_file->store_line("\t");
	p_file->store_line("\treturn false");
	p_file->store_line("");
	p_file->store_line("func has_item(item_id: String, quantity: int = 1) -> bool:");
	p_file->store_line("\tvar total_quantity = 0");
	p_file->store_line("\t");
	p_file->store_line("\tfor item in items:");
	p_file->store_line("\t\tif item.has(\"id\") and item.id == item_id:");
	p_file->store_line("\t\t\ttotal_quantity += item.get(\"quantity\", 1)");
	p_file->store_line("\t");
	p_file->store_line("\treturn total_quantity >= quantity");
	p_file->store_line("");
	p_file->store_line("func use_item(slot_index: int) -> bool:");
	p_file->store_line("\tif slot_index < 0 or slot_index >= inventory_slots:");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\tvar item = items[slot_index]");
	p_file->store_line("\tif not item.has(\"id\"):");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle different item types");
	p_file->store_line("\tmatch item.get(\"type\", \"misc\"):");
	p_file->store_line("\t\t\"consumable\":");
	p_file->store_line("\t\t\t_use_consumable(item)");
	p_file->store_line("\t\t\tremove_item(item.id, 1)");
	p_file->store_line("\t\t\"equipment\":");
	p_file->store_line("\t\t\t_equip_item(item, slot_index)");
	p_file->store_line("\t\t_:");
	p_file->store_line("\t\t\tprint(\"Cannot use item: \", item.name)");
	p_file->store_line("\t\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\titem_used.emit(item)");
	p_file->store_line("\treturn true");
	p_file->store_line("");
	p_file->store_line("func _use_consumable(item: Dictionary):");
	p_file->store_line("\t# Apply consumable effects");
	p_file->store_line("\tif item.has(\"effects\"):");
	p_file->store_line("\t\tfor effect in item.effects:");
	p_file->store_line("\t\t\tmatch effect.type:");
	p_file->store_line("\t\t\t\t\"heal\":");
	p_file->store_line("\t\t\t\t\tif PlayerStats:");
	p_file->store_line("\t\t\t\t\t\tPlayerStats.heal(effect.amount)");
	p_file->store_line("\t\t\t\t\"restore_stamina\":");
	p_file->store_line("\t\t\t\t\tif PlayerStats:");
	p_file->store_line("\t\t\t\t\t\tPlayerStats.restore_stamina(effect.amount)");
	p_file->store_line("\t\t\t\t\"restore_mana\":");
	p_file->store_line("\t\t\t\t\tif PlayerStats:");
	p_file->store_line("\t\t\t\t\t\tPlayerStats.restore_mana(effect.amount)");
	p_file->store_line("");
	p_file->store_line("func _equip_item(item: Dictionary, slot_index: int):");
	p_file->store_line("\tvar equipment_slot = item.get(\"equipment_slot\", \"\")");
	p_file->store_line("\tif equipment_slot == \"\":");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Unequip current item if any");
	p_file->store_line("\tif equipped_items[equipment_slot].has(\"id\"):");
	p_file->store_line("\t\tadd_item(equipped_items[equipment_slot].id, 1)");
	p_file->store_line("\t");
	p_file->store_line("\t# Equip new item");
	p_file->store_line("\tequipped_items[equipment_slot] = item.duplicate()");
	p_file->store_line("\titems[slot_index] = {}");
	p_file->store_line("\t");
	p_file->store_line("\t# Apply equipment stats");
	p_file->store_line("\t_apply_equipment_stats()");
	p_file->store_line("\t");
	p_file->store_line("\tequipment_changed.emit(equipment_slot, item)");
	p_file->store_line("");
	p_file->store_line("func _apply_equipment_stats():");
	p_file->store_line("\t# Reset and reapply all equipment bonuses");
	p_file->store_line("\tif PlayerStats:");
	p_file->store_line("\t\tPlayerStats.reset_equipment_bonuses()");
	p_file->store_line("\t\t");
	p_file->store_line("\t\tfor slot in equipment_slots:");
	p_file->store_line("\t\t\tvar item = equipped_items[slot]");
	p_file->store_line("\t\t\tif item.has(\"stats\"):");
	p_file->store_line("\t\t\t\tfor stat in item.stats:");
	p_file->store_line("\t\t\t\t\tPlayerStats.add_equipment_bonus(stat, item.stats[stat])");
	p_file->store_line("");
	p_file->store_line("func _find_empty_slot() -> int:");
	p_file->store_line("\tfor i in range(inventory_slots):");
	p_file->store_line("\t\tif not items[i].has(\"id\"):");
	p_file->store_line("\t\t\treturn i");
	p_file->store_line("\treturn -1");
	p_file->store_line("");
	p_file->store_line("func _load_item_database():");
	p_file->store_line("\t# Load item data from JSON");
	p_file->store_line("\tvar file_path = \"res://data/items.json\"");
	p_file->store_line("\tvar file = FileAccess.open(file_path, FileAccess.READ)");
	p_file->store_line("\tif file:");
	p_file->store_line("\t\tvar json_text = file.get_as_text()");
	p_file->store_line("\t\tfile.close()");
	p_file->store_line("\t\tvar json = JSON.new()");
	p_file->store_line("\t\tvar parse_result = json.parse(json_text)");
	p_file->store_line("\t\tif parse_result == OK:");
	p_file->store_line("\t\t\titem_database = json.data");
	p_file->store_line("\telse:");
	p_file->store_line("\t\t# Create default items if file doesn't exist");
	p_file->store_line("\t\t_create_default_items()");
	p_file->store_line("");
	p_file->store_line("func _create_default_items():");
	p_file->store_line("\t# Create some default items");
	p_file->store_line("\titem_database = {");
	p_file->store_line("\t\t\"health_potion\": {");
	p_file->store_line("\t\t\t\"id\": \"health_potion\",");
	p_file->store_line("\t\t\t\"name\": \"Health Potion\",");
	p_file->store_line("\t\t\t\"description\": \"Restores 50 HP\",");
	p_file->store_line("\t\t\t\"type\": \"consumable\",");
	p_file->store_line("\t\t\t\"stackable\": true,");
	p_file->store_line("\t\t\t\"max_stack\": 10,");
	p_file->store_line("\t\t\t\"effects\": [{\"type\": \"heal\", \"amount\": 50}]");
	p_file->store_line("\t\t},");
	p_file->store_line("\t\t\"iron_sword\": {");
	p_file->store_line("\t\t\t\"id\": \"iron_sword\",");
	p_file->store_line("\t\t\t\"name\": \"Iron Sword\",");
	p_file->store_line("\t\t\t\"description\": \"A sturdy iron sword\",");
	p_file->store_line("\t\t\t\"type\": \"equipment\",");
	p_file->store_line("\t\t\t\"equipment_slot\": \"weapon\",");
	p_file->store_line("\t\t\t\"stats\": {\"attack\": 10}");
	p_file->store_line("\t\t}");
	p_file->store_line("\t}");
	p_file->store_line("");
	p_file->store_line("func get_inventory_data() -> Dictionary:");
	p_file->store_line("\treturn {");
	p_file->store_line("\t\t\"items\": items,");
	p_file->store_line("\t\t\"equipped_items\": equipped_items");
	p_file->store_line("\t}");
	p_file->store_line("");
	p_file->store_line("func load_inventory_data(data: Dictionary):");
	p_file->store_line("\tif data.has(\"items\"):");
	p_file->store_line("\t\titems = data.items");
	p_file->store_line("\tif data.has(\"equipped_items\"):");
	p_file->store_line("\t\tequipped_items = data.equipped_items");
	p_file->store_line("\t\t_apply_equipment_stats()");
}

void InventorySystemModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "InventoryUI") {
		// Generate inventory UI scene
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://inventory_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/InventoryUI.gd\" id=\"1_inventory_ui_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"InventoryUI\" type=\"Control\"]");
		p_file->store_line("process_mode = 2");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_inventory_ui_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("color = Color(0, 0, 0, 0.5)");
		p_file->store_line("");
		p_file->store_line("[node name=\"InventoryPanel\" type=\"Panel\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 8");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = -300.0");
		p_file->store_line("offset_top = -200.0");
		p_file->store_line("offset_right = 300.0");
		p_file->store_line("offset_bottom = 200.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"VBox\" type=\"VBoxContainer\" parent=\"InventoryPanel\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 10.0");
		p_file->store_line("offset_top = 10.0");
		p_file->store_line("offset_right = -10.0");
		p_file->store_line("offset_bottom = -10.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"Title\" type=\"Label\" parent=\"InventoryPanel/VBox\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Inventory\"");
		p_file->store_line("horizontal_alignment = 1");
		p_file->store_line("");
		p_file->store_line("[node name=\"ItemGrid\" type=\"GridContainer\" parent=\"InventoryPanel/VBox\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_vertical = 3");
		p_file->store_line("columns = 6");
	} else if (p_scene_name == "ItemSlot") {
		// Generate item slot scene
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://item_slot\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/ItemSlot.gd\" id=\"1_item_slot_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"ItemSlot\" type=\"Control\"]");
		p_file->store_line("custom_minimum_size = Vector2(64, 64)");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 0");
		p_file->store_line("script = ExtResource(\"1_item_slot_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"Panel\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"ItemIcon\" type=\"TextureRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 4.0");
		p_file->store_line("offset_top = 4.0");
		p_file->store_line("offset_right = -4.0");
		p_file->store_line("offset_bottom = -4.0");
		p_file->store_line("expand_mode = 1");
		p_file->store_line("");
		p_file->store_line("[node name=\"QuantityLabel\" type=\"Label\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 3");
		p_file->store_line("anchor_left = 1.0");
		p_file->store_line("anchor_top = 1.0");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = -20.0");
		p_file->store_line("offset_top = -20.0");
		p_file->store_line("text = \"1\"");
		p_file->store_line("horizontal_alignment = 2");
	}
}
