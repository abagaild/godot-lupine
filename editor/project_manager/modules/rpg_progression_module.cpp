#include "rpg_progression_module.h"

void RPGProgressionModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();

	if (filename == "ProgressionSystem.gd") {
		p_file->store_line("# ProgressionSystem.gd");
		p_file->store_line("# Generated by Lupine Engine - RPG Progression System");
		p_file->store_line("# Character progression, skill trees, and equipment upgrades");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal skill_learned(skill_id: String)");
		p_file->store_line("signal skill_upgraded(skill_id: String, new_level: int)");
		p_file->store_line("signal stat_bonus_applied(stat_name: String, bonus: float)");
		p_file->store_line("signal equipment_upgraded(item_id: String, upgrade_level: int)");
		p_file->store_line("");
		p_file->store_line("# Progression data");
		p_file->store_line("var learned_skills: Dictionary = {}");
		p_file->store_line("var skill_points: int = 0");
		p_file->store_line("var stat_bonuses: Dictionary = {}");
		p_file->store_line("var equipment_upgrades: Dictionary = {}");
		p_file->store_line("");
		p_file->store_line("# Skill trees");
		p_file->store_line("var skill_trees: Dictionary = {}");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Connect to player stats for level ups");
		p_file->store_line("\tif PlayerStats:");
		p_file->store_line("\t\tPlayerStats.level_changed.connect(_on_level_changed)");
		p_file->store_line("\t");
		p_file->store_line("\t# Initialize skill trees");
		p_file->store_line("\t_initialize_skill_trees()");
		p_file->store_line("");
		p_file->store_line("func _on_level_changed(new_level: int):");
		p_file->store_line("\t# Give skill points on level up");
		p_file->store_line("\tskill_points += 1");
		p_file->store_line("\t");
		p_file->store_line("\t# Show level up notification");
		p_file->store_line("\tif PopupManager:");
		p_file->store_line("\t\tPopupManager.show_notification(\"Level Up! You gained a skill point.\")");
		p_file->store_line("");
		p_file->store_line("func learn_skill(skill_id: String) -> bool:");
		p_file->store_line("\tvar skill_data = _get_skill_data(skill_id)");
		p_file->store_line("\tif not skill_data:");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Check requirements");
		p_file->store_line("\tif not _can_learn_skill(skill_id):");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Spend skill points");
		p_file->store_line("\tvar cost = skill_data.get(\"cost\", 1)");
		p_file->store_line("\tskill_points -= cost");
		p_file->store_line("\t");
		p_file->store_line("\t# Learn the skill");
		p_file->store_line("\tlearned_skills[skill_id] = 1");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply skill effects");
		p_file->store_line("\t_apply_skill_effects(skill_id, 1)");
		p_file->store_line("\t");
		p_file->store_line("\tskill_learned.emit(skill_id)");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func upgrade_skill(skill_id: String) -> bool:");
		p_file->store_line("\tif not learned_skills.has(skill_id):");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\tvar current_level = learned_skills[skill_id]");
		p_file->store_line("\tvar skill_data = _get_skill_data(skill_id)");
		p_file->store_line("\tvar max_level = skill_data.get(\"max_level\", 5)");
		p_file->store_line("\t");
		p_file->store_line("\tif current_level >= max_level:");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Check skill point cost");
		p_file->store_line("\tvar cost = skill_data.get(\"upgrade_cost\", 1)");
		p_file->store_line("\tif skill_points < cost:");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Upgrade skill");
		p_file->store_line("\tskill_points -= cost");
		p_file->store_line("\tlearned_skills[skill_id] += 1");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply upgraded effects");
		p_file->store_line("\t_apply_skill_effects(skill_id, learned_skills[skill_id])");
		p_file->store_line("\t");
		p_file->store_line("\tskill_upgraded.emit(skill_id, learned_skills[skill_id])");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func has_skill(skill_id: String) -> bool:");
		p_file->store_line("\treturn learned_skills.has(skill_id)");
		p_file->store_line("");
		p_file->store_line("func get_skill_level(skill_id: String) -> int:");
		p_file->store_line("\treturn learned_skills.get(skill_id, 0)");
		p_file->store_line("");
		p_file->store_line("func upgrade_equipment(item_id: String) -> bool:");
		p_file->store_line("\tif not InventorySystem or not InventorySystem.has_item(item_id):");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\tvar current_level = equipment_upgrades.get(item_id, 0)");
		p_file->store_line("\tvar upgrade_cost = _get_upgrade_cost(item_id, current_level)");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if player has enough gold");
		p_file->store_line("\tif PlayerStats and PlayerStats.current_gold < upgrade_cost:");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Spend gold");
		p_file->store_line("\tPlayerStats.spend_gold(upgrade_cost)");
		p_file->store_line("\t");
		p_file->store_line("\t# Upgrade equipment");
		p_file->store_line("\tequipment_upgrades[item_id] = current_level + 1");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply upgrade bonuses");
		p_file->store_line("\t_apply_equipment_upgrade(item_id, equipment_upgrades[item_id])");
		p_file->store_line("\t");
		p_file->store_line("\tequipment_upgraded.emit(item_id, equipment_upgrades[item_id])");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func get_stat_bonus(stat_name: String) -> float:");
		p_file->store_line("\treturn stat_bonuses.get(stat_name, 0.0)");
		p_file->store_line("");
		p_file->store_line("func _can_learn_skill(skill_id: String) -> bool:");
		p_file->store_line("\tvar skill_data = _get_skill_data(skill_id)");
		p_file->store_line("\tif not skill_data:");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if already learned");
		p_file->store_line("\tif learned_skills.has(skill_id):");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Check skill point cost");
		p_file->store_line("\tvar cost = skill_data.get(\"cost\", 1)");
		p_file->store_line("\tif skill_points < cost:");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Check prerequisites");
		p_file->store_line("\tvar prerequisites = skill_data.get(\"prerequisites\", [])");
		p_file->store_line("\tfor prereq in prerequisites:");
		p_file->store_line("\t\tif not learned_skills.has(prereq):");
		p_file->store_line("\t\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Check level requirement");
		p_file->store_line("\tvar level_req = skill_data.get(\"level_requirement\", 1)");
		p_file->store_line("\tif PlayerStats and PlayerStats.current_level < level_req:");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func _apply_skill_effects(skill_id: String, level: int):");
		p_file->store_line("\tvar skill_data = _get_skill_data(skill_id)");
		p_file->store_line("\tif not skill_data:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply stat bonuses");
		p_file->store_line("\tvar bonuses = skill_data.get(\"stat_bonuses\", {})");
		p_file->store_line("\tfor stat_name in bonuses:");
		p_file->store_line("\t\tvar bonus_per_level = bonuses[stat_name]");
		p_file->store_line("\t\tvar total_bonus = bonus_per_level * level");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tif not stat_bonuses.has(stat_name):");
		p_file->store_line("\t\t\tstat_bonuses[stat_name] = 0.0");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tstat_bonuses[stat_name] += total_bonus");
		p_file->store_line("\t\tstat_bonus_applied.emit(stat_name, total_bonus)");
		p_file->store_line("");
		p_file->store_line("func _apply_equipment_upgrade(item_id: String, upgrade_level: int):");
		p_file->store_line("\t# Apply equipment upgrade bonuses");
		p_file->store_line("\t# This would typically modify the item's stats");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("func _get_skill_data(skill_id: String) -> Dictionary:");
		p_file->store_line("\t# Return skill data from skill trees");
		p_file->store_line("\tfor tree_name in skill_trees:");
		p_file->store_line("\t\tvar tree = skill_trees[tree_name]");
		p_file->store_line("\t\tif tree.has(\"skills\") and tree.skills.has(skill_id):");
		p_file->store_line("\t\t\treturn tree.skills[skill_id]");
		p_file->store_line("\treturn {}");
		p_file->store_line("");
		p_file->store_line("func _get_upgrade_cost(item_id: String, current_level: int) -> int:");
		p_file->store_line("\t# Calculate upgrade cost based on current level");
		p_file->store_line("\treturn (current_level + 1) * 100");
		p_file->store_line("");
		p_file->store_line("func _initialize_skill_trees():");
		p_file->store_line("\t# Initialize default skill trees");
		p_file->store_line("\tskill_trees[\"combat\"] = {");
		p_file->store_line("\t\t\"name\": \"Combat\",");
		p_file->store_line("\t\t\"skills\": {");
		p_file->store_line("\t\t\t\"power_attack\": {");
		p_file->store_line("\t\t\t\t\"name\": \"Power Attack\",");
		p_file->store_line("\t\t\t\t\"description\": \"Increases attack damage\",");
		p_file->store_line("\t\t\t\t\"cost\": 1,");
		p_file->store_line("\t\t\t\t\"max_level\": 5,");
		p_file->store_line("\t\t\t\t\"stat_bonuses\": {\"attack_damage\": 5.0}");
		p_file->store_line("\t\t\t},");
		p_file->store_line("\t\t\t\"improved_defense\": {");
		p_file->store_line("\t\t\t\t\"name\": \"Improved Defense\",");
		p_file->store_line("\t\t\t\t\"description\": \"Increases health and defense\",");
		p_file->store_line("\t\t\t\t\"cost\": 1,");
		p_file->store_line("\t\t\t\t\"max_level\": 5,");
		p_file->store_line("\t\t\t\t\"stat_bonuses\": {\"max_health\": 10.0, \"defense\": 2.0}");
		p_file->store_line("\t\t\t}");
		p_file->store_line("\t\t}");
		p_file->store_line("\t}");
	}
}

void RPGProgressionModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "LevelUpUI") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://level_up_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/LevelUpUI.gd\" id=\"1_levelup_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"LevelUpUI\" type=\"Control\"]");
		p_file->store_line("process_mode = 2");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_levelup_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("color = Color(0, 0, 0, 0.5)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Panel\" type=\"Panel\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 8");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = -200.0");
		p_file->store_line("offset_top = -150.0");
		p_file->store_line("offset_right = 200.0");
		p_file->store_line("offset_bottom = 150.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"Title\" type=\"Label\" parent=\"Panel\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 10");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("offset_bottom = 40.0");
		p_file->store_line("text = \"LEVEL UP!\"");
		p_file->store_line("horizontal_alignment = 1");
		p_file->store_line("vertical_alignment = 1");
	}
}
