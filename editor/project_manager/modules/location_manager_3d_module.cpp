#include "location_manager_3d_module.h"

void LocationManager3DModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();
	
	if (filename == "LocationManager3D.gd") {
		p_file->store_line("# LocationManager3D.gd");
		p_file->store_line("# Generated by Lupine Engine - 3D Location Manager");
		p_file->store_line("# Manages level transitions and location discovery");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal level_changed(old_level: String, new_level: String)");
		p_file->store_line("signal level_loading_started(level_name: String)");
		p_file->store_line("signal level_loading_finished(level_name: String)");
		p_file->store_line("signal transition_started()");
		p_file->store_line("signal transition_finished()");
		p_file->store_line("");
		p_file->store_line("# Current state");
		p_file->store_line("var current_level: String = \"\"");
		p_file->store_line("var current_location: Location3D = null");
		p_file->store_line("var is_transitioning: bool = false");
		p_file->store_line("");
		p_file->store_line("# Level data");
		p_file->store_line("var level_database: Dictionary = {}");
		p_file->store_line("var spawn_points: Dictionary = {}");
		p_file->store_line("");
		p_file->store_line("# Transition settings");
		p_file->store_line("var transition_duration: float = 1.0");
		p_file->store_line("var use_loading_screen: bool = true");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t_load_level_database()");
		p_file->store_line("\t_register_spawn_points()");
		p_file->store_line("");
		p_file->store_line("func change_level(level_path: String, spawn_point: String = \"default\", transition_type: String = \"fade\"):");
		p_file->store_line("\tif is_transitioning:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tis_transitioning = true");
		p_file->store_line("\ttransition_started.emit()");
		p_file->store_line("\t");
		p_file->store_line("\t# Start transition effect");
		p_file->store_line("\tif ScreenEffects:");
		p_file->store_line("\t\tmatch transition_type:");
		p_file->store_line("\t\t\t\"fade\":");
		p_file->store_line("\t\t\t\tawait ScreenEffects.fade_to_black(transition_duration * 0.5)");
		p_file->store_line("\t\t\t\"white\":");
		p_file->store_line("\t\t\t\tawait ScreenEffects.fade_to_white(transition_duration * 0.5)");
		p_file->store_line("\t");
		p_file->store_line("\t# Load new level");
		p_file->store_line("\tvar old_level = current_level");
		p_file->store_line("\tcurrent_level = level_path.get_file().get_basename()");
		p_file->store_line("\t");
		p_file->store_line("\tlevel_loading_started.emit(current_level)");
		p_file->store_line("\t");
		p_file->store_line("\t# Change scene");
		p_file->store_line("\tget_tree().change_scene_to_file(level_path)");
		p_file->store_line("\t");
		p_file->store_line("\t# Wait for scene to load");
		p_file->store_line("\tawait get_tree().process_frame");
		p_file->store_line("\tawait get_tree().process_frame");
		p_file->store_line("\t");
		p_file->store_line("\t# Position player at spawn point");
		p_file->store_line("\t_position_player_at_spawn(spawn_point)");
		p_file->store_line("\t");
		p_file->store_line("\t# Update current location");
		p_file->store_line("\tcurrent_location = get_tree().get_first_node_in_group(\"location\")");
		p_file->store_line("\t");
		p_file->store_line("\t# Discover location if new");
		p_file->store_line("\tif current_location and not WorldState3D.is_location_discovered(current_level):");
		p_file->store_line("\t\tWorldState3D.discover_location(current_level)");
		p_file->store_line("\t");
		p_file->store_line("\tlevel_loading_finished.emit(current_level)");
		p_file->store_line("\t");
		p_file->store_line("\t# End transition effect");
		p_file->store_line("\tif ScreenEffects:");
		p_file->store_line("\t\tmatch transition_type:");
		p_file->store_line("\t\t\t\"fade\":");
		p_file->store_line("\t\t\t\tawait ScreenEffects.fade_from_black(transition_duration * 0.5)");
		p_file->store_line("\t\t\t\"white\":");
		p_file->store_line("\t\t\t\tawait ScreenEffects.fade_from_white(transition_duration * 0.5)");
		p_file->store_line("\t");
		p_file->store_line("\tis_transitioning = false");
		p_file->store_line("\ttransition_finished.emit()");
		p_file->store_line("\tlevel_changed.emit(old_level, current_level)");
		p_file->store_line("");
		p_file->store_line("func teleport_player(target_position: Vector3, target_rotation: Vector3 = Vector3.ZERO):");
		p_file->store_line("\tvar player = get_tree().get_first_node_in_group(\"player\")");
		p_file->store_line("\tif player:");
		p_file->store_line("\t\tplayer.global_position = target_position");
		p_file->store_line("\t\tif target_rotation != Vector3.ZERO:");
		p_file->store_line("\t\t\tplayer.rotation = target_rotation");
		p_file->store_line("");
		p_file->store_line("func get_spawn_point(spawn_name: String) -> Vector3:");
		p_file->store_line("\tvar spawn_points_in_scene = get_tree().get_nodes_in_group(\"spawn_points\")");
		p_file->store_line("\tfor spawn_point in spawn_points_in_scene:");
		p_file->store_line("\t\tif spawn_point.has_method(\"get_spawn_name\") and spawn_point.get_spawn_name() == spawn_name:");
		p_file->store_line("\t\t\treturn spawn_point.global_position");
		p_file->store_line("\t");
		p_file->store_line("\t# Return default spawn if not found");
		p_file->store_line("\tfor spawn_point in spawn_points_in_scene:");
		p_file->store_line("\t\tif spawn_point.has_method(\"get_spawn_name\") and spawn_point.get_spawn_name() == \"default\":");
		p_file->store_line("\t\t\treturn spawn_point.global_position");
		p_file->store_line("\t");
		p_file->store_line("\treturn Vector3.ZERO");
		p_file->store_line("");
		p_file->store_line("func register_spawn_point(spawn_name: String, position: Vector3):");
		p_file->store_line("\tspawn_points[spawn_name] = position");
		p_file->store_line("");
		p_file->store_line("func get_level_info(level_name: String) -> Dictionary:");
		p_file->store_line("\treturn level_database.get(level_name, {})");
		p_file->store_line("");
		p_file->store_line("func is_level_unlocked(level_name: String) -> bool:");
		p_file->store_line("\tvar level_info = get_level_info(level_name)");
		p_file->store_line("\tif not level_info.has(\"unlock_conditions\"):");
		p_file->store_line("\t\treturn true");
		p_file->store_line("\t");
		p_file->store_line("\tfor condition in level_info.unlock_conditions:");
		p_file->store_line("\t\tif not WorldState3D.check_condition(condition):");
		p_file->store_line("\t\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func get_unlocked_levels() -> Array:");
		p_file->store_line("\tvar unlocked = []");
		p_file->store_line("\tfor level_name in level_database.keys():");
		p_file->store_line("\t\tif is_level_unlocked(level_name):");
		p_file->store_line("\t\t\tunlocked.append(level_name)");
		p_file->store_line("\treturn unlocked");
		p_file->store_line("");
		p_file->store_line("func _position_player_at_spawn(spawn_name: String):");
		p_file->store_line("\tvar spawn_position = get_spawn_point(spawn_name)");
		p_file->store_line("\tif spawn_position != Vector3.ZERO:");
		p_file->store_line("\t\tteleport_player(spawn_position)");
		p_file->store_line("");
		p_file->store_line("func _register_spawn_points():");
		p_file->store_line("\t# This will be called when entering a new level");
		p_file->store_line("\tvar spawn_nodes = get_tree().get_nodes_in_group(\"spawn_points\")");
		p_file->store_line("\tfor spawn_node in spawn_nodes:");
		p_file->store_line("\t\tif spawn_node.has_method(\"get_spawn_name\"):");
		p_file->store_line("\t\t\tregister_spawn_point(spawn_node.get_spawn_name(), spawn_node.global_position)");
		p_file->store_line("");
		p_file->store_line("func _load_level_database():");
		p_file->store_line("\t# Load level data from JSON");
		p_file->store_line("\tvar file_path = \"res://data/levels.json\"");
		p_file->store_line("\tvar file = FileAccess.open(file_path, FileAccess.READ)");
		p_file->store_line("\tif file:");
		p_file->store_line("\t\tvar json_text = file.get_as_text()");
		p_file->store_line("\t\tfile.close()");
		p_file->store_line("\t\tvar json = JSON.new()");
		p_file->store_line("\t\tvar parse_result = json.parse(json_text)");
		p_file->store_line("\t\tif parse_result == OK:");
		p_file->store_line("\t\t\tlevel_database = json.data");
		p_file->store_line("\telse:");
		p_file->store_line("\t\t_create_default_levels()");
		p_file->store_line("");
		p_file->store_line("func _create_default_levels():");
		p_file->store_line("\tlevel_database = {");
		p_file->store_line("\t\t\"hub_world\": {");
		p_file->store_line("\t\t\t\"name\": \"Castle Grounds\",");
		p_file->store_line("\t\t\t\"description\": \"The central hub connecting all worlds\",");
		p_file->store_line("\t\t\t\"path\": \"res://scenes/levels/HubWorld.tscn\",");
		p_file->store_line("\t\t\t\"type\": \"hub\"");
		p_file->store_line("\t\t},");
		p_file->store_line("\t\t\"level_1\": {");
		p_file->store_line("\t\t\t\"name\": \"Grassy Plains\",");
		p_file->store_line("\t\t\t\"description\": \"A peaceful meadow perfect for beginners\",");
		p_file->store_line("\t\t\t\"path\": \"res://scenes/levels/Level1.tscn\",");
		p_file->store_line("\t\t\t\"type\": \"platformer\",");
		p_file->store_line("\t\t\t\"stars_required\": 0");
		p_file->store_line("\t\t},");
		p_file->store_line("\t\t\"level_2\": {");
		p_file->store_line("\t\t\t\"name\": \"Mountain Peak\",");
		p_file->store_line("\t\t\t\"description\": \"Climb to new heights\",");
		p_file->store_line("\t\t\t\"path\": \"res://scenes/levels/Level2.tscn\",");
		p_file->store_line("\t\t\t\"type\": \"platformer\",");
		p_file->store_line("\t\t\t\"stars_required\": 3,");
		p_file->store_line("\t\t\t\"unlock_conditions\": [");
		p_file->store_line("\t\t\t\t{\"type\": \"variable\", \"variable\": \"stars_collected\", \"operator\": \">=\", \"value\": 3}");
		p_file->store_line("\t\t\t]");
		p_file->store_line("\t\t}");
		p_file->store_line("\t}");
	} else if (filename == "LevelTransition3D.gd") {
		p_file->store_line("# LevelTransition3D.gd");
		p_file->store_line("# Generated by Lupine Engine - 3D Level Transition");
		p_file->store_line("# Handles transitions between levels and areas");
		p_file->store_line("");
		p_file->store_line("extends Area3D");
		p_file->store_line("class_name LevelTransition3D");
		p_file->store_line("");
		p_file->store_line("# Transition properties");
		p_file->store_line("@export var target_level: String = \"\"");
		p_file->store_line("@export var target_spawn_point: String = \"default\"");
		p_file->store_line("@export var transition_type: String = \"fade\"  # fade, white, instant");
		p_file->store_line("@export var require_interaction: bool = false");
		p_file->store_line("@export var unlock_conditions: Array[Dictionary] = []");
		p_file->store_line("");
		p_file->store_line("# Visual feedback");
		p_file->store_line("@export var show_prompt: bool = true");
		p_file->store_line("@export var prompt_text: String = \"Press E to enter\"");
		p_file->store_line("");
		p_file->store_line("# State");
		p_file->store_line("var player_in_range: bool = false");
		p_file->store_line("var is_unlocked: bool = true");
		p_file->store_line("");
		p_file->store_line("# Components");
		p_file->store_line("@onready var prompt_label: Label3D = $PromptLabel");
		p_file->store_line("@onready var particles: GPUParticles3D = $Particles");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tbody_entered.connect(_on_player_entered)");
		p_file->store_line("\tbody_exited.connect(_on_player_exited)");
		p_file->store_line("\t");
		p_file->store_line("\t# Check unlock conditions");
		p_file->store_line("\t_check_unlock_conditions()");
		p_file->store_line("\t");
		p_file->store_line("\t# Setup prompt");
		p_file->store_line("\tif prompt_label:");
		p_file->store_line("\t\tprompt_label.text = prompt_text");
		p_file->store_line("\t\tprompt_label.visible = false");
		p_file->store_line("\t");
		p_file->store_line("\t# Connect to world state changes");
		p_file->store_line("\tWorldState3D.world_variable_changed.connect(_on_world_variable_changed)");
		p_file->store_line("");
		p_file->store_line("func _input(event):");
		p_file->store_line("\tif event.is_action_pressed(\"interact\") and _can_transition():");
		p_file->store_line("\t\t_perform_transition()");
		p_file->store_line("");
		p_file->store_line("func _on_player_entered(body: Node3D):");
		p_file->store_line("\tif body.is_in_group(\"player\"):");
		p_file->store_line("\t\tplayer_in_range = true");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tif not is_unlocked:");
		p_file->store_line("\t\t\t_show_locked_message()");
		p_file->store_line("\t\t\treturn");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tif require_interaction:");
		p_file->store_line("\t\t\t_show_interaction_prompt()");
		p_file->store_line("\t\telse:");
		p_file->store_line("\t\t\t# Auto-transition");
		p_file->store_line("\t\t\t_perform_transition()");
		p_file->store_line("");
		p_file->store_line("func _on_player_exited(body: Node3D):");
		p_file->store_line("\tif body.is_in_group(\"player\"):");
		p_file->store_line("\t\tplayer_in_range = false");
		p_file->store_line("\t\t_hide_interaction_prompt()");
		p_file->store_line("");
		p_file->store_line("func _can_transition() -> bool:");
		p_file->store_line("\treturn player_in_range and is_unlocked and (not require_interaction or true)");
		p_file->store_line("");
		p_file->store_line("func _perform_transition():");
		p_file->store_line("\tif target_level == \"\":");
		p_file->store_line("\t\tprint(\"No target level set for transition\")");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Hide prompt");
		p_file->store_line("\t_hide_interaction_prompt()");
		p_file->store_line("\t");
		p_file->store_line("\t# Perform transition");
		p_file->store_line("\tLocationManager3D.change_level(target_level, target_spawn_point, transition_type)");
		p_file->store_line("");
		p_file->store_line("func _check_unlock_conditions():");
		p_file->store_line("\tis_unlocked = true");
		p_file->store_line("\t");
		p_file->store_line("\tfor condition in unlock_conditions:");
		p_file->store_line("\t\tif not WorldState3D.check_condition(condition):");
		p_file->store_line("\t\t\tis_unlocked = false");
		p_file->store_line("\t\t\tbreak");
		p_file->store_line("\t");
		p_file->store_line("\t# Update visual state");
		p_file->store_line("\t_update_visual_state()");
		p_file->store_line("");
		p_file->store_line("func _update_visual_state():");
		p_file->store_line("\tif particles:");
		p_file->store_line("\t\tparticles.emitting = is_unlocked");
		p_file->store_line("\t");
		p_file->store_line("\t# Change color or material based on unlock state");
		p_file->store_line("\tmodulate = Color.WHITE if is_unlocked else Color.GRAY");
		p_file->store_line("");
		p_file->store_line("func _show_interaction_prompt():");
		p_file->store_line("\tif prompt_label and show_prompt:");
		p_file->store_line("\t\tprompt_label.visible = true");
		p_file->store_line("");
		p_file->store_line("func _hide_interaction_prompt():");
		p_file->store_line("\tif prompt_label:");
		p_file->store_line("\t\tprompt_label.visible = false");
		p_file->store_line("");
		p_file->store_line("func _show_locked_message():");
		p_file->store_line("\tif PopupManager:");
		p_file->store_line("\t\tPopupManager.show_notification(\"Locked\", \"You need more stars to enter this area\")");
		p_file->store_line("");
		p_file->store_line("func _on_world_variable_changed(var_name: String, old_value, new_value):");
		p_file->store_line("\t# Re-check unlock conditions when world state changes");
		p_file->store_line("\t_check_unlock_conditions()");
	}
}

void LocationManager3DModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "LevelTransition3D") {
		p_file->store_line("[gd_scene load_steps=4 format=3 uid=\"uid://level_transition_3d\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/world/LevelTransition3D.gd\" id=\"1_transition_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"BoxShape3D\" id=\"BoxShape3D_1\"]");
		p_file->store_line("size = Vector3(2, 3, 2)");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"QuadMesh\" id=\"QuadMesh_1\"]");
		p_file->store_line("size = Vector2(2, 3)");
		p_file->store_line("");
		p_file->store_line("[node name=\"LevelTransition3D\" type=\"Area3D\"]");
		p_file->store_line("script = ExtResource(\"1_transition_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape3D\" type=\"CollisionShape3D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"BoxShape3D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"VisualIndicator\" type=\"MeshInstance3D\" parent=\".\"]");
		p_file->store_line("mesh = SubResource(\"QuadMesh_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"PromptLabel\" type=\"Label3D\" parent=\".\"]");
		p_file->store_line("transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2, 0)");
		p_file->store_line("text = \"Press E to enter\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"Particles\" type=\"GPUParticles3D\" parent=\".\"]");
		p_file->store_line("emitting = false");
	}
}
