#include "player_stats_module.h"

void PlayerStatsModule::generate_script(Ref<FileAccess> p_file) {
	p_file->store_line("# PlayerStats.gd");
	p_file->store_line("# Generated by Lupine Engine - Player Statistics System");
	p_file->store_line("# Manages health, stamina, and other player stats with easy extensibility");
	p_file->store_line("");
	p_file->store_line("extends Node");
	p_file->store_line("# Global PlayerStats - Registered as autoload");
	p_file->store_line("");
	p_file->store_line("# Signals for stat changes");
	p_file->store_line("signal health_changed(new_value: float, max_value: float)");
	p_file->store_line("signal stamina_changed(new_value: float, max_value: float)");
	p_file->store_line("signal mana_changed(new_value: float, max_value: float)");
	p_file->store_line("signal stat_depleted(stat_name: String)");
	p_file->store_line("signal stat_restored(stat_name: String)");
	p_file->store_line("");
	p_file->store_line("# Health system");
	p_file->store_line("@export var max_health: float = 100.0");
	p_file->store_line("@export var health_regen_rate: float = 0.0  # Health per second");
	p_file->store_line("var current_health: float");
	p_file->store_line("");
	p_file->store_line("# Stamina system");
	p_file->store_line("@export var max_stamina: float = 100.0");
	p_file->store_line("@export var stamina_regen_rate: float = 20.0  # Stamina per second");
	p_file->store_line("@export var stamina_regen_delay: float = 1.0  # Delay before regen starts");
	p_file->store_line("var current_stamina: float");
	p_file->store_line("var stamina_regen_timer: float = 0.0");
	p_file->store_line("");
	p_file->store_line("# Mana system (easily replicable for other stats)");
	p_file->store_line("@export var max_mana: float = 50.0");
	p_file->store_line("@export var mana_regen_rate: float = 10.0  # Mana per second");
	p_file->store_line("@export var mana_regen_delay: float = 2.0  # Delay before regen starts");
	p_file->store_line("var current_mana: float");
	p_file->store_line("var mana_regen_timer: float = 0.0");
	p_file->store_line("");
	p_file->store_line("# Status flags");
	p_file->store_line("var is_dead: bool = false");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\t# Initialize stats to maximum");
	p_file->store_line("\tcurrent_health = max_health");
	p_file->store_line("\tcurrent_stamina = max_stamina");
	p_file->store_line("\tcurrent_mana = max_mana");
	p_file->store_line("");
	p_file->store_line("func _process(delta: float):");
	p_file->store_line("\tif is_dead:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Health regeneration");
	p_file->store_line("\tif health_regen_rate > 0 and current_health < max_health:");
	p_file->store_line("\t\tmodify_health(health_regen_rate * delta)");
	p_file->store_line("\t");
	p_file->store_line("\t# Stamina regeneration");
	p_file->store_line("\tif stamina_regen_timer <= 0 and current_stamina < max_stamina:");
	p_file->store_line("\t\tmodify_stamina(stamina_regen_rate * delta)");
	p_file->store_line("\telse:");
	p_file->store_line("\t\tstamina_regen_timer -= delta");
	p_file->store_line("\t");
	p_file->store_line("\t# Mana regeneration");
	p_file->store_line("\tif mana_regen_timer <= 0 and current_mana < max_mana:");
	p_file->store_line("\t\tmodify_mana(mana_regen_rate * delta)");
	p_file->store_line("\telse:");
	p_file->store_line("\t\tmana_regen_timer -= delta");
	p_file->store_line("");
	p_file->store_line("# Health management");
	p_file->store_line("func modify_health(amount: float) -> bool:");
	p_file->store_line("\tif is_dead:");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\tvar old_health = current_health");
	p_file->store_line("\tcurrent_health = clamp(current_health + amount, 0, max_health)");
	p_file->store_line("\t");
	p_file->store_line("\tif current_health != old_health:");
	p_file->store_line("\t\thealth_changed.emit(current_health, max_health)");
	p_file->store_line("\t");
	p_file->store_line("\tif current_health <= 0:");
	p_file->store_line("\t\tis_dead = true");
	p_file->store_line("\t\tstat_depleted.emit(\"health\")");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\treturn true");
	p_file->store_line("");
	p_file->store_line("func heal(amount: float) -> bool:");
	p_file->store_line("\treturn modify_health(amount)");
	p_file->store_line("");
	p_file->store_line("func take_damage(amount: float) -> bool:");
	p_file->store_line("\treturn modify_health(-amount)");
	p_file->store_line("");
	p_file->store_line("# Stamina management");
	p_file->store_line("func modify_stamina(amount: float) -> bool:");
	p_file->store_line("\tif is_dead:");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\tvar old_stamina = current_stamina");
	p_file->store_line("\tcurrent_stamina = clamp(current_stamina + amount, 0, max_stamina)");
	p_file->store_line("\t");
	p_file->store_line("\tif current_stamina != old_stamina:");
	p_file->store_line("\t\tstamina_changed.emit(current_stamina, max_stamina)");
	p_file->store_line("\t");
	p_file->store_line("\t# Reset regen timer when stamina is used");
	p_file->store_line("\tif amount < 0:");
	p_file->store_line("\t\tstamina_regen_timer = stamina_regen_delay");
	p_file->store_line("\t");
	p_file->store_line("\tif current_stamina <= 0:");
	p_file->store_line("\t\tstat_depleted.emit(\"stamina\")");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\treturn true");
	p_file->store_line("");
	p_file->store_line("func use_stamina(amount: float) -> bool:");
	p_file->store_line("\tif current_stamina >= amount:");
	p_file->store_line("\t\treturn modify_stamina(-amount)");
	p_file->store_line("\treturn false");
	p_file->store_line("");
	p_file->store_line("func has_stamina(amount: float) -> bool:");
	p_file->store_line("\treturn current_stamina >= amount");
	p_file->store_line("");
	p_file->store_line("# Mana management (template for other stats)");
	p_file->store_line("func modify_mana(amount: float) -> bool:");
	p_file->store_line("\tif is_dead:");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\tvar old_mana = current_mana");
	p_file->store_line("\tcurrent_mana = clamp(current_mana + amount, 0, max_mana)");
	p_file->store_line("\t");
	p_file->store_line("\tif current_mana != old_mana:");
	p_file->store_line("\t\tmana_changed.emit(current_mana, max_mana)");
	p_file->store_line("\t");
	p_file->store_line("\t# Reset regen timer when mana is used");
	p_file->store_line("\tif amount < 0:");
	p_file->store_line("\t\tmana_regen_timer = mana_regen_delay");
	p_file->store_line("\t");
	p_file->store_line("\tif current_mana <= 0:");
	p_file->store_line("\t\tstat_depleted.emit(\"mana\")");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\treturn true");
	p_file->store_line("");
	p_file->store_line("func use_mana(amount: float) -> bool:");
	p_file->store_line("\tif current_mana >= amount:");
	p_file->store_line("\t\treturn modify_mana(-amount)");
	p_file->store_line("\treturn false");
	p_file->store_line("");
	p_file->store_line("func has_mana(amount: float) -> bool:");
	p_file->store_line("\treturn current_mana >= amount");
	p_file->store_line("");
	p_file->store_line("# Utility functions");
	p_file->store_line("func get_health_percentage() -> float:");
	p_file->store_line("\treturn current_health / max_health if max_health > 0 else 0");
	p_file->store_line("");
	p_file->store_line("func get_stamina_percentage() -> float:");
	p_file->store_line("\treturn current_stamina / max_stamina if max_stamina > 0 else 0");
	p_file->store_line("");
	p_file->store_line("func get_mana_percentage() -> float:");
	p_file->store_line("\treturn current_mana / max_mana if max_mana > 0 else 0");
	p_file->store_line("");
	p_file->store_line("func restore_all_stats():");
	p_file->store_line("\tcurrent_health = max_health");
	p_file->store_line("\tcurrent_stamina = max_stamina");
	p_file->store_line("\tcurrent_mana = max_mana");
	p_file->store_line("\tis_dead = false");
	p_file->store_line("\thealth_changed.emit(current_health, max_health)");
	p_file->store_line("\tstamina_changed.emit(current_stamina, max_stamina)");
	p_file->store_line("\tmana_changed.emit(current_mana, max_mana)");
	p_file->store_line("\tstat_restored.emit(\"all\")");
}

void PlayerStatsModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	// PlayerStats is a component, not a standalone scene
	p_file->store_line("[gd_scene format=3]");
	p_file->store_line("");
	p_file->store_line("[node name=\"PlayerStats\" type=\"Node\"]");
	p_file->store_line("script = preload(\"res://scripts/PlayerStats.gd\")");
}
