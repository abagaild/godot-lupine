#include "camera_sidescroller_module.h"

void CameraSidescrollerModule::generate_script(Ref<FileAccess> p_file) {
	p_file->store_line("# CameraSidescroller.gd");
	p_file->store_line("# Generated by Lupine Engine - Sidescroller Camera Controller");
	p_file->store_line("# 2D sidescroller camera with player following, zoom controls, and lookahead");
	p_file->store_line("");
	p_file->store_line("extends Camera2D");
	p_file->store_line("class_name CameraSidescroller");
	p_file->store_line("");
	p_file->store_line("# Camera settings");
	p_file->store_line("@export var follow_speed: float = 8.0");
	p_file->store_line("@export var zoom_speed: float = 2.0");
	p_file->store_line("@export var min_zoom: float = 0.5");
	p_file->store_line("@export var max_zoom: float = 3.0");
	p_file->store_line("@export var default_zoom: float = 1.0");
	p_file->store_line("@export var zoom_step: float = 0.1");
	p_file->store_line("@export var smooth_zoom: bool = true");
	p_file->store_line("");
	p_file->store_line("# Lookahead settings");
	p_file->store_line("@export var enable_lookahead: bool = true");
	p_file->store_line("@export var lookahead_distance: float = 100.0");
	p_file->store_line("@export var lookahead_speed: float = 3.0");
	p_file->store_line("@export var min_velocity_for_lookahead: float = 50.0");
	p_file->store_line("");
	p_file->store_line("# Vertical following");
	p_file->store_line("@export var follow_vertical: bool = true");
	p_file->store_line("@export var vertical_deadzone: float = 50.0");
	p_file->store_line("@export var vertical_follow_speed: float = 5.0");
	p_file->store_line("");
	p_file->store_line("# Boundaries and offset");
	p_file->store_line("@export var camera_offset: Vector2 = Vector2.ZERO");
	p_file->store_line("@export var use_boundaries: bool = false");
	p_file->store_line("@export var boundary_rect: Rect2 = Rect2(-1000, -1000, 2000, 2000)");
	p_file->store_line("");
	p_file->store_line("# Target and state");
	p_file->store_line("var target: Node2D");
	p_file->store_line("var target_zoom: float");
	p_file->store_line("var lookahead_offset: Vector2 = Vector2.ZERO");
	p_file->store_line("var last_target_position: Vector2");
	p_file->store_line("var target_velocity: Vector2");
	p_file->store_line("");
	p_file->store_line("# Signals");
	p_file->store_line("signal zoom_changed(new_zoom: float)");
	p_file->store_line("signal target_changed(new_target: Node2D)");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\ttarget_zoom = default_zoom");
	p_file->store_line("\tzoom = Vector2(target_zoom, target_zoom)");
	p_file->store_line("\t");
	p_file->store_line("\t# Make this camera current");
	p_file->store_line("\tmake_current()");
	p_file->store_line("");
	p_file->store_line("func _process(delta: float):");
	p_file->store_line("\t# Handle zoom input");
	p_file->store_line("\t_handle_zoom_input(delta)");
	p_file->store_line("\t");
	p_file->store_line("\t# Follow target");
	p_file->store_line("\tif target:");
	p_file->store_line("\t\t_update_target_velocity(delta)");
	p_file->store_line("\t\t_follow_target(delta)");
	p_file->store_line("");
	p_file->store_line("func _handle_zoom_input(delta: float):");
	p_file->store_line("\tvar zoom_input = 0.0");
	p_file->store_line("\t");
	p_file->store_line("\t# Mouse wheel zoom");
	p_file->store_line("\tif Input.is_action_just_pressed(\"zoom_in\"):");
	p_file->store_line("\t\tzoom_input += zoom_step");
	p_file->store_line("\telif Input.is_action_just_pressed(\"zoom_out\"):");
	p_file->store_line("\t\tzoom_input -= zoom_step");
	p_file->store_line("\t");
	p_file->store_line("\t# Keyboard zoom");
	p_file->store_line("\tif Input.is_action_pressed(\"ui_plus\"):");
	p_file->store_line("\t\tzoom_input += zoom_step * delta * 2");
	p_file->store_line("\telif Input.is_action_pressed(\"ui_minus\"):");
	p_file->store_line("\t\tzoom_input -= zoom_step * delta * 2");
	p_file->store_line("\t");
	p_file->store_line("\t# Reset zoom");
	p_file->store_line("\tif Input.is_action_just_pressed(\"reset_zoom\"):");
	p_file->store_line("\t\ttarget_zoom = default_zoom");
	p_file->store_line("\t");
	p_file->store_line("\t# Apply zoom");
	p_file->store_line("\tif zoom_input != 0.0:");
	p_file->store_line("\t\ttarget_zoom = clamp(target_zoom + zoom_input, min_zoom, max_zoom)");
	p_file->store_line("\t\tzoom_changed.emit(target_zoom)");
	p_file->store_line("\t");
	p_file->store_line("\t# Smooth zoom interpolation");
	p_file->store_line("\tif smooth_zoom:");
	p_file->store_line("\t\tvar current_zoom_value = zoom.x");
	p_file->store_line("\t\tvar new_zoom_value = lerp(current_zoom_value, target_zoom, zoom_speed * delta)");
	p_file->store_line("\t\tzoom = Vector2(new_zoom_value, new_zoom_value)");
	p_file->store_line("\telse:");
	p_file->store_line("\t\tzoom = Vector2(target_zoom, target_zoom)");
	p_file->store_line("");
	p_file->store_line("func _update_target_velocity(delta: float):");
	p_file->store_line("\tif target:");
	p_file->store_line("\t\ttarget_velocity = (target.global_position - last_target_position) / delta");
	p_file->store_line("\t\tlast_target_position = target.global_position");
	p_file->store_line("");
	p_file->store_line("func _follow_target(delta: float):");
	p_file->store_line("\tvar target_position = target.global_position + camera_offset");
	p_file->store_line("\t");
	p_file->store_line("\t# Calculate lookahead");
	p_file->store_line("\tif enable_lookahead and target_velocity.length() > min_velocity_for_lookahead:");
	p_file->store_line("\t\tvar desired_lookahead = target_velocity.normalized() * lookahead_distance");
	p_file->store_line("\t\tlookahead_offset = lookahead_offset.lerp(desired_lookahead, lookahead_speed * delta)");
	p_file->store_line("\telse:");
	p_file->store_line("\t\tlookahead_offset = lookahead_offset.lerp(Vector2.ZERO, lookahead_speed * delta)");
	p_file->store_line("\t");
	p_file->store_line("\ttarget_position += lookahead_offset");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle vertical following with deadzone");
	p_file->store_line("\tvar current_pos = global_position");
	p_file->store_line("\tvar new_position = current_pos");
	p_file->store_line("\t");
	p_file->store_line("\t# Horizontal following (always follow)");
	p_file->store_line("\tnew_position.x = lerp(current_pos.x, target_position.x, follow_speed * delta)");
	p_file->store_line("\t");
	p_file->store_line("\t# Vertical following with deadzone");
	p_file->store_line("\tif follow_vertical:");
	p_file->store_line("\t\tvar vertical_distance = abs(target_position.y - current_pos.y)");
	p_file->store_line("\t\tif vertical_distance > vertical_deadzone:");
	p_file->store_line("\t\t\tnew_position.y = lerp(current_pos.y, target_position.y, vertical_follow_speed * delta)");
	p_file->store_line("\t");
	p_file->store_line("\t# Apply boundaries if enabled");
	p_file->store_line("\tif use_boundaries:");
	p_file->store_line("\t\tnew_position.x = clamp(new_position.x, boundary_rect.position.x, boundary_rect.position.x + boundary_rect.size.x)");
	p_file->store_line("\t\tnew_position.y = clamp(new_position.y, boundary_rect.position.y, boundary_rect.position.y + boundary_rect.size.y)");
	p_file->store_line("\t");
	p_file->store_line("\tglobal_position = new_position");
	p_file->store_line("");
	p_file->store_line("# Public methods");
	p_file->store_line("func set_target(new_target: Node2D):");
	p_file->store_line("\ttarget = new_target");
	p_file->store_line("\tif target:");
	p_file->store_line("\t\tlast_target_position = target.global_position");
	p_file->store_line("\ttarget_changed.emit(new_target)");
	p_file->store_line("");
	p_file->store_line("func set_zoom_level(new_zoom: float):");
	p_file->store_line("\ttarget_zoom = clamp(new_zoom, min_zoom, max_zoom)");
	p_file->store_line("\tzoom_changed.emit(target_zoom)");
	p_file->store_line("");
	p_file->store_line("func get_current_zoom() -> float:");
	p_file->store_line("\treturn zoom.x");
	p_file->store_line("");
	p_file->store_line("func reset_to_default():");
	p_file->store_line("\ttarget_zoom = default_zoom");
	p_file->store_line("\tlookahead_offset = Vector2.ZERO");
}

void CameraSidescrollerModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://camera_sidescroller\"]");
	p_file->store_line("");
	p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/CameraSidescroller.gd\" id=\"1_camera_script\"]");
	p_file->store_line("");
	p_file->store_line("[node name=\"" + p_scene_name + "\" type=\"Camera2D\"]");
	p_file->store_line("script = ExtResource(\"1_camera_script\")");
	p_file->store_line("zoom = Vector2(1, 1)");
	p_file->store_line("process_callback = 1");
	p_file->store_line("enabled = true");
}
