#include "character_portrait_system_module.h"

void CharacterPortraitSystemModule::generate_script(Ref<FileAccess> p_file) {
	p_file->store_line("# CharacterPortraitSystem.gd");
	p_file->store_line("# Generated by Lupine Engine - Character Portrait System");
	p_file->store_line("# Manages character portraits with emotions, positioning, and effects");
	p_file->store_line("");
	p_file->store_line("extends Node");
	p_file->store_line("");
	p_file->store_line("# Signals");
	p_file->store_line("signal portrait_changed(position: String, character: String, emotion: String)");
	p_file->store_line("signal portrait_cleared(position: String)");
	p_file->store_line("signal portrait_effect_played(position: String, effect: String)");
	p_file->store_line("");
	p_file->store_line("# Portrait positions");
	p_file->store_line("enum Position {");
	p_file->store_line("\tLEFT,");
	p_file->store_line("\tCENTER,");
	p_file->store_line("\tRIGHT");
	p_file->store_line("}");
	p_file->store_line("");
	p_file->store_line("# Current portrait state");
	p_file->store_line("var current_portraits = {");
	p_file->store_line("\t\"left\": {\"character\": \"\", \"emotion\": \"\", \"texture\": null},");
	p_file->store_line("\t\"center\": {\"character\": \"\", \"emotion\": \"\", \"texture\": null},");
	p_file->store_line("\t\"right\": {\"character\": \"\", \"emotion\": \"\", \"texture\": null}");
	p_file->store_line("}");
	p_file->store_line("");
	p_file->store_line("# Portrait display references");
	p_file->store_line("var portrait_displays = {}");
	p_file->store_line("");
	p_file->store_line("# Asset discovery");
	p_file->store_line("var portrait_cache = {}");
	p_file->store_line("var portraits_path = \"assets/portraits\"");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\t# Connect to VN Script Parser commands");
	p_file->store_line("\tif VNScriptParser:");
	p_file->store_line("\t\tVNScriptParser.command_executed.connect(_on_command_executed)");
	p_file->store_line("\t");
	p_file->store_line("\t# Scan for available portraits");
	p_file->store_line("\tscan_portraits()");
	p_file->store_line("\t");
	p_file->store_line("\tprint(\"Character Portrait System initialized\")");
	p_file->store_line("");
	p_file->store_line("# Register portrait display UI elements");
	p_file->store_line("func register_portrait_display(position: String, display_node: Control):");
	p_file->store_line("\tportrait_displays[position] = display_node");
	p_file->store_line("\tprint(\"Registered portrait display for position: \", position)");
	p_file->store_line("");
	p_file->store_line("# Handle commands from script parser");
	p_file->store_line("func _on_command_executed(command: String, args: Array):");
	p_file->store_line("\tmatch command:");
	p_file->store_line("\t\t\"setLeft\":");
	p_file->store_line("\t\t\tif args.size() > 0:");
	p_file->store_line("\t\t\t\tset_portrait(\"left\", args[0])");
	p_file->store_line("\t\t\"setCenter\":");
	p_file->store_line("\t\t\tif args.size() > 0:");
	p_file->store_line("\t\t\t\tset_portrait(\"center\", args[0])");
	p_file->store_line("\t\t\"setRight\":");
	p_file->store_line("\t\t\tif args.size() > 0:");
	p_file->store_line("\t\t\t\tset_portrait(\"right\", args[0])");
	p_file->store_line("\t\t\"characterEffect\":");
	p_file->store_line("\t\t\tif args.size() >= 2:");
	p_file->store_line("\t\t\t\tvar effect = args[0]");
	p_file->store_line("\t\t\t\tvar positions = args[1].split(\",\")");
	p_file->store_line("\t\t\t\tfor pos in positions:");
	p_file->store_line("\t\t\t\t\tplay_portrait_effect(pos.strip_edges(), effect)");
	p_file->store_line("\t\t\telif args.size() == 1:");
	p_file->store_line("\t\t\t\t# Play effect on all visible portraits");
	p_file->store_line("\t\t\t\tvar effect = args[0]");
	p_file->store_line("\t\t\t\tfor pos in [\"left\", \"center\", \"right\"]:");
	p_file->store_line("\t\t\t\t\tif not current_portraits[pos].character.is_empty():");
	p_file->store_line("\t\t\t\t\t\tplay_portrait_effect(pos, effect)");
	p_file->store_line("");
	p_file->store_line("# Set a character portrait at a specific position");
	p_file->store_line("func set_portrait(position: String, character_with_emotion: String):");
	p_file->store_line("\tif character_with_emotion.is_empty():");
	p_file->store_line("\t\tclear_portrait(position)");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Parse character and emotion");
	p_file->store_line("\tvar character = character_with_emotion");
	p_file->store_line("\tvar emotion = \"neutral\"");
	p_file->store_line("\t");
	p_file->store_line("\tif \"_\" in character_with_emotion:");
	p_file->store_line("\t\tvar parts = character_with_emotion.split(\"_\", false, 1)");
	p_file->store_line("\t\tcharacter = parts[0]");
	p_file->store_line("\t\temotion = parts[1]");
	p_file->store_line("\t");
	p_file->store_line("\t# Find portrait texture");
	p_file->store_line("\tvar texture = find_portrait_texture(character, emotion)");
	p_file->store_line("\tif not texture:");
	p_file->store_line("\t\tprint(\"Portrait not found: \", character, \"_\", emotion)");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Update portrait state");
	p_file->store_line("\tcurrent_portraits[position].character = character");
	p_file->store_line("\tcurrent_portraits[position].emotion = emotion");
	p_file->store_line("\tcurrent_portraits[position].texture = texture");
	p_file->store_line("\t");
	p_file->store_line("\t# Update display");
	p_file->store_line("\tupdate_portrait_display(position)");
	p_file->store_line("\t");
	p_file->store_line("\tportrait_changed.emit(position, character, emotion)");
	p_file->store_line("");
	p_file->store_line("# Clear a portrait at a specific position");
	p_file->store_line("func clear_portrait(position: String):");
	p_file->store_line("\tcurrent_portraits[position].character = \"\"");
	p_file->store_line("\tcurrent_portraits[position].emotion = \"\"");
	p_file->store_line("\tcurrent_portraits[position].texture = null");
	p_file->store_line("\t");
	p_file->store_line("\tupdate_portrait_display(position)");
	p_file->store_line("\tportrait_cleared.emit(position)");
	p_file->store_line("");
	p_file->store_line("# Find portrait texture with fallback to neutral");
	p_file->store_line("func find_portrait_texture(character: String, emotion: String) -> Texture2D:");
	p_file->store_line("\t# Try specific emotion first");
	p_file->store_line("\tvar portrait_key = character + \"_\" + emotion");
	p_file->store_line("\tif portrait_cache.has(portrait_key):");
	p_file->store_line("\t\treturn portrait_cache[portrait_key]");
	p_file->store_line("\t");
	p_file->store_line("\t# Fallback to neutral");
	p_file->store_line("\tvar neutral_key = character + \"_neutral\"");
	p_file->store_line("\tif portrait_cache.has(neutral_key):");
	p_file->store_line("\t\tprint(\"Using neutral fallback for: \", portrait_key)");
	p_file->store_line("\t\treturn portrait_cache[neutral_key]");
	p_file->store_line("\t");
	p_file->store_line("\t# Try character name without emotion");
	p_file->store_line("\tif portrait_cache.has(character):");
	p_file->store_line("\t\tprint(\"Using base portrait for: \", portrait_key)");
	p_file->store_line("\t\treturn portrait_cache[character]");
	p_file->store_line("\t");
	p_file->store_line("\treturn null");
	p_file->store_line("");
	p_file->store_line("# Scan portraits directory and cache textures");
	p_file->store_line("func scan_portraits():");
	p_file->store_line("\tportrait_cache.clear()");
	p_file->store_line("\t");
	p_file->store_line("\tvar dir = DirAccess.open(portraits_path)");
	p_file->store_line("\tif not dir:");
	p_file->store_line("\t\tprint(\"Portraits directory not found: \", portraits_path)");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tdir.list_dir_begin()");
	p_file->store_line("\tvar file_name = dir.get_next()");
	p_file->store_line("\t");
	p_file->store_line("\twhile file_name != \"\":");
	p_file->store_line("\t\tif not dir.current_is_dir() and is_image_file(file_name):");
	p_file->store_line("\t\t\tvar full_path = portraits_path + \"/\" + file_name");
	p_file->store_line("\t\t\tvar texture = load(full_path) as Texture2D");
	p_file->store_line("\t\t\tif texture:");
	p_file->store_line("\t\t\t\t# Remove file extension for key");
	p_file->store_line("\t\t\t\tvar key = file_name.get_basename()");
	p_file->store_line("\t\t\t\tportrait_cache[key] = texture");
	p_file->store_line("\t\t\t\tprint(\"Cached portrait: \", key)");
	p_file->store_line("\t\t");
	p_file->store_line("\t\tfile_name = dir.get_next()");
	p_file->store_line("\t");
	p_file->store_line("\tdir.list_dir_end()");
	p_file->store_line("\tprint(\"Scanned \", portrait_cache.size(), \" portraits\")");
	p_file->store_line("");
	p_file->store_line("# Check if file is an image");
	p_file->store_line("func is_image_file(filename: String) -> bool:");
	p_file->store_line("\tvar ext = filename.get_extension().to_lower()");
	p_file->store_line("\treturn ext in [\"png\", \"jpg\", \"jpeg\", \"webp\", \"bmp\", \"tga\"]");
	p_file->store_line("");
	p_file->store_line("# Update portrait display UI");
	p_file->store_line("func update_portrait_display(position: String):");
	p_file->store_line("\tif not portrait_displays.has(position):");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tvar display = portrait_displays[position]");
	p_file->store_line("\tvar portrait_data = current_portraits[position]");
	p_file->store_line("\t");
	p_file->store_line("\t# Find TextureRect in display");
	p_file->store_line("\tvar texture_rect = find_texture_rect(display)");
	p_file->store_line("\tif texture_rect:");
	p_file->store_line("\t\ttexture_rect.texture = portrait_data.texture");
	p_file->store_line("\t\ttexture_rect.visible = portrait_data.texture != null");
	p_file->store_line("");
	p_file->store_line("# Find TextureRect in node hierarchy");
	p_file->store_line("func find_texture_rect(node: Node) -> TextureRect:");
	p_file->store_line("\tif node is TextureRect:");
	p_file->store_line("\t\treturn node as TextureRect");
	p_file->store_line("\t");
	p_file->store_line("\tfor child in node.get_children():");
	p_file->store_line("\t\tvar result = find_texture_rect(child)");
	p_file->store_line("\t\tif result:");
	p_file->store_line("\t\t\treturn result");
	p_file->store_line("\t");
	p_file->store_line("\treturn null");
	p_file->store_line("");
	p_file->store_line("# Play visual effect on portrait");
	p_file->store_line("func play_portrait_effect(position: String, effect: String):");
	p_file->store_line("\tif not portrait_displays.has(position):");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tvar display = portrait_displays[position]");
	p_file->store_line("\tvar texture_rect = find_texture_rect(display)");
	p_file->store_line("\tif not texture_rect:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Create tween for effects");
	p_file->store_line("\tvar tween = create_tween()");
	p_file->store_line("\t");
	p_file->store_line("\tmatch effect.to_lower():");
	p_file->store_line("\t\t\"shake\":");
	p_file->store_line("\t\t\t# Shake effect");
	p_file->store_line("\t\t\tvar original_pos = texture_rect.position");
	p_file->store_line("\t\t\tfor i in range(6):");
	p_file->store_line("\t\t\t\tvar offset = Vector2(randf_range(-5, 5), randf_range(-5, 5))");
	p_file->store_line("\t\t\t\ttween.tween_property(texture_rect, \"position\", original_pos + offset, 0.05)");
	p_file->store_line("\t\t\ttween.tween_property(texture_rect, \"position\", original_pos, 0.05)");
	p_file->store_line("\t\t\"bounce\":");
	p_file->store_line("\t\t\t# Bounce effect");
	p_file->store_line("\t\t\tvar original_scale = texture_rect.scale");
	p_file->store_line("\t\t\ttween.tween_property(texture_rect, \"scale\", original_scale * 1.1, 0.1)");
	p_file->store_line("\t\t\ttween.tween_property(texture_rect, \"scale\", original_scale, 0.1)");
	p_file->store_line("\t\t\"fade\":");
	p_file->store_line("\t\t\t# Fade effect");
	p_file->store_line("\t\t\ttween.tween_property(texture_rect, \"modulate:a\", 0.5, 0.2)");
	p_file->store_line("\t\t\ttween.tween_property(texture_rect, \"modulate:a\", 1.0, 0.2)");
	p_file->store_line("\t\t\"glow\":");
	p_file->store_line("\t\t\t# Glow effect");
	p_file->store_line("\t\t\ttween.tween_property(texture_rect, \"modulate\", Color.WHITE * 1.3, 0.15)");
	p_file->store_line("\t\t\ttween.tween_property(texture_rect, \"modulate\", Color.WHITE, 0.15)");
	p_file->store_line("\t");
	p_file->store_line("\tportrait_effect_played.emit(position, effect)");
	p_file->store_line("");
	p_file->store_line("# Get current portrait info");
	p_file->store_line("func get_current_portrait(position: String) -> Dictionary:");
	p_file->store_line("\treturn current_portraits.get(position, {})");
	p_file->store_line("");
	p_file->store_line("# Get all current portraits");
	p_file->store_line("func get_all_portraits() -> Dictionary:");
	p_file->store_line("\treturn current_portraits.duplicate()");
}

void CharacterPortraitSystemModule::generate_file(Ref<FileAccess> p_file, const String &p_relative_path) {
	String filename = p_relative_path.get_file();

	if (filename == "PortraitDisplay.gd") {
		// Generate the UI script for portrait display
		p_file->store_line("# PortraitDisplay.gd");
		p_file->store_line("# Generated by Lupine Engine - Portrait Display UI Script");
		p_file->store_line("# Manages the portrait display UI for the Character Portrait System");
		p_file->store_line("");
		p_file->store_line("extends Control");
		p_file->store_line("");
		p_file->store_line("# Portrait position references");
		p_file->store_line("@onready var left_portrait = $LeftPortrait");
		p_file->store_line("@onready var center_portrait = $CenterPortrait");
		p_file->store_line("@onready var right_portrait = $RightPortrait");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Register this display with the Character Portrait System");
		p_file->store_line("\tif CharacterPortraitSystem:");
		p_file->store_line("\t\tCharacterPortraitSystem.register_portrait_display(\"left\", left_portrait)");
		p_file->store_line("\t\tCharacterPortraitSystem.register_portrait_display(\"center\", center_portrait)");
		p_file->store_line("\t\tCharacterPortraitSystem.register_portrait_display(\"right\", right_portrait)");
		p_file->store_line("\t");
		p_file->store_line("\tprint(\"Portrait Display UI initialized\")");
		p_file->store_line("");
		p_file->store_line("# Optional: Handle portrait visibility animations");
		p_file->store_line("func show_portrait(position: String):");
		p_file->store_line("\tvar portrait_node = get_portrait_node(position)");
		p_file->store_line("\tif portrait_node:");
		p_file->store_line("\t\tportrait_node.visible = true");
		p_file->store_line("\t\t# Add fade-in animation if desired");
		p_file->store_line("\t\tvar tween = create_tween()");
		p_file->store_line("\t\tportrait_node.modulate.a = 0.0");
		p_file->store_line("\t\ttween.tween_property(portrait_node, \"modulate:a\", 1.0, 0.3)");
		p_file->store_line("");
		p_file->store_line("func hide_portrait(position: String):");
		p_file->store_line("\tvar portrait_node = get_portrait_node(position)");
		p_file->store_line("\tif portrait_node:");
		p_file->store_line("\t\t# Add fade-out animation if desired");
		p_file->store_line("\t\tvar tween = create_tween()");
		p_file->store_line("\t\ttween.tween_property(portrait_node, \"modulate:a\", 0.0, 0.3)");
		p_file->store_line("\t\ttween.tween_callback(func(): portrait_node.visible = false)");
		p_file->store_line("");
		p_file->store_line("func get_portrait_node(position: String) -> Control:");
		p_file->store_line("\tmatch position:");
		p_file->store_line("\t\t\"left\":");
		p_file->store_line("\t\t\treturn left_portrait");
		p_file->store_line("\t\t\"center\":");
		p_file->store_line("\t\t\treturn center_portrait");
		p_file->store_line("\t\t\"right\":");
		p_file->store_line("\t\t\treturn right_portrait");
		p_file->store_line("\t\t_:");
		p_file->store_line("\t\t\treturn null");
	} else {
		// Use default file generation
		LupineModuleBase::generate_file(p_file, p_relative_path);
	}
}

void CharacterPortraitSystemModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://portrait_display\"]");
	p_file->store_line("");
	p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/PortraitDisplay.gd\" id=\"1_portrait_script\"]");
	p_file->store_line("");
	p_file->store_line("[node name=\"PortraitDisplay\" type=\"Control\"]");
	p_file->store_line("layout_mode = 3");
	p_file->store_line("anchors_preset = 15");
	p_file->store_line("anchor_right = 1.0");
	p_file->store_line("anchor_bottom = 1.0");
	p_file->store_line("script = ExtResource(\"1_portrait_script\")");
	p_file->store_line("");
	p_file->store_line("[node name=\"LeftPortrait\" type=\"Control\" parent=\".\"]");
	p_file->store_line("layout_mode = 1");
	p_file->store_line("anchors_preset = 4");
	p_file->store_line("anchor_top = 0.5");
	p_file->store_line("anchor_bottom = 0.5");
	p_file->store_line("offset_left = 50.0");
	p_file->store_line("offset_top = -200.0");
	p_file->store_line("offset_right = 250.0");
	p_file->store_line("offset_bottom = 200.0");
	p_file->store_line("");
	p_file->store_line("[node name=\"TextureRect\" type=\"TextureRect\" parent=\"LeftPortrait\"]");
	p_file->store_line("layout_mode = 1");
	p_file->store_line("anchors_preset = 15");
	p_file->store_line("anchor_right = 1.0");
	p_file->store_line("anchor_bottom = 1.0");
	p_file->store_line("expand_mode = 1");
	p_file->store_line("stretch_mode = 5");
	p_file->store_line("");
	p_file->store_line("[node name=\"CenterPortrait\" type=\"Control\" parent=\".\"]");
	p_file->store_line("layout_mode = 1");
	p_file->store_line("anchors_preset = 8");
	p_file->store_line("anchor_left = 0.5");
	p_file->store_line("anchor_top = 0.5");
	p_file->store_line("anchor_right = 0.5");
	p_file->store_line("anchor_bottom = 0.5");
	p_file->store_line("offset_left = -100.0");
	p_file->store_line("offset_top = -200.0");
	p_file->store_line("offset_right = 100.0");
	p_file->store_line("offset_bottom = 200.0");
	p_file->store_line("");
	p_file->store_line("[node name=\"TextureRect\" type=\"TextureRect\" parent=\"CenterPortrait\"]");
	p_file->store_line("layout_mode = 1");
	p_file->store_line("anchors_preset = 15");
	p_file->store_line("anchor_right = 1.0");
	p_file->store_line("anchor_bottom = 1.0");
	p_file->store_line("expand_mode = 1");
	p_file->store_line("stretch_mode = 5");
	p_file->store_line("");
	p_file->store_line("[node name=\"RightPortrait\" type=\"Control\" parent=\".\"]");
	p_file->store_line("layout_mode = 1");
	p_file->store_line("anchors_preset = 6");
	p_file->store_line("anchor_left = 1.0");
	p_file->store_line("anchor_top = 0.5");
	p_file->store_line("anchor_right = 1.0");
	p_file->store_line("anchor_bottom = 0.5");
	p_file->store_line("offset_left = -250.0");
	p_file->store_line("offset_top = -200.0");
	p_file->store_line("offset_right = -50.0");
	p_file->store_line("offset_bottom = 200.0");
	p_file->store_line("");
	p_file->store_line("[node name=\"TextureRect\" type=\"TextureRect\" parent=\"RightPortrait\"]");
	p_file->store_line("layout_mode = 1");
	p_file->store_line("anchors_preset = 15");
	p_file->store_line("anchor_right = 1.0");
	p_file->store_line("anchor_bottom = 1.0");
	p_file->store_line("expand_mode = 1");
	p_file->store_line("stretch_mode = 5");
}
