// Legacy player controller generators
// This file contains the original player controller implementations
// that were moved from project_dialog.cpp

#include "lupine_module_manager.h"

void LupineModuleManager::_create_2d_topdown_controller(Ref<FileAccess> p_file) {
	p_file->store_line("# PlayerController2DTopdown.gd");
	p_file->store_line("# Generated by Lupine Engine - 2D Top-down Player Controller");
	p_file->store_line("# 4-directional movement with health, stamina, combat, and interaction");
	p_file->store_line("");
	p_file->store_line("extends CharacterBody2D");
	p_file->store_line("class_name PlayerController2DTopdown");
	p_file->store_line("");
	p_file->store_line("# Movement settings");
	p_file->store_line("@export var base_speed: float = 200.0");
	p_file->store_line("@export var sprint_speed: float = 350.0");
	p_file->store_line("@export var sprint_stamina_cost: float = 30.0  # Per second");
	p_file->store_line("");
	p_file->store_line("# Combat settings");
	p_file->store_line("@export var attack_damage: float = 25.0");
	p_file->store_line("@export var attack_range: float = 50.0");
	p_file->store_line("@export var attack_stamina_cost: float = 15.0");
	p_file->store_line("@export var ranged_attack_damage: float = 20.0");
	p_file->store_line("@export var ranged_attack_range: float = 200.0");
	p_file->store_line("@export var ranged_attack_mana_cost: float = 10.0");
	p_file->store_line("");
	p_file->store_line("# Dash settings");
	p_file->store_line("@export var dash_distance: float = 100.0");
	p_file->store_line("@export var dash_duration: float = 0.2");
	p_file->store_line("@export var dash_stamina_cost: float = 20.0");
	p_file->store_line("@export var dash_cooldown: float = 1.0");
	p_file->store_line("");
	p_file->store_line("# Interaction settings");
	p_file->store_line("@export var interaction_range: float = 80.0");
	p_file->store_line("");
	p_file->store_line("# Node references");
	p_file->store_line("@onready var sprite: Sprite2D = $Sprite2D");
	p_file->store_line("@onready var collision: CollisionShape2D = $CollisionShape2D");
	p_file->store_line("@onready var interaction_area: Area2D = $InteractionArea");
	p_file->store_line("");
	p_file->store_line("# Global references");
	p_file->store_line("var stats = PlayerStats  # Global autoload");
	p_file->store_line("");
	p_file->store_line("# State variables");
	p_file->store_line("var current_direction: Vector2 = Vector2.ZERO");
	p_file->store_line("var is_sprinting: bool = false");
	p_file->store_line("var is_dashing: bool = false");
	p_file->store_line("var dash_timer: float = 0.0");
	p_file->store_line("var dash_cooldown_timer: float = 0.0");
	p_file->store_line("var dash_start_pos: Vector2");
	p_file->store_line("var dash_target_pos: Vector2");
	p_file->store_line("");
	p_file->store_line("# Signals");
	p_file->store_line("signal attacked(damage: float, position: Vector2)");
	p_file->store_line("signal ranged_attacked(damage: float, position: Vector2, target_position: Vector2)");
	p_file->store_line("signal interacted(target: Node)");
	p_file->store_line("signal dash_started()");
	p_file->store_line("signal dash_ended()");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\t# Connect to stat signals for UI updates");
	p_file->store_line("\tstats.stat_depleted.connect(_on_stat_depleted)");
	p_file->store_line("");
	p_file->store_line("func _physics_process(delta: float):");
	p_file->store_line("\tif stats.is_dead:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle dash");
	p_file->store_line("\tif is_dashing:");
	p_file->store_line("\t\t_handle_dash(delta)");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Update cooldowns");
	p_file->store_line("\tif dash_cooldown_timer > 0:");
	p_file->store_line("\t\tdash_cooldown_timer -= delta");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle input");
	p_file->store_line("\t_handle_movement_input(delta)");
	p_file->store_line("\t_handle_action_input()");
	p_file->store_line("\t");
	p_file->store_line("\t# Apply movement");
	p_file->store_line("\tmove_and_slide()");
	p_file->store_line("");
	p_file->store_line("func _handle_movement_input(delta: float):");
	p_file->store_line("\t# Get input direction (4-directional)");
	p_file->store_line("\tvar input_dir = Vector2.ZERO");
	p_file->store_line("\t");
	p_file->store_line("\tif Input.is_action_pressed(\"move_up\") or Input.is_action_pressed(\"ui_up\"):");
	p_file->store_line("\t\tinput_dir.y -= 1");
	p_file->store_line("\tif Input.is_action_pressed(\"move_down\") or Input.is_action_pressed(\"ui_down\"):");
	p_file->store_line("\t\tinput_dir.y += 1");
	p_file->store_line("\tif Input.is_action_pressed(\"move_left\") or Input.is_action_pressed(\"ui_left\"):");
	p_file->store_line("\t\tinput_dir.x -= 1");
	p_file->store_line("\tif Input.is_action_pressed(\"move_right\") or Input.is_action_pressed(\"ui_right\"):");
	p_file->store_line("\t\tinput_dir.x += 1");
	p_file->store_line("\t");
	p_file->store_line("\t# Prioritize one direction for 4-directional movement");
	p_file->store_line("\tif input_dir.x != 0:");
	p_file->store_line("\t\tinput_dir.y = 0");
	p_file->store_line("\t");
	p_file->store_line("\tcurrent_direction = input_dir");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle sprinting");
	p_file->store_line("\tis_sprinting = Input.is_action_pressed(\"sprint\") and input_dir != Vector2.ZERO");
	p_file->store_line("\tif is_sprinting and not stats.use_stamina(sprint_stamina_cost * delta):");
	p_file->store_line("\t\tis_sprinting = false");
	p_file->store_line("\t");
	p_file->store_line("\t# Calculate speed");
	p_file->store_line("\tvar current_speed = sprint_speed if is_sprinting else base_speed");
	p_file->store_line("\t");
	p_file->store_line("\t# Apply velocity");
	p_file->store_line("\tvelocity = input_dir * current_speed");
	p_file->store_line("");
	p_file->store_line("func _handle_action_input():");
	p_file->store_line("\t# Attack");
	p_file->store_line("\tif Input.is_action_just_pressed(\"attack\"):");
	p_file->store_line("\t\tperform_attack()");
	p_file->store_line("\t");
	p_file->store_line("\t# Ranged attack");
	p_file->store_line("\tif Input.is_action_just_pressed(\"ranged_attack\"):");
	p_file->store_line("\t\tperform_ranged_attack()");
	p_file->store_line("\t");
	p_file->store_line("\t# Dash");
	p_file->store_line("\tif Input.is_action_just_pressed(\"dash\"):");
	p_file->store_line("\t\tperform_dash()");
	p_file->store_line("\t");
	p_file->store_line("\t# Interact");
	p_file->store_line("\tif Input.is_action_just_pressed(\"interact\"):");
	p_file->store_line("\t\tperform_interaction()");
	p_file->store_line("");
	p_file->store_line("func perform_attack():");
	p_file->store_line("\tif not stats.use_stamina(attack_stamina_cost):");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Calculate attack position based on direction");
	p_file->store_line("\tvar attack_pos = global_position");
	p_file->store_line("\tif current_direction != Vector2.ZERO:");
	p_file->store_line("\t\tattack_pos += current_direction * attack_range");
	p_file->store_line("\telse:");
	p_file->store_line("\t\tattack_pos += Vector2.DOWN * attack_range  # Default direction");
	p_file->store_line("\t");
	p_file->store_line("\tattacked.emit(attack_damage, attack_pos)");
	p_file->store_line("");
	p_file->store_line("func perform_ranged_attack():");
	p_file->store_line("\tif not stats.use_mana(ranged_attack_mana_cost):");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Calculate target position");
	p_file->store_line("\tvar target_pos = global_position");
	p_file->store_line("\tif current_direction != Vector2.ZERO:");
	p_file->store_line("\t\ttarget_pos += current_direction * ranged_attack_range");
	p_file->store_line("\telse:");
	p_file->store_line("\t\ttarget_pos += Vector2.DOWN * ranged_attack_range  # Default direction");
	p_file->store_line("\t");
	p_file->store_line("\tranged_attacked.emit(ranged_attack_damage, global_position, target_pos)");
	p_file->store_line("");
	p_file->store_line("func perform_dash():");
	p_file->store_line("\tif is_dashing or dash_cooldown_timer > 0:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tif not stats.use_stamina(dash_stamina_cost):");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Calculate dash direction");
	p_file->store_line("\tvar dash_dir = current_direction");
	p_file->store_line("\tif dash_dir == Vector2.ZERO:");
	p_file->store_line("\t\tdash_dir = Vector2.DOWN  # Default direction");
	p_file->store_line("\t");
	p_file->store_line("\t# Set up dash");
	p_file->store_line("\tis_dashing = true");
	p_file->store_line("\tdash_timer = dash_duration");
	p_file->store_line("\tdash_cooldown_timer = dash_cooldown");
	p_file->store_line("\tdash_start_pos = global_position");
	p_file->store_line("\tdash_target_pos = global_position + dash_dir * dash_distance");
	p_file->store_line("\t");
	p_file->store_line("\tdash_started.emit()");
	p_file->store_line("");
	p_file->store_line("func _handle_dash(delta: float):");
	p_file->store_line("\tdash_timer -= delta");
	p_file->store_line("\t");
	p_file->store_line("\tif dash_timer <= 0:");
	p_file->store_line("\t\tis_dashing = false");
	p_file->store_line("\t\tglobal_position = dash_target_pos");
	p_file->store_line("\t\tvelocity = Vector2.ZERO");
	p_file->store_line("\t\tdash_ended.emit()");
	p_file->store_line("\telse:");
	p_file->store_line("\t\t# Interpolate position during dash");
	p_file->store_line("\t\tvar progress = 1.0 - (dash_timer / dash_duration)");
	p_file->store_line("\t\tglobal_position = dash_start_pos.lerp(dash_target_pos, progress)");
	p_file->store_line("");
	p_file->store_line("func perform_interaction():");
	p_file->store_line("\t# Find interactable objects in range");
	p_file->store_line("\tvar space_state = get_world_2d().direct_space_state");
	p_file->store_line("\tvar query = PhysicsPointQueryParameters2D.new()");
	p_file->store_line("\tquery.position = global_position");
	p_file->store_line("\tquery.collision_mask = 1  # Adjust as needed");
	p_file->store_line("\t");
	p_file->store_line("\tvar results = space_state.intersect_point(query)");
	p_file->store_line("\tfor result in results:");
	p_file->store_line("\t\tvar body = result.collider");
	p_file->store_line("\t\tif body.has_method(\"interact\"):");
	p_file->store_line("\t\t\tbody.interact(self)");
	p_file->store_line("\t\t\tinteracted.emit(body)");
	p_file->store_line("\t\t\tbreak");
	p_file->store_line("");
	p_file->store_line("func _on_stat_depleted(stat_name: String):");
	p_file->store_line("\tif stat_name == \"health\":");
	p_file->store_line("\t\t# Handle death");
	p_file->store_line("\t\tvelocity = Vector2.ZERO");
	p_file->store_line("\t\tprint(\"Player died!\")");
}

void LupineModuleManager::_create_2d_topdown_8dir_controller(Ref<FileAccess> p_file) {
	// Similar to 4-directional but allows diagonal movement
	p_file->store_line("# PlayerController2DTopdown8Dir.gd");
	p_file->store_line("# Generated by Lupine Engine - 2D Top-down Player Controller (8-Direction)");
	p_file->store_line("# 8-directional movement with health, stamina, combat, and interaction");
	p_file->store_line("");
	p_file->store_line("extends CharacterBody2D");
	p_file->store_line("class_name PlayerController2DTopdown8Dir");
	p_file->store_line("");
	p_file->store_line("# Movement settings");
	p_file->store_line("@export var base_speed: float = 200.0");
	p_file->store_line("@export var sprint_speed: float = 350.0");
	p_file->store_line("@export var sprint_stamina_cost: float = 30.0  # Per second");
	p_file->store_line("");
	p_file->store_line("# Combat settings");
	p_file->store_line("@export var attack_damage: float = 25.0");
	p_file->store_line("@export var attack_range: float = 50.0");
	p_file->store_line("@export var attack_stamina_cost: float = 15.0");
	p_file->store_line("");
	p_file->store_line("# Node references");
	p_file->store_line("@onready var sprite: Sprite2D = $Sprite2D");
	p_file->store_line("");
	p_file->store_line("# Global references");
	p_file->store_line("var stats = PlayerStats  # Global autoload");
	p_file->store_line("");
	p_file->store_line("# State variables");
	p_file->store_line("var current_direction: Vector2 = Vector2.ZERO");
	p_file->store_line("var is_sprinting: bool = false");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\tpass  # PlayerStats is now global");
	p_file->store_line("");
	p_file->store_line("func _physics_process(delta: float):");
	p_file->store_line("\tif stats.is_dead:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t_handle_movement_input(delta)");
	p_file->store_line("\t_handle_action_input()");
	p_file->store_line("\tmove_and_slide()");
	p_file->store_line("");
	p_file->store_line("func _handle_movement_input(delta: float):");
	p_file->store_line("\t# Get input direction (8-directional)");
	p_file->store_line("\tvar input_dir = Vector2.ZERO");
	p_file->store_line("\t");
	p_file->store_line("\tif Input.is_action_pressed(\"move_up\"):");
	p_file->store_line("\t\tinput_dir.y -= 1");
	p_file->store_line("\tif Input.is_action_pressed(\"move_down\"):");
	p_file->store_line("\t\tinput_dir.y += 1");
	p_file->store_line("\tif Input.is_action_pressed(\"move_left\"):");
	p_file->store_line("\t\tinput_dir.x -= 1");
	p_file->store_line("\tif Input.is_action_pressed(\"move_right\"):");
	p_file->store_line("\t\tinput_dir.x += 1");
	p_file->store_line("\t");
	p_file->store_line("\t# Normalize for diagonal movement");
	p_file->store_line("\tinput_dir = input_dir.normalized()");
	p_file->store_line("\tcurrent_direction = input_dir");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle sprinting");
	p_file->store_line("\tis_sprinting = Input.is_action_pressed(\"sprint\") and input_dir != Vector2.ZERO");
	p_file->store_line("\tif is_sprinting and not stats.use_stamina(sprint_stamina_cost * delta):");
	p_file->store_line("\t\tis_sprinting = false");
	p_file->store_line("\t");
	p_file->store_line("\t# Calculate speed");
	p_file->store_line("\tvar current_speed = sprint_speed if is_sprinting else base_speed");
	p_file->store_line("\tvelocity = input_dir * current_speed");
	p_file->store_line("");
	p_file->store_line("func _handle_action_input():");
	p_file->store_line("\tif Input.is_action_just_pressed(\"attack\"):");
	p_file->store_line("\t\tperform_attack()");
	p_file->store_line("\tif Input.is_action_just_pressed(\"interact\"):");
	p_file->store_line("\t\tperform_interaction()");
	p_file->store_line("");
	p_file->store_line("func perform_attack():");
	p_file->store_line("\tif not stats.use_stamina(attack_stamina_cost):");
	p_file->store_line("\t\treturn");
	p_file->store_line("\tprint(\"Attack performed!\")");
	p_file->store_line("");
	p_file->store_line("func perform_interaction():");
	p_file->store_line("\tprint(\"Interaction performed!\")");
}

void LupineModuleManager::_create_2d_platformer_controller(Ref<FileAccess> p_file) {
	p_file->store_line("# PlayerController2DPlatformer.gd");
	p_file->store_line("# Generated by Lupine Engine - 2D Platformer Player Controller");
	p_file->store_line("# Side-scrolling platformer with jumping, health, stamina, and combat");
	p_file->store_line("");
	p_file->store_line("extends CharacterBody2D");
	p_file->store_line("class_name PlayerController2DPlatformer");
	p_file->store_line("");
	p_file->store_line("# Movement settings");
	p_file->store_line("@export var base_speed: float = 200.0");
	p_file->store_line("@export var sprint_speed: float = 300.0");
	p_file->store_line("@export var jump_velocity: float = -400.0");
	p_file->store_line("@export var gravity: float = 980.0");
	p_file->store_line("");
	p_file->store_line("# Node references");
	p_file->store_line("@onready var sprite: Sprite2D = $Sprite2D");
	p_file->store_line("");
	p_file->store_line("# Global references");
	p_file->store_line("var stats = PlayerStats  # Global autoload");
	p_file->store_line("");
	p_file->store_line("# State variables");
	p_file->store_line("var is_sprinting: bool = false");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\tpass  # PlayerStats is now global");
	p_file->store_line("");
	p_file->store_line("func _physics_process(delta: float):");
	p_file->store_line("\tif stats.is_dead:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Add gravity");
	p_file->store_line("\tif not is_on_floor():");
	p_file->store_line("\t\tvelocity.y += gravity * delta");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle jump");
	p_file->store_line("\tif Input.is_action_just_pressed(\"jump\") and is_on_floor():");
	p_file->store_line("\t\tvelocity.y = jump_velocity");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle horizontal movement");
	p_file->store_line("\tvar direction = Input.get_axis(\"move_left\", \"move_right\")");
	p_file->store_line("\tis_sprinting = Input.is_action_pressed(\"sprint\") and direction != 0");
	p_file->store_line("\t");
	p_file->store_line("\tvar current_speed = sprint_speed if is_sprinting else base_speed");
	p_file->store_line("\tvelocity.x = direction * current_speed");
	p_file->store_line("\t");
	p_file->store_line("\tmove_and_slide()");
}

void LupineModuleManager::_create_3d_third_person_controller(Ref<FileAccess> p_file) {
	p_file->store_line("# PlayerController3DThirdPerson.gd");
	p_file->store_line("# Generated by Lupine Engine - 3D Third-Person Player Controller");
	p_file->store_line("# Third-person 3D movement with camera follow and combat");
	p_file->store_line("");
	p_file->store_line("extends CharacterBody3D");
	p_file->store_line("class_name PlayerController3DThirdPerson");
	p_file->store_line("");
	p_file->store_line("# Movement settings");
	p_file->store_line("@export var base_speed: float = 5.0");
	p_file->store_line("@export var sprint_speed: float = 8.0");
	p_file->store_line("@export var jump_velocity: float = 8.0");
	p_file->store_line("@export var gravity: float = 20.0");
	p_file->store_line("");
	p_file->store_line("# Node references");
	p_file->store_line("@onready var mesh: MeshInstance3D = $MeshInstance3D");
	p_file->store_line("");
	p_file->store_line("# Global references");
	p_file->store_line("var stats = PlayerStats  # Global autoload");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\tpass  # PlayerStats is now global");
	p_file->store_line("");
	p_file->store_line("func _physics_process(delta: float):");
	p_file->store_line("\tif stats.is_dead:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Add gravity");
	p_file->store_line("\tif not is_on_floor():");
	p_file->store_line("\t\tvelocity.y -= gravity * delta");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle jump");
	p_file->store_line("\tif Input.is_action_just_pressed(\"jump\") and is_on_floor():");
	p_file->store_line("\t\tvelocity.y = jump_velocity");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle movement");
	p_file->store_line("\tvar input_dir = Input.get_vector(\"move_left\", \"move_right\", \"move_up\", \"move_down\")");
	p_file->store_line("\tvar direction = (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()");
	p_file->store_line("\t");
	p_file->store_line("\tvar is_sprinting = Input.is_action_pressed(\"sprint\")");
	p_file->store_line("\tvar current_speed = sprint_speed if is_sprinting else base_speed");
	p_file->store_line("\t");
	p_file->store_line("\tif direction:");
	p_file->store_line("\t\tvelocity.x = direction.x * current_speed");
	p_file->store_line("\t\tvelocity.z = direction.z * current_speed");
	p_file->store_line("\telse:");
	p_file->store_line("\t\tvelocity.x = move_toward(velocity.x, 0, current_speed)");
	p_file->store_line("\t\tvelocity.z = move_toward(velocity.z, 0, current_speed)");
	p_file->store_line("\t");
	p_file->store_line("\tmove_and_slide()");
}

void LupineModuleManager::_create_3d_first_person_controller(Ref<FileAccess> p_file) {
	p_file->store_line("# PlayerController3DFirstPerson.gd");
	p_file->store_line("# Generated by Lupine Engine - 3D First-Person Player Controller");
	p_file->store_line("# First-person 3D movement with mouse look and combat");
	p_file->store_line("");
	p_file->store_line("extends CharacterBody3D");
	p_file->store_line("class_name PlayerController3DFirstPerson");
	p_file->store_line("");
	p_file->store_line("# Movement settings");
	p_file->store_line("@export var base_speed: float = 5.0");
	p_file->store_line("@export var sprint_speed: float = 8.0");
	p_file->store_line("@export var jump_velocity: float = 8.0");
	p_file->store_line("@export var gravity: float = 20.0");
	p_file->store_line("@export var mouse_sensitivity: float = 0.002");
	p_file->store_line("");
	p_file->store_line("# Node references");
	p_file->store_line("@onready var camera: Camera3D = $Camera3D");
	p_file->store_line("");
	p_file->store_line("# Global references");
	p_file->store_line("var stats = PlayerStats  # Global autoload");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\tInput.mouse_mode = Input.MOUSE_MODE_CAPTURED");
	p_file->store_line("");
	p_file->store_line("func _input(event):");
	p_file->store_line("\tif event is InputEventMouseMotion:");
	p_file->store_line("\t\trotate_y(-event.relative.x * mouse_sensitivity)");
	p_file->store_line("\t\tcamera.rotate_x(-event.relative.y * mouse_sensitivity)");
	p_file->store_line("\t\tcamera.rotation.x = clamp(camera.rotation.x, -PI/2, PI/2)");
	p_file->store_line("");
	p_file->store_line("func _physics_process(delta: float):");
	p_file->store_line("\tif stats.is_dead:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Add gravity");
	p_file->store_line("\tif not is_on_floor():");
	p_file->store_line("\t\tvelocity.y -= gravity * delta");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle jump");
	p_file->store_line("\tif Input.is_action_just_pressed(\"jump\") and is_on_floor():");
	p_file->store_line("\t\tvelocity.y = jump_velocity");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle movement");
	p_file->store_line("\tvar input_dir = Input.get_vector(\"move_left\", \"move_right\", \"move_up\", \"move_down\")");
	p_file->store_line("\tvar direction = (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()");
	p_file->store_line("\t");
	p_file->store_line("\tvar is_sprinting = Input.is_action_pressed(\"sprint\")");
	p_file->store_line("\tvar current_speed = sprint_speed if is_sprinting else base_speed");
	p_file->store_line("\t");
	p_file->store_line("\tif direction:");
	p_file->store_line("\t\tvelocity.x = direction.x * current_speed");
	p_file->store_line("\t\tvelocity.z = direction.z * current_speed");
	p_file->store_line("\telse:");
	p_file->store_line("\t\tvelocity.x = move_toward(velocity.x, 0, current_speed)");
	p_file->store_line("\t\tvelocity.z = move_toward(velocity.z, 0, current_speed)");
	p_file->store_line("\t");
	p_file->store_line("\tmove_and_slide()");
}

void LupineModuleManager::_create_2d_player_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	p_file->store_line("[gd_scene load_steps=2 format=3]");
	p_file->store_line("");
	p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/" + p_scene_name + ".gd\" id=\"1_player_script\"]");
	p_file->store_line("");
	p_file->store_line("[sub_resource type=\"RectangleShape2D\" id=\"RectangleShape2D_1\"]");
	p_file->store_line("size = Vector2(32, 32)");
	p_file->store_line("");
	p_file->store_line("[node name=\"" + p_scene_name + "\" type=\"CharacterBody2D\"]");
	p_file->store_line("script = ExtResource(\"1_player_script\")");
	p_file->store_line("");
	p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\".\"]");
	p_file->store_line("modulate = Color(0.5, 0.8, 1, 1)");
	p_file->store_line("");
	p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\".\"]");
	p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
	p_file->store_line("");
	p_file->store_line("[node name=\"InteractionArea\" type=\"Area2D\" parent=\".\"]");
	p_file->store_line("");
	p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"InteractionArea\"]");
	p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
}

void LupineModuleManager::_create_3d_player_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	p_file->store_line("[gd_scene load_steps=3 format=3]");
	p_file->store_line("");
	p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/" + p_scene_name + ".gd\" id=\"1_player_script\"]");
	p_file->store_line("");
	p_file->store_line("[sub_resource type=\"CapsuleShape3D\" id=\"CapsuleShape3D_1\"]");
	p_file->store_line("radius = 0.5");
	p_file->store_line("height = 2.0");
	p_file->store_line("");
	p_file->store_line("[sub_resource type=\"CapsuleMesh\" id=\"CapsuleMesh_1\"]");
	p_file->store_line("radius = 0.5");
	p_file->store_line("height = 2.0");
	p_file->store_line("");
	p_file->store_line("[node name=\"" + p_scene_name + "\" type=\"CharacterBody3D\"]");
	p_file->store_line("script = ExtResource(\"1_player_script\")");
	p_file->store_line("");
	p_file->store_line("[node name=\"MeshInstance3D\" type=\"MeshInstance3D\" parent=\".\"]");
	p_file->store_line("mesh = SubResource(\"CapsuleMesh_1\")");
	p_file->store_line("");
	p_file->store_line("[node name=\"CollisionShape3D\" type=\"CollisionShape3D\" parent=\".\"]");
	p_file->store_line("shape = SubResource(\"CapsuleShape3D_1\")");
	p_file->store_line("");
	if (p_scene_name.contains("FirstPerson")) {
		p_file->store_line("[node name=\"Camera3D\" type=\"Camera3D\" parent=\".\"]");
		p_file->store_line("transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.8, 0)");
	}
}

void LupineModuleManager::_create_2d_main_scene(Ref<FileAccess> p_file, const String &p_player_scene, const String &p_camera_scene) {
	int load_steps = 1;
	if (!p_player_scene.is_empty()) load_steps++;
	if (!p_camera_scene.is_empty()) load_steps++;

	p_file->store_line("[gd_scene load_steps=" + String::num(load_steps) + " format=3]");
	p_file->store_line("");

	int ext_id = 1;
	if (!p_player_scene.is_empty()) {
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"" + p_player_scene + "\" id=\"" + String::num(ext_id) + "_player\"]");
		ext_id++;
	}
	if (!p_camera_scene.is_empty()) {
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"" + p_camera_scene + "\" id=\"" + String::num(ext_id) + "_camera\"]");
	}
	p_file->store_line("");

	p_file->store_line("[node name=\"Main\" type=\"Node2D\"]");
	p_file->store_line("");

	if (!p_player_scene.is_empty()) {
		p_file->store_line("[node name=\"Player\" parent=\".\" instance=ExtResource(\"1_player\")]");
		p_file->store_line("");
	}

	if (!p_camera_scene.is_empty()) {
		String camera_ext = !p_player_scene.is_empty() ? "2_camera" : "1_camera";
		p_file->store_line("[node name=\"Camera\" parent=\".\" instance=ExtResource(\"" + camera_ext + "\")]");

		// Set up camera to follow player if both exist
		if (!p_player_scene.is_empty()) {
			p_file->store_line("");
			p_file->store_line("# Camera setup script");
			p_file->store_line("[node name=\"CameraSetup\" type=\"Node\" parent=\".\"]");
			p_file->store_line("script = SubResource(\"camera_setup_script\")");
		}
	}
}

void LupineModuleManager::_create_3d_main_scene(Ref<FileAccess> p_file, const String &p_player_scene, const String &p_camera_scene) {
	int load_steps = 1;
	if (!p_player_scene.is_empty()) load_steps++;
	if (!p_camera_scene.is_empty()) load_steps++;

	p_file->store_line("[gd_scene load_steps=" + String::num(load_steps) + " format=3]");
	p_file->store_line("");

	int ext_id = 1;
	if (!p_player_scene.is_empty()) {
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"" + p_player_scene + "\" id=\"" + String::num(ext_id) + "_player\"]");
		ext_id++;
	}
	if (!p_camera_scene.is_empty()) {
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"" + p_camera_scene + "\" id=\"" + String::num(ext_id) + "_camera\"]");
	}
	p_file->store_line("");

	p_file->store_line("[node name=\"Main\" type=\"Node3D\"]");
	p_file->store_line("");

	if (!p_player_scene.is_empty()) {
		p_file->store_line("[node name=\"Player\" parent=\".\" instance=ExtResource(\"1_player\")]");
		p_file->store_line("");
	}

	if (!p_camera_scene.is_empty() && !p_player_scene.contains("FirstPerson")) {
		// Only add separate camera if not first-person (first-person has built-in camera)
		String camera_ext = !p_player_scene.is_empty() ? "2_camera" : "1_camera";
		p_file->store_line("[node name=\"Camera\" parent=\".\" instance=ExtResource(\"" + camera_ext + "\")]");
	}

	// Add basic environment
	p_file->store_line("");
	p_file->store_line("# Basic 3D environment");
	p_file->store_line("[node name=\"DirectionalLight3D\" type=\"DirectionalLight3D\" parent=\".\"]");
	p_file->store_line("transform = Transform3D(0.707107, -0.5, 0.5, 0, 0.707107, 0.707107, -0.707107, -0.5, 0.5, 0, 5, 0)");
	p_file->store_line("");
	p_file->store_line("[node name=\"Ground\" type=\"StaticBody3D\" parent=\".\"]");
	p_file->store_line("");
	p_file->store_line("[node name=\"MeshInstance3D\" type=\"MeshInstance3D\" parent=\"Ground\"]");
	p_file->store_line("mesh = preload(\"res://addons/lupine/meshes/ground_plane.tres\")");
	p_file->store_line("");
	p_file->store_line("[node name=\"CollisionShape3D\" type=\"CollisionShape3D\" parent=\"Ground\"]");
	p_file->store_line("shape = preload(\"res://addons/lupine/shapes/ground_shape.tres\")");
}