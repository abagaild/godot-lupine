#include "menu_builder_module.h"

void MenuBuilderModule::generate_script(Ref<FileAccess> p_file) {
	p_file->store_line("# MenuBuilder.gd");
	p_file->store_line("# Generated by Lupine Engine - Menu Builder System");
	p_file->store_line("# Extensible menu system with customizable layouts and actions");
	p_file->store_line("");
	p_file->store_line("extends Node");
	p_file->store_line("");
	p_file->store_line("# Signals");
	p_file->store_line("signal menu_opened(menu_name: String)");
	p_file->store_line("signal menu_closed(menu_name: String)");
	p_file->store_line("signal menu_action_triggered(action: String, data: Dictionary)");
	p_file->store_line("");
	p_file->store_line("# Menu registry");
	p_file->store_line("var registered_menus: Dictionary = {}");
	p_file->store_line("var active_menus: Array[Control] = []");
	p_file->store_line("var menu_stack: Array[String] = []");
	p_file->store_line("");
	p_file->store_line("# Menu configuration");
	p_file->store_line("var menu_config: Dictionary = {}");
	p_file->store_line("var current_theme: String = \"default\"");
	p_file->store_line("");
	p_file->store_line("# Input handling");
	p_file->store_line("var input_enabled: bool = true");
	p_file->store_line("var escape_closes_menu: bool = true");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\t# Load menu configuration");
	p_file->store_line("\tload_menu_config()");
	p_file->store_line("\tprint(\"Menu Builder initialized\")");
	p_file->store_line("");
	p_file->store_line("func _input(event):");
	p_file->store_line("\tif not input_enabled:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tif event is InputEventKey and event.pressed:");
	p_file->store_line("\t\tif event.keycode == KEY_ESCAPE and escape_closes_menu:");
	p_file->store_line("\t\t\tif menu_stack.size() > 0:");
	p_file->store_line("\t\t\t\tclose_current_menu()");
	p_file->store_line("\t\t\t\tget_viewport().set_input_as_handled()");
	p_file->store_line("");
	p_file->store_line("# Register a menu with the system");
	p_file->store_line("func register_menu(menu_name: String, menu_scene: PackedScene, menu_data: Dictionary = {}):");
	p_file->store_line("\tregistered_menus[menu_name] = {");
	p_file->store_line("\t\t\"scene\": menu_scene,");
	p_file->store_line("\t\t\"data\": menu_data,");
	p_file->store_line("\t\t\"instance\": null");
	p_file->store_line("\t}");
	p_file->store_line("\tprint(\"Registered menu: \", menu_name)");
	p_file->store_line("");
	p_file->store_line("# Open a menu by name");
	p_file->store_line("func open_menu(menu_name: String, close_others: bool = false) -> Control:");
	p_file->store_line("\tif not registered_menus.has(menu_name):");
	p_file->store_line("\t\tprint(\"Error: Menu not registered: \", menu_name)");
	p_file->store_line("\t\treturn null");
	p_file->store_line("\t");
	p_file->store_line("\tif close_others:");
	p_file->store_line("\t\tclose_all_menus()");
	p_file->store_line("\t");
	p_file->store_line("\tvar menu_info = registered_menus[menu_name]");
	p_file->store_line("\tvar menu_instance: Control");
	p_file->store_line("\t");
	p_file->store_line("\t# Reuse existing instance or create new one");
	p_file->store_line("\tif menu_info.instance and is_instance_valid(menu_info.instance):");
	p_file->store_line("\t\tmenu_instance = menu_info.instance");
	p_file->store_line("\telse:");
	p_file->store_line("\t\tmenu_instance = menu_info.scene.instantiate()");
	p_file->store_line("\t\tmenu_info.instance = menu_instance");
	p_file->store_line("\t\t");
	p_file->store_line("\t\t# Connect menu signals if available");
	p_file->store_line("\t\tif menu_instance.has_signal(\"menu_action\"):");
	p_file->store_line("\t\t\tmenu_instance.connect(\"menu_action\", _on_menu_action)");
	p_file->store_line("\t");
	p_file->store_line("\t# Add to scene tree");
	p_file->store_line("\tget_tree().current_scene.add_child(menu_instance)");
	p_file->store_line("\tmenu_instance.visible = true");
	p_file->store_line("\t");
	p_file->store_line("\t# Update tracking");
	p_file->store_line("\tactive_menus.append(menu_instance)");
	p_file->store_line("\tmenu_stack.append(menu_name)");
	p_file->store_line("\t");
	p_file->store_line("\t# Apply theme");
	p_file->store_line("\tapply_theme_to_menu(menu_instance)");
	p_file->store_line("\t");
	p_file->store_line("\temit_signal(\"menu_opened\", menu_name)");
	p_file->store_line("\treturn menu_instance");
	p_file->store_line("");
	p_file->store_line("# Close a specific menu");
	p_file->store_line("func close_menu(menu_name: String):");
	p_file->store_line("\tif not registered_menus.has(menu_name):");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tvar menu_info = registered_menus[menu_name]");
	p_file->store_line("\tif menu_info.instance and is_instance_valid(menu_info.instance):");
	p_file->store_line("\t\tmenu_info.instance.visible = false");
	p_file->store_line("\t\tmenu_info.instance.queue_free()");
	p_file->store_line("\t\tactive_menus.erase(menu_info.instance)");
	p_file->store_line("\t\tmenu_stack.erase(menu_name)");
	p_file->store_line("\t\tmenu_info.instance = null");
	p_file->store_line("\t");
	p_file->store_line("\temit_signal(\"menu_closed\", menu_name)");
	p_file->store_line("");
	p_file->store_line("# Close the most recently opened menu");
	p_file->store_line("func close_current_menu():");
	p_file->store_line("\tif menu_stack.size() > 0:");
	p_file->store_line("\t\tvar current_menu = menu_stack[-1]");
	p_file->store_line("\t\tclose_menu(current_menu)");
	p_file->store_line("");
	p_file->store_line("# Close all active menus");
	p_file->store_line("func close_all_menus():");
	p_file->store_line("\tfor menu_instance in active_menus:");
	p_file->store_line("\t\tif is_instance_valid(menu_instance):");
	p_file->store_line("\t\t\tmenu_instance.queue_free()");
	p_file->store_line("\t");
	p_file->store_line("\tactive_menus.clear()");
	p_file->store_line("\tmenu_stack.clear()");
	p_file->store_line("\t");
	p_file->store_line("\t# Clear instances");
	p_file->store_line("\tfor menu_name in registered_menus:");
	p_file->store_line("\t\tregistered_menus[menu_name].instance = null");
	p_file->store_line("");
	p_file->store_line("# Check if a menu is currently open");
	p_file->store_line("func is_menu_open(menu_name: String) -> bool:");
	p_file->store_line("\treturn menu_stack.has(menu_name)");
	p_file->store_line("");
	p_file->store_line("# Get the currently active menu");
	p_file->store_line("func get_current_menu() -> String:");
	p_file->store_line("\tif menu_stack.size() > 0:");
	p_file->store_line("\t\treturn menu_stack[-1]");
	p_file->store_line("\treturn \"\"");
	p_file->store_line("");
	p_file->store_line("# Load menu configuration from file");
	p_file->store_line("func load_menu_config():");
	p_file->store_line("\tvar config_path = \"res://data/menus/menu_config.json\"");
	p_file->store_line("\tif FileAccess.file_exists(config_path):");
	p_file->store_line("\t\tvar file = FileAccess.open(config_path, FileAccess.READ)");
	p_file->store_line("\t\tif file:");
	p_file->store_line("\t\t\tvar json_text = file.get_as_text()");
	p_file->store_line("\t\t\tfile.close()");
	p_file->store_line("\t\t\t");
	p_file->store_line("\t\t\tvar json = JSON.new()");
	p_file->store_line("\t\t\tvar parse_result = json.parse(json_text)");
	p_file->store_line("\t\t\tif parse_result == OK:");
	p_file->store_line("\t\t\t\tmenu_config = json.data");
	p_file->store_line("\t\t\t\tprint(\"Menu configuration loaded\")");
	p_file->store_line("\t\t\telse:");
	p_file->store_line("\t\t\t\tprint(\"Error parsing menu config: \", json.error_string)");
	p_file->store_line("\telse:");
	p_file->store_line("\t\tprint(\"Menu config file not found, using defaults\")");
	p_file->store_line("");
	p_file->store_line("# Apply theme to a menu");
	p_file->store_line("func apply_theme_to_menu(menu: Control):");
	p_file->store_line("\tif menu_config.has(\"themes\") and menu_config.themes.has(current_theme):");
	p_file->store_line("\t\tvar theme_data = menu_config.themes[current_theme]");
	p_file->store_line("\t\t# Apply theme properties (implement based on your theme system)");
	p_file->store_line("\t\tprint(\"Applied theme '\", current_theme, \"' to menu\")");
	p_file->store_line("");
	p_file->store_line("# Handle menu actions");
	p_file->store_line("func _on_menu_action(action: String, data: Dictionary = {}):");
	p_file->store_line("\temit_signal(\"menu_action_triggered\", action, data)");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle common actions");
	p_file->store_line("\tmatch action:");
	p_file->store_line("\t\t\"close_menu\":");
	p_file->store_line("\t\t\tclose_current_menu()");
	p_file->store_line("\t\t\"close_all_menus\":");
	p_file->store_line("\t\t\tclose_all_menus()");
	p_file->store_line("\t\t\"open_menu\":");
	p_file->store_line("\t\t\tif data.has(\"menu_name\"):");
	p_file->store_line("\t\t\t\topen_menu(data.menu_name, data.get(\"close_others\", false))");
	p_file->store_line("\t\t\"quit_game\":");
	p_file->store_line("\t\t\tget_tree().quit()");
	p_file->store_line("\t\t\"pause_game\":");
	p_file->store_line("\t\t\tget_tree().paused = true");
	p_file->store_line("\t\t\"resume_game\":");
	p_file->store_line("\t\t\tget_tree().paused = false");
	p_file->store_line("");
	p_file->store_line("# Set the current theme");
	p_file->store_line("func set_theme(theme_name: String):");
	p_file->store_line("\tcurrent_theme = theme_name");
	p_file->store_line("\t# Reapply theme to all active menus");
	p_file->store_line("\tfor menu in active_menus:");
	p_file->store_line("\t\tif is_instance_valid(menu):");
	p_file->store_line("\t\t\tapply_theme_to_menu(menu)");
	p_file->store_line("");
	p_file->store_line("# Enable/disable input handling");
	p_file->store_line("func set_input_enabled(enabled: bool):");
	p_file->store_line("\tinput_enabled = enabled");
	p_file->store_line("");
	p_file->store_line("# Get menu configuration");
	p_file->store_line("func get_menu_config() -> Dictionary:");
	p_file->store_line("\treturn menu_config");
}

void MenuBuilderModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "MenuBase") {
		// Generate base menu scene template
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://menu_base\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/MenuBase.gd\" id=\"1_menu_base_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"MenuBase\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_menu_base_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("color = Color(0, 0, 0, 0.8)");
		p_file->store_line("");
		p_file->store_line("[node name=\"MenuContainer\" type=\"CenterContainer\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"MenuPanel\" type=\"Panel\" parent=\"MenuContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("custom_minimum_size = Vector2(400, 300)");
		p_file->store_line("");
		p_file->store_line("[node name=\"VBoxContainer\" type=\"VBoxContainer\" parent=\"MenuContainer/MenuPanel\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 20.0");
		p_file->store_line("offset_top = 20.0");
		p_file->store_line("offset_right = -20.0");
		p_file->store_line("offset_bottom = -20.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"Title\" type=\"Label\" parent=\"MenuContainer/MenuPanel/VBoxContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Menu\"");
		p_file->store_line("horizontal_alignment = 1");
		p_file->store_line("");
		p_file->store_line("[node name=\"ButtonContainer\" type=\"VBoxContainer\" parent=\"MenuContainer/MenuPanel/VBoxContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_vertical = 3");
	} else if (p_scene_name == "MainMenu") {
		// Generate main menu scene
		p_file->store_line("[gd_scene load_steps=3 format=3 uid=\"uid://main_menu\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"res://scenes/ui/MenuBase.tscn\" id=\"1_menu_base\"]");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/MainMenu.gd\" id=\"2_main_menu_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"MainMenu\" instance=ExtResource(\"1_menu_base\")]");
		p_file->store_line("script = ExtResource(\"2_main_menu_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Title\" parent=\"MenuContainer/MenuPanel/VBoxContainer\" index=\"0\"]");
		p_file->store_line("text = \"Main Menu\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"NewGame\" type=\"Button\" parent=\"MenuContainer/MenuPanel/VBoxContainer/ButtonContainer\" index=\"0\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"New Game\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"LoadGame\" type=\"Button\" parent=\"MenuContainer/MenuPanel/VBoxContainer/ButtonContainer\" index=\"1\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Load Game\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"Settings\" type=\"Button\" parent=\"MenuContainer/MenuPanel/VBoxContainer/ButtonContainer\" index=\"2\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Settings\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"Quit\" type=\"Button\" parent=\"MenuContainer/MenuPanel/VBoxContainer/ButtonContainer\" index=\"3\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Quit\"");
	} else if (p_scene_name == "PauseMenu") {
		// Generate pause menu scene
		p_file->store_line("[gd_scene load_steps=3 format=3 uid=\"uid://pause_menu\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"res://scenes/ui/MenuBase.tscn\" id=\"1_menu_base\"]");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/PauseMenu.gd\" id=\"2_pause_menu_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"PauseMenu\" instance=ExtResource(\"1_menu_base\")]");
		p_file->store_line("script = ExtResource(\"2_pause_menu_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Title\" parent=\"MenuContainer/MenuPanel/VBoxContainer\" index=\"0\"]");
		p_file->store_line("text = \"Paused\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"Resume\" type=\"Button\" parent=\"MenuContainer/MenuPanel/VBoxContainer/ButtonContainer\" index=\"0\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Resume\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"Settings\" type=\"Button\" parent=\"MenuContainer/MenuPanel/VBoxContainer/ButtonContainer\" index=\"1\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Settings\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"MainMenu\" type=\"Button\" parent=\"MenuContainer/MenuPanel/VBoxContainer/ButtonContainer\" index=\"2\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Main Menu\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"Quit\" type=\"Button\" parent=\"MenuContainer/MenuPanel/VBoxContainer/ButtonContainer\" index=\"3\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Quit\"");
	} else if (p_scene_name == "SettingsMenu") {
		// Generate settings menu scene
		p_file->store_line("[gd_scene load_steps=3 format=3 uid=\"uid://settings_menu\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"res://scenes/ui/MenuBase.tscn\" id=\"1_menu_base\"]");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/SettingsMenu.gd\" id=\"2_settings_menu_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"SettingsMenu\" instance=ExtResource(\"1_menu_base\")]");
		p_file->store_line("script = ExtResource(\"2_settings_menu_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"MenuPanel\" parent=\"MenuContainer\" index=\"0\"]");
		p_file->store_line("custom_minimum_size = Vector2(500, 400)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Title\" parent=\"MenuContainer/MenuPanel/VBoxContainer\" index=\"0\"]");
		p_file->store_line("text = \"Settings\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"ScrollContainer\" type=\"ScrollContainer\" parent=\"MenuContainer/MenuPanel/VBoxContainer\" index=\"1\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_vertical = 3");
		p_file->store_line("");
		p_file->store_line("[node name=\"SettingsContainer\" type=\"VBoxContainer\" parent=\"MenuContainer/MenuPanel/VBoxContainer/ScrollContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_horizontal = 3");
		p_file->store_line("");
		p_file->store_line("[node name=\"AudioSection\" type=\"Label\" parent=\"MenuContainer/MenuPanel/VBoxContainer/ScrollContainer/SettingsContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Audio\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"MasterVolumeContainer\" type=\"HBoxContainer\" parent=\"MenuContainer/MenuPanel/VBoxContainer/ScrollContainer/SettingsContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("");
		p_file->store_line("[node name=\"MasterVolumeLabel\" type=\"Label\" parent=\"MenuContainer/MenuPanel/VBoxContainer/ScrollContainer/SettingsContainer/MasterVolumeContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Master Volume:\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"MasterVolumeSlider\" type=\"HSlider\" parent=\"MenuContainer/MenuPanel/VBoxContainer/ScrollContainer/SettingsContainer/MasterVolumeContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_horizontal = 3");
		p_file->store_line("max_value = 100.0");
		p_file->store_line("value = 100.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"Back\" type=\"Button\" parent=\"MenuContainer/MenuPanel/VBoxContainer/ButtonContainer\" index=\"0\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Back\"");
	}
}

void MenuBuilderModule::generate_file(Ref<FileAccess> p_file, const String &p_relative_path) {
	String filename = p_relative_path.get_file();

	if (filename == "MenuBase.gd") {
		// Generate base menu script
		p_file->store_line("# MenuBase.gd");
		p_file->store_line("# Generated by Lupine Engine - Base Menu Script");
		p_file->store_line("# Base class for all menu implementations");
		p_file->store_line("");
		p_file->store_line("extends Control");
		p_file->store_line("class_name MenuBase");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal menu_action(action: String, data: Dictionary)");
		p_file->store_line("");
		p_file->store_line("# Menu properties");
		p_file->store_line("@export var menu_name: String = \"\"");
		p_file->store_line("@export var can_pause: bool = false");
		p_file->store_line("@export var close_on_escape: bool = true");
		p_file->store_line("");
		p_file->store_line("# UI references");
		p_file->store_line("@onready var title_label = $MenuContainer/MenuPanel/VBoxContainer/Title");
		p_file->store_line("@onready var button_container = $MenuContainer/MenuPanel/VBoxContainer/ButtonContainer");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Set initial state");
		p_file->store_line("\tif can_pause:");
		p_file->store_line("\t\tget_tree().paused = true");
		p_file->store_line("\t");
		p_file->store_line("\t# Setup menu");
		p_file->store_line("\tsetup_menu()");
		p_file->store_line("");
		p_file->store_line("func _input(event):");
		p_file->store_line("\tif event is InputEventKey and event.pressed:");
		p_file->store_line("\t\tif event.keycode == KEY_ESCAPE and close_on_escape:");
		p_file->store_line("\t\t\tclose_menu()");
		p_file->store_line("\t\t\tget_viewport().set_input_as_handled()");
		p_file->store_line("");
		p_file->store_line("# Override in derived classes");
		p_file->store_line("func setup_menu():");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("# Close this menu");
		p_file->store_line("func close_menu():");
		p_file->store_line("\tif can_pause:");
		p_file->store_line("\t\tget_tree().paused = false");
		p_file->store_line("\t");
		p_file->store_line("\temit_signal(\"menu_action\", \"close_menu\", {})");
		p_file->store_line("\tqueue_free()");
		p_file->store_line("");
		p_file->store_line("# Emit a menu action");
		p_file->store_line("func emit_menu_action(action: String, data: Dictionary = {}):");
		p_file->store_line("\temit_signal(\"menu_action\", action, data)");
		p_file->store_line("");
		p_file->store_line("# Connect button signals");
		p_file->store_line("func connect_button(button: Button, action: String, data: Dictionary = {}):");
		p_file->store_line("\tbutton.pressed.connect(_on_button_pressed.bind(action, data))");
		p_file->store_line("");
		p_file->store_line("# Handle button presses");
		p_file->store_line("func _on_button_pressed(action: String, data: Dictionary):");
		p_file->store_line("\temit_menu_action(action, data)");
	} else if (filename == "MainMenu.gd") {
		// Generate main menu script
		p_file->store_line("# MainMenu.gd");
		p_file->store_line("# Generated by Lupine Engine - Main Menu Script");
		p_file->store_line("# Main menu implementation");
		p_file->store_line("");
		p_file->store_line("extends MenuBase");
		p_file->store_line("");
		p_file->store_line("# UI references");
		p_file->store_line("@onready var new_game_button = $MenuContainer/MenuPanel/VBoxContainer/ButtonContainer/NewGame");
		p_file->store_line("@onready var load_game_button = $MenuContainer/MenuPanel/VBoxContainer/ButtonContainer/LoadGame");
		p_file->store_line("@onready var settings_button = $MenuContainer/MenuPanel/VBoxContainer/ButtonContainer/Settings");
		p_file->store_line("@onready var quit_button = $MenuContainer/MenuPanel/VBoxContainer/ButtonContainer/Quit");
		p_file->store_line("");
		p_file->store_line("func setup_menu():");
		p_file->store_line("\tmenu_name = \"main_menu\"");
		p_file->store_line("\tclose_on_escape = false");
		p_file->store_line("\t");
		p_file->store_line("\t# Connect buttons");
		p_file->store_line("\tconnect_button(new_game_button, \"new_game\")");
		p_file->store_line("\tconnect_button(load_game_button, \"load_game\")");
		p_file->store_line("\tconnect_button(settings_button, \"open_menu\", {\"menu_name\": \"settings\"})");
		p_file->store_line("\tconnect_button(quit_button, \"quit_game\")");
		p_file->store_line("\t");
		p_file->store_line("\tprint(\"Main menu setup complete\")");
	} else if (filename == "PauseMenu.gd") {
		// Generate pause menu script
		p_file->store_line("# PauseMenu.gd");
		p_file->store_line("# Generated by Lupine Engine - Pause Menu Script");
		p_file->store_line("# Pause menu implementation");
		p_file->store_line("");
		p_file->store_line("extends MenuBase");
		p_file->store_line("");
		p_file->store_line("# UI references");
		p_file->store_line("@onready var resume_button = $MenuContainer/MenuPanel/VBoxContainer/ButtonContainer/Resume");
		p_file->store_line("@onready var settings_button = $MenuContainer/MenuPanel/VBoxContainer/ButtonContainer/Settings");
		p_file->store_line("@onready var main_menu_button = $MenuContainer/MenuPanel/VBoxContainer/ButtonContainer/MainMenu");
		p_file->store_line("@onready var quit_button = $MenuContainer/MenuPanel/VBoxContainer/ButtonContainer/Quit");
		p_file->store_line("");
		p_file->store_line("func setup_menu():");
		p_file->store_line("\tmenu_name = \"pause_menu\"");
		p_file->store_line("\tcan_pause = true");
		p_file->store_line("\tclose_on_escape = true");
		p_file->store_line("\t");
		p_file->store_line("\t# Connect buttons");
		p_file->store_line("\tconnect_button(resume_button, \"resume_game\")");
		p_file->store_line("\tconnect_button(settings_button, \"open_menu\", {\"menu_name\": \"settings\"})");
		p_file->store_line("\tconnect_button(main_menu_button, \"load_scene\", {\"scene_path\": \"res://scenes/MainMenu.tscn\"})");
		p_file->store_line("\tconnect_button(quit_button, \"quit_game\")");
		p_file->store_line("\t");
		p_file->store_line("\tprint(\"Pause menu setup complete\")");
	} else if (filename == "SettingsMenu.gd") {
		// Generate settings menu script
		p_file->store_line("# SettingsMenu.gd");
		p_file->store_line("# Generated by Lupine Engine - Settings Menu Script");
		p_file->store_line("# Settings menu implementation");
		p_file->store_line("");
		p_file->store_line("extends MenuBase");
		p_file->store_line("");
		p_file->store_line("# UI references");
		p_file->store_line("@onready var master_volume_slider = $MenuContainer/MenuPanel/VBoxContainer/ScrollContainer/SettingsContainer/MasterVolumeContainer/MasterVolumeSlider");
		p_file->store_line("@onready var back_button = $MenuContainer/MenuPanel/VBoxContainer/ButtonContainer/Back");
		p_file->store_line("");
		p_file->store_line("# Settings data");
		p_file->store_line("var settings_data: Dictionary = {}");
		p_file->store_line("");
		p_file->store_line("func setup_menu():");
		p_file->store_line("\tmenu_name = \"settings_menu\"");
		p_file->store_line("\tclose_on_escape = true");
		p_file->store_line("\t");
		p_file->store_line("\t# Load current settings");
		p_file->store_line("\tload_settings()");
		p_file->store_line("\t");
		p_file->store_line("\t# Connect controls");
		p_file->store_line("\tmaster_volume_slider.value_changed.connect(_on_master_volume_changed)");
		p_file->store_line("\tconnect_button(back_button, \"close_menu\")");
		p_file->store_line("\t");
		p_file->store_line("\tprint(\"Settings menu setup complete\")");
		p_file->store_line("");
		p_file->store_line("func load_settings():");
		p_file->store_line("\t# Load settings from file or use defaults");
		p_file->store_line("\tsettings_data = {");
		p_file->store_line("\t\t\"master_volume\": 100.0");
		p_file->store_line("\t}");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply to UI");
		p_file->store_line("\tmaster_volume_slider.value = settings_data.master_volume");
		p_file->store_line("");
		p_file->store_line("func save_settings():");
		p_file->store_line("\t# Save settings to file");
		p_file->store_line("\tprint(\"Settings saved: \", settings_data)");
		p_file->store_line("");
		p_file->store_line("func _on_master_volume_changed(value: float):");
		p_file->store_line("\tsettings_data.master_volume = value");
		p_file->store_line("\t# Apply volume change immediately");
		p_file->store_line("\tAudioServer.set_bus_volume_db(AudioServer.get_bus_index(\"Master\"), linear_to_db(value / 100.0))");
		p_file->store_line("\tsave_settings()");
	} else if (filename == "menu_config.json") {
		// Generate menu configuration file
		p_file->store_line("{");
		p_file->store_line("\t\"themes\": {");
		p_file->store_line("\t\t\"default\": {");
		p_file->store_line("\t\t\t\"background_color\": \"#000000CC\",");
		p_file->store_line("\t\t\t\"panel_color\": \"#2D2D30\",");
		p_file->store_line("\t\t\t\"text_color\": \"#FFFFFF\",");
		p_file->store_line("\t\t\t\"button_normal\": \"#3C3C3C\",");
		p_file->store_line("\t\t\t\"button_hover\": \"#4C4C4C\",");
		p_file->store_line("\t\t\t\"button_pressed\": \"#5C5C5C\"");
		p_file->store_line("\t\t},");
		p_file->store_line("\t\t\"dark\": {");
		p_file->store_line("\t\t\t\"background_color\": \"#000000DD\",");
		p_file->store_line("\t\t\t\"panel_color\": \"#1E1E1E\",");
		p_file->store_line("\t\t\t\"text_color\": \"#FFFFFF\",");
		p_file->store_line("\t\t\t\"button_normal\": \"#2D2D30\",");
		p_file->store_line("\t\t\t\"button_hover\": \"#3E3E42\",");
		p_file->store_line("\t\t\t\"button_pressed\": \"#4E4E52\"");
		p_file->store_line("\t\t},");
		p_file->store_line("\t\t\"light\": {");
		p_file->store_line("\t\t\t\"background_color\": \"#FFFFFF99\",");
		p_file->store_line("\t\t\t\"panel_color\": \"#F0F0F0\",");
		p_file->store_line("\t\t\t\"text_color\": \"#000000\",");
		p_file->store_line("\t\t\t\"button_normal\": \"#E0E0E0\",");
		p_file->store_line("\t\t\t\"button_hover\": \"#D0D0D0\",");
		p_file->store_line("\t\t\t\"button_pressed\": \"#C0C0C0\"");
		p_file->store_line("\t\t}");
		p_file->store_line("\t},");
		p_file->store_line("\t\"animations\": {");
		p_file->store_line("\t\t\"fade_duration\": 0.3,");
		p_file->store_line("\t\t\"slide_duration\": 0.25,");
		p_file->store_line("\t\t\"scale_duration\": 0.2");
		p_file->store_line("\t},");
		p_file->store_line("\t\"input\": {");
		p_file->store_line("\t\t\"escape_closes_menu\": true,");
		p_file->store_line("\t\t\"controller_navigation\": true");
		p_file->store_line("\t}");
		p_file->store_line("}");
	} else {
		// Default file generation
		LupineModuleBase::generate_file(p_file, p_relative_path);
	}
}
