#include "monster_system_module.h"

void MonsterSystemModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();

	if (filename == "MonsterManager.gd") {
		p_file->store_line("# MonsterManager.gd");
		p_file->store_line("# Generated by Lupine Engine - Monster Manager");
		p_file->store_line("# Central system for managing Pokemon/monsters");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal pokemon_caught(pokemon: Pokemon)");
		p_file->store_line("signal pokemon_evolved(old_pokemon: Pokemon, new_pokemon: Pokemon)");
		p_file->store_line("signal party_changed()");
		p_file->store_line("signal pokemon_healed(pokemon: Pokemon)");
		p_file->store_line("");
		p_file->store_line("# Player's Pokemon data");
		p_file->store_line("var player_party: PokemonParty");
		p_file->store_line("var pokemon_boxes: Array[PokemonBox] = []");
		p_file->store_line("var pokedex_seen: Array[String] = []");
		p_file->store_line("var pokedex_caught: Array[String] = []");
		p_file->store_line("");
		p_file->store_line("# Species and data");
		p_file->store_line("var species_database: Dictionary = {}");
		p_file->store_line("var nature_database: Dictionary = {}");
		p_file->store_line("var ability_database: Dictionary = {}");
		p_file->store_line("var evolution_database: Dictionary = {}");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Initialize player party");
		p_file->store_line("\tplayer_party = PokemonParty.new()");
		p_file->store_line("\t");
		p_file->store_line("\t# Initialize PC boxes");
		p_file->store_line("\tfor i in range(12):  # 12 boxes like in Pokemon games");
		p_file->store_line("\t\tvar box = PokemonBox.new()");
		p_file->store_line("\t\tbox.box_name = \"Box \" + str(i + 1)");
		p_file->store_line("\t\tpokemon_boxes.append(box)");
		p_file->store_line("\t");
		p_file->store_line("\t# Load databases");
		p_file->store_line("\t_load_databases()");
		p_file->store_line("");
		p_file->store_line("func _load_databases():");
		p_file->store_line("\t# Load species data");
		p_file->store_line("\tvar species_file = FileAccess.open(\"res://data/monsters/species.json\", FileAccess.READ)");
		p_file->store_line("\tif species_file:");
		p_file->store_line("\t\tvar json_string = species_file.get_as_text()");
		p_file->store_line("\t\tspecies_file.close()");
		p_file->store_line("\t\tvar json = JSON.new()");
		p_file->store_line("\t\tvar parse_result = json.parse(json_string)");
		p_file->store_line("\t\tif parse_result == OK:");
		p_file->store_line("\t\t\tspecies_database = json.data");
		p_file->store_line("\t");
		p_file->store_line("\t# Load nature data");
		p_file->store_line("\tvar nature_file = FileAccess.open(\"res://data/monsters/natures.json\", FileAccess.READ)");
		p_file->store_line("\tif nature_file:");
		p_file->store_line("\t\tvar json_string = nature_file.get_as_text()");
		p_file->store_line("\t\tnature_file.close()");
		p_file->store_line("\t\tvar json = JSON.new()");
		p_file->store_line("\t\tvar parse_result = json.parse(json_string)");
		p_file->store_line("\t\tif parse_result == OK:");
		p_file->store_line("\t\t\tnature_database = json.data");
		p_file->store_line("");
		p_file->store_line("func create_pokemon(species_name: String, level: int = 5) -> Pokemon:");
		p_file->store_line("\tif not species_database.has(species_name):");
		p_file->store_line("\t\tprint(\"Error: Species not found: \", species_name)");
		p_file->store_line("\t\treturn null");
		p_file->store_line("\t");
		p_file->store_line("\tvar species_data = species_database[species_name]");
		p_file->store_line("\tvar pokemon = Pokemon.new()");
		p_file->store_line("\t");
		p_file->store_line("\t# Set basic info");
		p_file->store_line("\tpokemon.species_name = species_name");
		p_file->store_line("\tpokemon.name = species_name  # Default name is species name");
		p_file->store_line("\tpokemon.level = level");
		p_file->store_line("\tpokemon.type1 = species_data.get(\"type1\", \"normal\")");
		p_file->store_line("\tpokemon.type2 = species_data.get(\"type2\", \"\")");
		p_file->store_line("\t");
		p_file->store_line("\t# Generate random nature");
		p_file->store_line("\tvar nature_names = nature_database.keys()");
		p_file->store_line("\tif not nature_names.is_empty():");
		p_file->store_line("\t\tpokemon.nature = nature_names[randi() % nature_names.size()]");
		p_file->store_line("\t");
		p_file->store_line("\t# Generate random IVs (Individual Values)");
		p_file->store_line("\tpokemon.ivs = {");
		p_file->store_line("\t\t\"hp\": randi() % 32,");
		p_file->store_line("\t\t\"attack\": randi() % 32,");
		p_file->store_line("\t\t\"defense\": randi() % 32,");
		p_file->store_line("\t\t\"sp_attack\": randi() % 32,");
		p_file->store_line("\t\t\"sp_defense\": randi() % 32,");
		p_file->store_line("\t\t\"speed\": randi() % 32");
		p_file->store_line("\t}");
		p_file->store_line("\t");
		p_file->store_line("\t# Initialize EVs (Effort Values)");
		p_file->store_line("\tpokemon.evs = {");
		p_file->store_line("\t\t\"hp\": 0,");
		p_file->store_line("\t\t\"attack\": 0,");
		p_file->store_line("\t\t\"defense\": 0,");
		p_file->store_line("\t\t\"sp_attack\": 0,");
		p_file->store_line("\t\t\"sp_defense\": 0,");
		p_file->store_line("\t\t\"speed\": 0");
		p_file->store_line("\t}");
		p_file->store_line("\t");
		p_file->store_line("\t# Set base stats from species");
		p_file->store_line("\tpokemon.base_stats = species_data.get(\"base_stats\", {");
		p_file->store_line("\t\t\"hp\": 50, \"attack\": 50, \"defense\": 50,");
		p_file->store_line("\t\t\"sp_attack\": 50, \"sp_defense\": 50, \"speed\": 50");
		p_file->store_line("\t})");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate current stats");
		p_file->store_line("\tpokemon.calculate_stats()");
		p_file->store_line("\t");
		p_file->store_line("\t# Set HP to max");
		p_file->store_line("\tpokemon.current_hp = pokemon.max_hp");
		p_file->store_line("\t");
		p_file->store_line("\t# Learn starting moves");
		p_file->store_line("\tvar starting_moves = species_data.get(\"starting_moves\", [\"tackle\"])");
		p_file->store_line("\tfor move_name in starting_moves:");
		p_file->store_line("\t\tif pokemon.moves.size() < 4:");
		p_file->store_line("\t\t\tvar move = _create_move(move_name)");
		p_file->store_line("\t\t\tif move:");
		p_file->store_line("\t\t\t\tpokemon.moves.append(move)");
		p_file->store_line("\t");
		p_file->store_line("\treturn pokemon");
		p_file->store_line("");
		p_file->store_line("func _create_move(move_name: String) -> PokemonMove:");
		p_file->store_line("\t# This would load from a moves database");
		p_file->store_line("\t# For now, create basic moves");
		p_file->store_line("\tvar move = PokemonMove.new()");
		p_file->store_line("\tmove.move_name = move_name");
		p_file->store_line("\t");
		p_file->store_line("\tmatch move_name:");
		p_file->store_line("\t\t\"tackle\":");
		p_file->store_line("\t\t\tmove.move_type = \"normal\"");
		p_file->store_line("\t\t\tmove.power = 40");
		p_file->store_line("\t\t\tmove.accuracy = 100");
		p_file->store_line("\t\t\tmove.pp = 35");
		p_file->store_line("\t\t\tmove.category = \"physical\"");
		p_file->store_line("\t\t\"scratch\":");
		p_file->store_line("\t\t\tmove.move_type = \"normal\"");
		p_file->store_line("\t\t\tmove.power = 40");
		p_file->store_line("\t\t\tmove.accuracy = 100");
		p_file->store_line("\t\t\tmove.pp = 35");
		p_file->store_line("\t\t\tmove.category = \"physical\"");
		p_file->store_line("\t\t\"ember\":");
		p_file->store_line("\t\t\tmove.move_type = \"fire\"");
		p_file->store_line("\t\t\tmove.power = 40");
		p_file->store_line("\t\t\tmove.accuracy = 100");
		p_file->store_line("\t\t\tmove.pp = 25");
		p_file->store_line("\t\t\tmove.category = \"special\"");
		p_file->store_line("\t\t\"water_gun\":");
		p_file->store_line("\t\t\tmove.move_type = \"water\"");
		p_file->store_line("\t\t\tmove.power = 40");
		p_file->store_line("\t\t\tmove.accuracy = 100");
		p_file->store_line("\t\t\tmove.pp = 25");
		p_file->store_line("\t\t\tmove.category = \"special\"");
		p_file->store_line("\t");
		p_file->store_line("\tmove.current_pp = move.pp");
		p_file->store_line("\treturn move");
		p_file->store_line("");
		p_file->store_line("func add_to_party(pokemon: Pokemon) -> bool:");
		p_file->store_line("\treturn player_party.add_pokemon(pokemon)");
		p_file->store_line("");
		p_file->store_line("func add_to_box(pokemon: Pokemon, box_index: int = 0) -> bool:");
		p_file->store_line("\tif box_index >= 0 and box_index < pokemon_boxes.size():");
		p_file->store_line("\t\treturn pokemon_boxes[box_index].add_pokemon(pokemon)");
		p_file->store_line("\treturn false");
		p_file->store_line("");
		p_file->store_line("func catch_pokemon(pokemon: Pokemon):");
		p_file->store_line("\t# Add to Pokedex");
		p_file->store_line("\tif not pokedex_seen.has(pokemon.species_name):");
		p_file->store_line("\t\tpokedex_seen.append(pokemon.species_name)");
		p_file->store_line("\t");
		p_file->store_line("\tif not pokedex_caught.has(pokemon.species_name):");
		p_file->store_line("\t\tpokedex_caught.append(pokemon.species_name)");
		p_file->store_line("\t");
		p_file->store_line("\t# Try to add to party first");
		p_file->store_line("\tif not add_to_party(pokemon):");
		p_file->store_line("\t\t# Party is full, send to PC");
		p_file->store_line("\t\tadd_to_box(pokemon, 0)");
		p_file->store_line("\t");
		p_file->store_line("\tpokemon_caught.emit(pokemon)");
		p_file->store_line("");
		p_file->store_line("func heal_pokemon(pokemon: Pokemon):");
		p_file->store_line("\tpokemon.current_hp = pokemon.max_hp");
		p_file->store_line("\tpokemon.status_effects.clear()");
		p_file->store_line("\t");
		p_file->store_line("\t# Restore PP for all moves");
		p_file->store_line("\tfor move in pokemon.moves:");
		p_file->store_line("\t\tmove.current_pp = move.pp");
		p_file->store_line("\t");
		p_file->store_line("\tpokemon_healed.emit(pokemon)");
		p_file->store_line("");
		p_file->store_line("func heal_party():");
		p_file->store_line("\tfor pokemon in player_party.pokemon:");
		p_file->store_line("\t\tif pokemon:");
		p_file->store_line("\t\t\theal_pokemon(pokemon)");

	} else if (filename == "Pokemon.gd") {
		p_file->store_line("# Pokemon.gd");
		p_file->store_line("# Generated by Lupine Engine - Pokemon/Monster Class");
		p_file->store_line("# Represents an individual Pokemon with all its data");
		p_file->store_line("");
		p_file->store_line("class_name Pokemon");
		p_file->store_line("extends Resource");
		p_file->store_line("");
		p_file->store_line("# Basic info");
		p_file->store_line("@export var species_name: String = \"\"");
		p_file->store_line("@export var name: String = \"\"");
		p_file->store_line("@export var level: int = 1");
		p_file->store_line("@export var experience: int = 0");
		p_file->store_line("@export var type1: String = \"normal\"");
		p_file->store_line("@export var type2: String = \"\"");
		p_file->store_line("");
		p_file->store_line("# Stats");
		p_file->store_line("@export var base_stats: Dictionary = {}");
		p_file->store_line("@export var ivs: Dictionary = {}  # Individual Values");
		p_file->store_line("@export var evs: Dictionary = {}  # Effort Values");
		p_file->store_line("@export var current_stats: Dictionary = {}");
		p_file->store_line("");
		p_file->store_line("# Health");
		p_file->store_line("@export var max_hp: int = 1");
		p_file->store_line("@export var current_hp: int = 1");
		p_file->store_line("");
		p_file->store_line("# Battle data");
		p_file->store_line("@export var moves: Array[PokemonMove] = []");
		p_file->store_line("@export var status_effects: Array[StatusEffect] = []");
		p_file->store_line("@export var nature: String = \"hardy\"");
		p_file->store_line("@export var ability: String = \"\"");
		p_file->store_line("");
		p_file->store_line("# Misc");
		p_file->store_line("@export var gender: String = \"unknown\"");
		p_file->store_line("@export var is_shiny: bool = false");
		p_file->store_line("@export var original_trainer: String = \"\"");
		p_file->store_line("@export var friendship: int = 70");
		p_file->store_line("");
		p_file->store_line("func calculate_stats():");
		p_file->store_line("\t# Calculate stats using Pokemon formula");
		p_file->store_line("\t# HP: ((IV + 2 * Base + EV/4) * Level / 100) + Level + 10");
		p_file->store_line("\t# Other: ((IV + 2 * Base + EV/4) * Level / 100) + 5) * Nature");
		p_file->store_line("\t");
		p_file->store_line("\tvar hp_stat = int(((ivs.get(\"hp\", 0) + 2 * base_stats.get(\"hp\", 50) + evs.get(\"hp\", 0) / 4) * level / 100) + level + 10)");
		p_file->store_line("\tmax_hp = hp_stat");
		p_file->store_line("\tcurrent_stats[\"hp\"] = hp_stat");
		p_file->store_line("\t");
		p_file->store_line("\tfor stat in [\"attack\", \"defense\", \"sp_attack\", \"sp_defense\", \"speed\"]:");
		p_file->store_line("\t\tvar base_value = int(((ivs.get(stat, 0) + 2 * base_stats.get(stat, 50) + evs.get(stat, 0) / 4) * level / 100) + 5)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\t# Apply nature modifier");
		p_file->store_line("\t\tvar nature_modifier = _get_nature_modifier(stat)");
		p_file->store_line("\t\tcurrent_stats[stat] = int(base_value * nature_modifier)");
		p_file->store_line("");
		p_file->store_line("func _get_nature_modifier(stat: String) -> float:");
		p_file->store_line("\t# Simplified nature system");
		p_file->store_line("\t# In a full implementation, this would reference the nature database");
		p_file->store_line("\tmatch nature:");
		p_file->store_line("\t\t\"adamant\":");
		p_file->store_line("\t\t\tif stat == \"attack\": return 1.1");
		p_file->store_line("\t\t\tif stat == \"sp_attack\": return 0.9");
		p_file->store_line("\t\t\"modest\":");
		p_file->store_line("\t\t\tif stat == \"sp_attack\": return 1.1");
		p_file->store_line("\t\t\tif stat == \"attack\": return 0.9");
		p_file->store_line("\t\t\"timid\":");
		p_file->store_line("\t\t\tif stat == \"speed\": return 1.1");
		p_file->store_line("\t\t\tif stat == \"attack\": return 0.9");
		p_file->store_line("\t\t\"jolly\":");
		p_file->store_line("\t\t\tif stat == \"speed\": return 1.1");
		p_file->store_line("\t\t\tif stat == \"sp_attack\": return 0.9");
		p_file->store_line("\t");
		p_file->store_line("\treturn 1.0  # Neutral nature");
		p_file->store_line("");
		p_file->store_line("func get_attack_stat(move_category: String) -> int:");
		p_file->store_line("\tif move_category == \"physical\":");
		p_file->store_line("\t\treturn current_stats.get(\"attack\", 50)");
		p_file->store_line("\telse:");
		p_file->store_line("\t\treturn current_stats.get(\"sp_attack\", 50)");
		p_file->store_line("");
		p_file->store_line("func get_defense_stat(move_category: String) -> int:");
		p_file->store_line("\tif move_category == \"physical\":");
		p_file->store_line("\t\treturn current_stats.get(\"defense\", 50)");
		p_file->store_line("\telse:");
		p_file->store_line("\t\treturn current_stats.get(\"sp_defense\", 50)");
		p_file->store_line("");
		p_file->store_line("func get_effective_speed() -> int:");
		p_file->store_line("\tvar speed = current_stats.get(\"speed\", 50)");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply status effect modifiers");
		p_file->store_line("\tfor effect in status_effects:");
		p_file->store_line("\t\tif effect.stat_modifiers.has(\"speed\"):");
		p_file->store_line("\t\t\tspeed *= effect.stat_modifiers[\"speed\"]");
		p_file->store_line("\t");
		p_file->store_line("\treturn int(speed)");
		p_file->store_line("");
		p_file->store_line("func get_critical_hit_ratio() -> float:");
		p_file->store_line("\t# Base critical hit ratio is 1/24 in Pokemon");
		p_file->store_line("\treturn 1.0 / 24.0");
		p_file->store_line("");
		p_file->store_line("func get_usable_moves() -> Array[PokemonMove]:");
		p_file->store_line("\tvar usable = []");
		p_file->store_line("\tfor move in moves:");
		p_file->store_line("\t\tif move.can_use():");
		p_file->store_line("\t\t\tusable.append(move)");
		p_file->store_line("\treturn usable");
		p_file->store_line("");
		p_file->store_line("func take_damage(damage: int):");
		p_file->store_line("\tcurrent_hp = max(0, current_hp - damage)");
		p_file->store_line("");
		p_file->store_line("func heal(amount: int):");
		p_file->store_line("\tcurrent_hp = min(max_hp, current_hp + amount)");
		p_file->store_line("");
		p_file->store_line("func faint():");
		p_file->store_line("\tcurrent_hp = 0");
		p_file->store_line("\tstatus_effects.clear()");
		p_file->store_line("");
		p_file->store_line("func apply_status_effect(effect: StatusEffect):");
		p_file->store_line("\t# Remove existing effect of same type");
		p_file->store_line("\tfor i in range(status_effects.size() - 1, -1, -1):");
		p_file->store_line("\t\tif status_effects[i].effect_type == effect.effect_type:");
		p_file->store_line("\t\t\tstatus_effects.remove_at(i)");
		p_file->store_line("\t");
		p_file->store_line("\tstatus_effects.append(effect)");

	}
}

void MonsterSystemModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "PartyUI") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://party_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/PartyUI.gd\" id=\"1_party_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"PartyUI\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_party_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"PartyGrid\" type=\"GridContainer\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 8");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = -200.0");
		p_file->store_line("offset_top = -150.0");
		p_file->store_line("offset_right = 200.0");
		p_file->store_line("offset_bottom = 150.0");
		p_file->store_line("columns = 2");

	} else if (p_scene_name == "PokemonSummary") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://pokemon_summary\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/PokemonSummary.gd\" id=\"1_summary_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"PokemonSummary\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_summary_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"InfoPanel\" type=\"VBoxContainer\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 8");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = -250.0");
		p_file->store_line("offset_top = -200.0");
		p_file->store_line("offset_right = 250.0");
		p_file->store_line("offset_bottom = 200.0");

	} else if (p_scene_name == "BoxUI") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://box_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/BoxUI.gd\" id=\"1_box_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"BoxUI\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_box_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"BoxGrid\" type=\"GridContainer\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 8");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = -300.0");
		p_file->store_line("offset_top = -200.0");
		p_file->store_line("offset_right = 300.0");
		p_file->store_line("offset_bottom = 200.0");
		p_file->store_line("columns = 6");
	}
}
