# SaveLoadMenu.gd
# Generated by Lupine Engine - Save/Load Menu UI Script
# Manages the save/load UI for the Save/Load System

extends Control

# UI references
@onready var slot_list = $Panel/VBoxContainer/SaveSlots/SlotList
@onready var quick_save_button = $Panel/VBoxContainer/ButtonContainer/QuickSave
@onready var quick_load_button = $Panel/VBoxContainer/ButtonContainer/QuickLoad
@onready var close_button = $Panel/VBoxContainer/ButtonContainer/Close

# Save slot button scene (create a simple button for each slot)
var save_slot_buttons: Array = []

func _ready():
	# Connect buttons
	quick_save_button.pressed.connect(_on_quick_save_pressed)
	quick_load_button.pressed.connect(_on_quick_load_pressed)
	close_button.pressed.connect(_on_close_pressed)
	
	# Hide initially
	visible = false
	
	print("Save/Load Menu UI initialized")

# Show the save/load menu
func show_menu():
	visible = true
	refresh_save_slots()

# Hide the save/load menu
func hide_menu():
	visible = false

# Refresh the save slot display
func refresh_save_slots():
	# Clear existing buttons
	clear_slot_buttons()
	
	if not SaveLoadSystem:
		return
	
	# Get all saves
	var saves = SaveLoadSystem.get_all_saves()
	
	# Create buttons for regular save slots
	for i in range(SaveLoadSystem.MAX_SAVE_SLOTS):
		var button = create_save_slot_button(i, saves.get(i, {}))
		save_slot_buttons.append(button)
		slot_list.add_child(button)
	
	# Add separator
	var separator = HSeparator.new()
	slot_list.add_child(separator)
	
	# Add special save slots
	if saves.has(SaveLoadSystem.AUTO_SAVE_SLOT):
		var auto_save_button = create_save_slot_button(SaveLoadSystem.AUTO_SAVE_SLOT, saves[SaveLoadSystem.AUTO_SAVE_SLOT])
		save_slot_buttons.append(auto_save_button)
		slot_list.add_child(auto_save_button)
	
	if saves.has(SaveLoadSystem.QUICK_SAVE_SLOT):
		var quick_save_button = create_save_slot_button(SaveLoadSystem.QUICK_SAVE_SLOT, saves[SaveLoadSystem.QUICK_SAVE_SLOT])
		save_slot_buttons.append(quick_save_button)
		slot_list.add_child(quick_save_button)

# Create a save slot button
func create_save_slot_button(slot: int, save_info: Dictionary) -> Control:
	var container = HBoxContainer.new()
	container.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	
	# Slot info
	var info_label = Label.new()
	info_label.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	
	if save_info.is_empty():
		# Empty slot
		var slot_name = get_slot_name(slot)
		info_label.text = slot_name + " - Empty"
		info_label.modulate = Color.GRAY
	else:
		# Occupied slot
		var slot_name = get_slot_name(slot)
		var save_name = save_info.get("save_name", "Unknown")
		var save_time = save_info.get("save_time", "")
		info_label.text = slot_name + " - " + save_name + " (" + save_time + ")"
	
	container.add_child(info_label)
	
	# Buttons
	var button_container = HBoxContainer.new()
	
	# Save button
	var save_button = Button.new()
	save_button.text = "Save"
	save_button.pressed.connect(_on_save_to_slot.bind(slot))
	button_container.add_child(save_button)
	
	# Load button (only if slot has data)
	if not save_info.is_empty():
		var load_button = Button.new()
		load_button.text = "Load"
		load_button.pressed.connect(_on_load_from_slot.bind(slot))
		button_container.add_child(load_button)
		
		# Delete button
		var delete_button = Button.new()
		delete_button.text = "Delete"
		delete_button.pressed.connect(_on_delete_slot.bind(slot))
		button_container.add_child(delete_button)
	
	container.add_child(button_container)
	return container

# Get display name for slot
func get_slot_name(slot: int) -> String:
	match slot:
		SaveLoadSystem.AUTO_SAVE_SLOT:
			return "Auto Save"
		SaveLoadSystem.QUICK_SAVE_SLOT:
			return "Quick Save"
		_:
			return "Slot " + str(slot + 1)

# Clear all slot buttons
func clear_slot_buttons():
	for button in save_slot_buttons:
		if button and is_instance_valid(button):
			button.queue_free()
	save_slot_buttons.clear()
	
	for child in slot_list.get_children():
		child.queue_free()

# Button handlers
func _on_quick_save_pressed():
	if SaveLoadSystem:
		SaveLoadSystem.quick_save()
		refresh_save_slots()

func _on_quick_load_pressed():
	if SaveLoadSystem:
		SaveLoadSystem.quick_load()
		hide_menu()

func _on_close_pressed():
	hide_menu()

func _on_save_to_slot(slot: int):
	if SaveLoadSystem:
		var save_name = "Save " + str(slot + 1)
		if slot == SaveLoadSystem.AUTO_SAVE_SLOT:
			save_name = "Auto Save"
		elif slot == SaveLoadSystem.QUICK_SAVE_SLOT:
			save_name = "Quick Save"
		
		SaveLoadSystem.save_game(slot, save_name)
		refresh_save_slots()

func _on_load_from_slot(slot: int):
	if SaveLoadSystem:
		SaveLoadSystem.load_game(slot)
		hide_menu()

func _on_delete_slot(slot: int):
	if SaveLoadSystem:
		SaveLoadSystem.delete_save(slot)
		refresh_save_slots()

# Handle ESC key to close menu
func _input(event):
	if visible and event is InputEventKey and event.pressed:
		if event.keycode == KEY_ESCAPE:
			hide_menu()
			get_viewport().set_input_as_handled()
