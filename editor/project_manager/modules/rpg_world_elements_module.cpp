#include "rpg_world_elements_module.h"

void RPGWorldElementsModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();

	if (filename == "InteractableBase.gd") {
		p_file->store_line("# InteractableBase.gd");
		p_file->store_line("# Generated by Lupine Engine - Base Interactable Object");
		p_file->store_line("# Base class for all interactive world objects");
		p_file->store_line("");
		p_file->store_line("extends Area2D");
		p_file->store_line("class_name InteractableBase");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal interacted(player: Node)");
		p_file->store_line("signal interaction_available(available: bool)");
		p_file->store_line("");
		p_file->store_line("# Interaction settings");
		p_file->store_line("@export var interaction_prompt: String = \"Press E to interact\"");
		p_file->store_line("@export var can_interact: bool = true");
		p_file->store_line("@export var single_use: bool = false");
		p_file->store_line("@export var requires_item: String = \"\"");
		p_file->store_line("@export var interaction_sound: AudioStream");
		p_file->store_line("");
		p_file->store_line("# State");
		p_file->store_line("var has_been_used: bool = false");
		p_file->store_line("var player_in_range: bool = false");
		p_file->store_line("var current_player: Node = null");
		p_file->store_line("");
		p_file->store_line("# Components");
		p_file->store_line("@onready var sprite: Sprite2D = $Sprite2D");
		p_file->store_line("@onready var collision: CollisionShape2D = $CollisionShape2D");
		p_file->store_line("@onready var audio_player: AudioStreamPlayer2D = $AudioStreamPlayer2D");
		p_file->store_line("@onready var prompt_label: Label = $PromptLabel");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tbody_entered.connect(_on_body_entered)");
		p_file->store_line("\tbody_exited.connect(_on_body_exited)");
		p_file->store_line("\t");
		p_file->store_line("\t# Hide prompt initially");
		p_file->store_line("\tif prompt_label:");
		p_file->store_line("\t\tprompt_label.visible = false");
		p_file->store_line("");
		p_file->store_line("func _on_body_entered(body: Node):");
		p_file->store_line("\tif body.has_method(\"take_damage\") and body.name.contains(\"Player\"):");
		p_file->store_line("\t\tcurrent_player = body");
		p_file->store_line("\t\tplayer_in_range = true");
		p_file->store_line("\t\t_update_interaction_prompt()");
		p_file->store_line("");
		p_file->store_line("func _on_body_exited(body: Node):");
		p_file->store_line("\tif body == current_player:");
		p_file->store_line("\t\tcurrent_player = null");
		p_file->store_line("\t\tplayer_in_range = false");
		p_file->store_line("\t\t_hide_interaction_prompt()");
		p_file->store_line("");
		p_file->store_line("func interact(player: Node):");
		p_file->store_line("\tif not can_interact_with(player):");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Play interaction sound");
		p_file->store_line("\tif interaction_sound and audio_player:");
		p_file->store_line("\t\taudio_player.stream = interaction_sound");
		p_file->store_line("\t\taudio_player.play()");
		p_file->store_line("\t");
		p_file->store_line("\t# Perform interaction");
		p_file->store_line("\t_perform_interaction(player)");
		p_file->store_line("\t");
		p_file->store_line("\t# Mark as used if single use");
		p_file->store_line("\tif single_use:");
		p_file->store_line("\t\thas_been_used = true");
		p_file->store_line("\t\tcan_interact = false");
		p_file->store_line("\t\t_update_interaction_prompt()");
		p_file->store_line("\t");
		p_file->store_line("\tinteracted.emit(player)");
		p_file->store_line("");
		p_file->store_line("func can_interact_with(player: Node) -> bool:");
		p_file->store_line("\tif not can_interact or (single_use and has_been_used):");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if player has required item");
		p_file->store_line("\tif requires_item != \"\" and InventorySystem:");
		p_file->store_line("\t\tif not InventorySystem.has_item(requires_item):");
		p_file->store_line("\t\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func _perform_interaction(player: Node):");
		p_file->store_line("\t# Override in derived classes");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("func _update_interaction_prompt():");
		p_file->store_line("\tif not prompt_label:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tif player_in_range and can_interact_with(current_player):");
		p_file->store_line("\t\tprompt_label.text = interaction_prompt");
		p_file->store_line("\t\tprompt_label.visible = true");
		p_file->store_line("\t\tinteraction_available.emit(true)");
		p_file->store_line("\telse:");
		p_file->store_line("\t\tprompt_label.visible = false");
		p_file->store_line("\t\tinteraction_available.emit(false)");
		p_file->store_line("");
		p_file->store_line("func _hide_interaction_prompt():");
		p_file->store_line("\tif prompt_label:");
		p_file->store_line("\t\tprompt_label.visible = false");
		p_file->store_line("\tinteraction_available.emit(false)");
		p_file->store_line("");
		p_file->store_line("func set_interaction_enabled(enabled: bool):");
		p_file->store_line("\tcan_interact = enabled");
		p_file->store_line("\t_update_interaction_prompt()");
	} else if (filename == "Chest.gd") {
		p_file->store_line("# Chest.gd");
		p_file->store_line("# Generated by Lupine Engine - Treasure Chest");
		p_file->store_line("# Interactable chest that gives items to the player");
		p_file->store_line("");
		p_file->store_line("extends InteractableBase");
		p_file->store_line("class_name Chest");
		p_file->store_line("");
		p_file->store_line("# Chest settings");
		p_file->store_line("@export var chest_contents: Array[Dictionary] = []");
		p_file->store_line("@export var gold_amount: int = 0");
		p_file->store_line("@export var experience_reward: int = 0");
		p_file->store_line("@export var chest_id: String = \"\"");
		p_file->store_line("@export var open_animation_duration: float = 0.5");
		p_file->store_line("");
		p_file->store_line("# Visual states");
		p_file->store_line("@export var closed_texture: Texture2D");
		p_file->store_line("@export var open_texture: Texture2D");
		p_file->store_line("");
		p_file->store_line("# State");
		p_file->store_line("var is_open: bool = false");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tsuper._ready()");
		p_file->store_line("\t");
		p_file->store_line("\t# Set initial appearance");
		p_file->store_line("\tif closed_texture and sprite:");
		p_file->store_line("\t\tsprite.texture = closed_texture");
		p_file->store_line("\t");
		p_file->store_line("\t# Load chest state if it has an ID");
		p_file->store_line("\tif chest_id != \"\" and SaveLoadSystem:");
		p_file->store_line("\t\tis_open = SaveLoadSystem.get_world_state(\"chest_\" + chest_id, false)");
		p_file->store_line("\t\thas_been_used = is_open");
		p_file->store_line("\t\tcan_interact = not is_open");
		p_file->store_line("\t\t_update_visual_state()");
		p_file->store_line("");
		p_file->store_line("func _perform_interaction(player: Node):");
		p_file->store_line("\tif is_open:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Open chest");
		p_file->store_line("\tis_open = true");
		p_file->store_line("\t_play_open_animation()");
		p_file->store_line("\t");
		p_file->store_line("\t# Give contents to player");
		p_file->store_line("\t_give_contents_to_player(player)");
		p_file->store_line("\t");
		p_file->store_line("\t# Save chest state");
		p_file->store_line("\tif chest_id != \"\" and SaveLoadSystem:");
		p_file->store_line("\t\tSaveLoadSystem.set_world_state(\"chest_\" + chest_id, true)");
		p_file->store_line("");
		p_file->store_line("func _give_contents_to_player(player: Node):");
		p_file->store_line("\tvar items_received: Array[String] = []");
		p_file->store_line("\t");
		p_file->store_line("\t# Give items");
		p_file->store_line("\tfor item_data in chest_contents:");
		p_file->store_line("\t\tvar item_id = item_data.get(\"id\", \"\")");
		p_file->store_line("\t\tvar quantity = item_data.get(\"quantity\", 1)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tif item_id != \"\" and InventorySystem:");
		p_file->store_line("\t\t\tif InventorySystem.add_item(item_id, quantity):");
		p_file->store_line("\t\t\t\titems_received.append(item_id + \" x\" + str(quantity))");
		p_file->store_line("\t");
		p_file->store_line("\t# Give gold");
		p_file->store_line("\tif gold_amount > 0 and PlayerStats:");
		p_file->store_line("\t\tPlayerStats.add_gold(gold_amount)");
		p_file->store_line("\t\titems_received.append(str(gold_amount) + \" gold\")");
		p_file->store_line("\t");
		p_file->store_line("\t# Give experience");
		p_file->store_line("\tif experience_reward > 0 and PlayerStats:");
		p_file->store_line("\t\tPlayerStats.add_experience(experience_reward)");
		p_file->store_line("\t\titems_received.append(str(experience_reward) + \" XP\")");
		p_file->store_line("\t");
		p_file->store_line("\t# Show notification");
		p_file->store_line("\tif PopupManager and items_received.size() > 0:");
		p_file->store_line("\t\tvar message = \"Found: \" + \", \".join(items_received)");
		p_file->store_line("\t\tPopupManager.show_notification(message)");
		p_file->store_line("");
		p_file->store_line("func _play_open_animation():");
		p_file->store_line("\tvar tween = create_tween()");
		p_file->store_line("\ttween.tween_property(sprite, \"scale\", Vector2(1.2, 1.2), open_animation_duration * 0.3)");
		p_file->store_line("\ttween.tween_property(sprite, \"scale\", Vector2(1.0, 1.0), open_animation_duration * 0.7)");
		p_file->store_line("\ttween.tween_callback(_update_visual_state)");
		p_file->store_line("");
		p_file->store_line("func _update_visual_state():");
		p_file->store_line("\tif sprite:");
		p_file->store_line("\t\tif is_open and open_texture:");
		p_file->store_line("\t\t\tsprite.texture = open_texture");
		p_file->store_line("\t\telif not is_open and closed_texture:");
		p_file->store_line("\t\t\tsprite.texture = closed_texture");
	}
}

void RPGWorldElementsModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "Chest") {
		p_file->store_line("[gd_scene load_steps=4 format=3 uid=\"uid://chest\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/world/Chest.gd\" id=\"1_chest_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"RectangleShape2D\" id=\"RectangleShape2D_1\"]");
		p_file->store_line("size = Vector2(32, 32)");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"LabelSettings\" id=\"LabelSettings_1\"]");
		p_file->store_line("font_size = 12");
		p_file->store_line("");
		p_file->store_line("[node name=\"Chest\" type=\"Area2D\"]");
		p_file->store_line("script = ExtResource(\"1_chest_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("modulate = Color(0.8, 0.6, 0.2, 1)");
		p_file->store_line("");
		p_file->store_line("[node name=\"AudioStreamPlayer2D\" type=\"AudioStreamPlayer2D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"PromptLabel\" type=\"Label\" parent=\".\"]");
		p_file->store_line("offset_left = -50.0");
		p_file->store_line("offset_top = -50.0");
		p_file->store_line("offset_right = 50.0");
		p_file->store_line("offset_bottom = -30.0");
		p_file->store_line("text = \"Press E to open\"");
		p_file->store_line("label_settings = SubResource(\"LabelSettings_1\")");
		p_file->store_line("horizontal_alignment = 1");
	} else if (p_scene_name == "Door") {
		p_file->store_line("[gd_scene load_steps=3 format=3 uid=\"uid://door\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/world/Door.gd\" id=\"1_door_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"RectangleShape2D\" id=\"RectangleShape2D_1\"]");
		p_file->store_line("size = Vector2(32, 48)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Door\" type=\"Area2D\"]");
		p_file->store_line("script = ExtResource(\"1_door_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("modulate = Color(0.6, 0.4, 0.2, 1)");
		p_file->store_line("");
		p_file->store_line("[node name=\"AudioStreamPlayer2D\" type=\"AudioStreamPlayer2D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"PromptLabel\" type=\"Label\" parent=\".\"]");
		p_file->store_line("offset_left = -50.0");
		p_file->store_line("offset_top = -60.0");
		p_file->store_line("offset_right = 50.0");
		p_file->store_line("offset_bottom = -40.0");
		p_file->store_line("text = \"Press E to open\"");
		p_file->store_line("horizontal_alignment = 1");
	}
}
