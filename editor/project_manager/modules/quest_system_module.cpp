#include "quest_system_module.h"

void QuestSystemModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();
	
	if (filename == "QuestSystem.gd") {
		p_file->store_line("# QuestSystem.gd");
		p_file->store_line("# Generated by Lupine Engine - Quest System");
		p_file->store_line("# Comprehensive quest management system");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal quest_started(quest_id: String)");
		p_file->store_line("signal quest_completed(quest_id: String)");
		p_file->store_line("signal quest_failed(quest_id: String)");
		p_file->store_line("signal objective_completed(quest_id: String, objective_id: String)");
		p_file->store_line("signal quest_progress_updated(quest_id: String, objective_id: String, progress: int, target: int)");
		p_file->store_line("");
		p_file->store_line("# Quest data");
		p_file->store_line("var quest_database: Dictionary = {}");
		p_file->store_line("var active_quests: Dictionary = {}");
		p_file->store_line("var completed_quests: Array[String] = []");
		p_file->store_line("var failed_quests: Array[String] = []");
		p_file->store_line("");
		p_file->store_line("# Tracking");
		p_file->store_line("var tracked_quest: String = \"\"");
		p_file->store_line("var quest_tracker_ui: Control = null");
		p_file->store_line("var quest_journal_ui: Control = null");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t_load_quest_database()");
		p_file->store_line("\t_setup_ui()");
		p_file->store_line("");
		p_file->store_line("func start_quest(quest_id: String) -> bool:");
		p_file->store_line("\tif not quest_database.has(quest_id):");
		p_file->store_line("\t\tprint(\"Quest not found: \", quest_id)");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\tif active_quests.has(quest_id) or is_quest_completed(quest_id):");
		p_file->store_line("\t\tprint(\"Quest already active or completed: \", quest_id)");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Create quest instance");
		p_file->store_line("\tvar quest_data = quest_database[quest_id].duplicate(true)");
		p_file->store_line("\tquest_data.status = \"active\"");
		p_file->store_line("\tquest_data.start_time = Time.get_unix_time_from_system()");
		p_file->store_line("\t");
		p_file->store_line("\t# Initialize objectives");
		p_file->store_line("\tfor objective in quest_data.objectives:");
		p_file->store_line("\t\tobjective.current_progress = 0");
		p_file->store_line("\t\tobjective.completed = false");
		p_file->store_line("\t");
		p_file->store_line("\tactive_quests[quest_id] = quest_data");
		p_file->store_line("\t");
		p_file->store_line("\t# Auto-track if no quest is currently tracked");
		p_file->store_line("\tif tracked_quest == \"\":");
		p_file->store_line("\t\ttrack_quest(quest_id)");
		p_file->store_line("\t");
		p_file->store_line("\tquest_started.emit(quest_id)");
		p_file->store_line("\t");
		p_file->store_line("\t# Show popup notification");
		p_file->store_line("\tif PopupManager:");
		p_file->store_line("\t\tPopupManager.show_quest_notification(\"Quest Started\", quest_data.title)");
		p_file->store_line("\t");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func complete_quest(quest_id: String):");
		p_file->store_line("\tif not active_quests.has(quest_id):");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar quest = active_quests[quest_id]");
		p_file->store_line("\tquest.status = \"completed\"");
		p_file->store_line("\tquest.completion_time = Time.get_unix_time_from_system()");
		p_file->store_line("\t");
		p_file->store_line("\t# Give rewards");
		p_file->store_line("\t_give_quest_rewards(quest)");
		p_file->store_line("\t");
		p_file->store_line("\t# Move to completed quests");
		p_file->store_line("\tcompleted_quests.append(quest_id)");
		p_file->store_line("\tactive_quests.erase(quest_id)");
		p_file->store_line("\t");
		p_file->store_line("\t# Update tracking");
		p_file->store_line("\tif tracked_quest == quest_id:");
		p_file->store_line("\t\t_auto_track_next_quest()");
		p_file->store_line("\t");
		p_file->store_line("\tquest_completed.emit(quest_id)");
		p_file->store_line("\t");
		p_file->store_line("\t# Show completion popup");
		p_file->store_line("\tif PopupManager:");
		p_file->store_line("\t\tPopupManager.show_quest_notification(\"Quest Complete!\", quest.title)");
		p_file->store_line("");
		p_file->store_line("func update_objective_progress(quest_id: String, objective_type: String, target_id: String = \"\", amount: int = 1):");
		p_file->store_line("\tif not active_quests.has(quest_id):");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar quest = active_quests[quest_id]");
		p_file->store_line("\tvar quest_updated = false");
		p_file->store_line("\t");
		p_file->store_line("\tfor objective in quest.objectives:");
		p_file->store_line("\t\tif objective.completed:");
		p_file->store_line("\t\t\tcontinue");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tvar matches = false");
		p_file->store_line("\t\tmatch objective.type:");
		p_file->store_line("\t\t\t\"kill\":");
		p_file->store_line("\t\t\t\tmatches = objective_type == \"enemy_killed\" and (target_id == \"\" or objective.target == target_id)");
		p_file->store_line("\t\t\t\"collect\":");
		p_file->store_line("\t\t\t\tmatches = objective_type == \"item_collected\" and objective.target == target_id");
		p_file->store_line("\t\t\t\"interact\":");
		p_file->store_line("\t\t\t\tmatches = objective_type == \"npc_talked\" and objective.target == target_id");
		p_file->store_line("\t\t\t\"reach\":");
		p_file->store_line("\t\t\t\tmatches = objective_type == \"location_reached\" and objective.target == target_id");
		p_file->store_line("\t\t\t\"escort\":");
		p_file->store_line("\t\t\t\tmatches = objective_type == \"escort_progress\" and objective.target == target_id");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tif matches:");
		p_file->store_line("\t\t\tobjective.current_progress = min(objective.current_progress + amount, objective.target_amount)");
		p_file->store_line("\t\t\tquest_updated = true");
		p_file->store_line("\t\t\t");
		p_file->store_line("\t\t\tquest_progress_updated.emit(quest_id, objective.id, objective.current_progress, objective.target_amount)");
		p_file->store_line("\t\t\t");
		p_file->store_line("\t\t\tif objective.current_progress >= objective.target_amount:");
		p_file->store_line("\t\t\t\tobjective.completed = true");
		p_file->store_line("\t\t\t\tobjective_completed.emit(quest_id, objective.id)");
		p_file->store_line("\t");
		p_file->store_line("\tif quest_updated:");
		p_file->store_line("\t\t_check_quest_completion(quest_id)");
		p_file->store_line("\t\t_update_quest_tracker()");
		p_file->store_line("");
		p_file->store_line("func _check_quest_completion(quest_id: String):");
		p_file->store_line("\tvar quest = active_quests[quest_id]");
		p_file->store_line("\tvar all_completed = true");
		p_file->store_line("\t");
		p_file->store_line("\tfor objective in quest.objectives:");
		p_file->store_line("\t\tif not objective.completed:");
		p_file->store_line("\t\t\tall_completed = false");
		p_file->store_line("\t\t\tbreak");
		p_file->store_line("\t");
		p_file->store_line("\tif all_completed:");
		p_file->store_line("\t\tcomplete_quest(quest_id)");
		p_file->store_line("");
		p_file->store_line("func track_quest(quest_id: String):");
		p_file->store_line("\tif active_quests.has(quest_id):");
		p_file->store_line("\t\ttracked_quest = quest_id");
		p_file->store_line("\t\t_update_quest_tracker()");
		p_file->store_line("");
		p_file->store_line("func untrack_quest():");
		p_file->store_line("\ttracked_quest = \"\"");
		p_file->store_line("\t_update_quest_tracker()");
		p_file->store_line("");
		p_file->store_line("func is_quest_active(quest_id: String) -> bool:");
		p_file->store_line("\treturn active_quests.has(quest_id)");
		p_file->store_line("");
		p_file->store_line("func is_quest_completed(quest_id: String) -> bool:");
		p_file->store_line("\treturn completed_quests.has(quest_id)");
		p_file->store_line("");
		p_file->store_line("func get_quest_data(quest_id: String) -> Dictionary:");
		p_file->store_line("\tif active_quests.has(quest_id):");
		p_file->store_line("\t\treturn active_quests[quest_id]");
		p_file->store_line("\treturn {}");
		p_file->store_line("");
		p_file->store_line("func _give_quest_rewards(quest: Dictionary):");
		p_file->store_line("\tif quest.has(\"rewards\"):");
		p_file->store_line("\t\tfor reward in quest.rewards:");
		p_file->store_line("\t\t\tmatch reward.type:");
		p_file->store_line("\t\t\t\t\"experience\":");
		p_file->store_line("\t\t\t\t\tif PlayerStats:");
		p_file->store_line("\t\t\t\t\t\tPlayerStats.add_experience(reward.amount)");
		p_file->store_line("\t\t\t\t\"item\":");
		p_file->store_line("\t\t\t\t\tif InventorySystem:");
		p_file->store_line("\t\t\t\t\t\tInventorySystem.add_item(reward.item_id, reward.amount)");
		p_file->store_line("\t\t\t\t\"gold\":");
		p_file->store_line("\t\t\t\t\tif PlayerStats:");
		p_file->store_line("\t\t\t\t\t\tPlayerStats.add_gold(reward.amount)");
		p_file->store_line("");
		p_file->store_line("func _auto_track_next_quest():");
		p_file->store_line("\tif active_quests.size() > 0:");
		p_file->store_line("\t\tvar next_quest_id = active_quests.keys()[0]");
		p_file->store_line("\t\ttrack_quest(next_quest_id)");
		p_file->store_line("\telse:");
		p_file->store_line("\t\tuntrack_quest()");
		p_file->store_line("");
		p_file->store_line("func _setup_ui():");
		p_file->store_line("\t# Load quest tracker UI");
		p_file->store_line("\tvar tracker_scene = preload(\"res://scenes/ui/QuestTracker.tscn\")");
		p_file->store_line("\tquest_tracker_ui = tracker_scene.instantiate()");
		p_file->store_line("\tget_tree().current_scene.add_child(quest_tracker_ui)");
		p_file->store_line("\t");
		p_file->store_line("\t# Load quest journal UI");
		p_file->store_line("\tvar journal_scene = preload(\"res://scenes/ui/QuestJournal.tscn\")");
		p_file->store_line("\tquest_journal_ui = journal_scene.instantiate()");
		p_file->store_line("\tget_tree().current_scene.add_child(quest_journal_ui)");
		p_file->store_line("\tquest_journal_ui.visible = false");
		p_file->store_line("");
		p_file->store_line("func _update_quest_tracker():");
		p_file->store_line("\tif quest_tracker_ui and quest_tracker_ui.has_method(\"update_display\"):");
		p_file->store_line("\t\tif tracked_quest != \"\" and active_quests.has(tracked_quest):");
		p_file->store_line("\t\t\tquest_tracker_ui.update_display(active_quests[tracked_quest])");
		p_file->store_line("\t\telse:");
		p_file->store_line("\t\t\tquest_tracker_ui.update_display({})");
		p_file->store_line("");
		p_file->store_line("func _load_quest_database():");
		p_file->store_line("\t# Load quest data from JSON");
		p_file->store_line("\tvar file_path = \"res://data/quests.json\"");
		p_file->store_line("\tvar file = FileAccess.open(file_path, FileAccess.READ)");
		p_file->store_line("\tif file:");
		p_file->store_line("\t\tvar json_text = file.get_as_text()");
		p_file->store_line("\t\tfile.close()");
		p_file->store_line("\t\tvar json = JSON.new()");
		p_file->store_line("\t\tvar parse_result = json.parse(json_text)");
		p_file->store_line("\t\tif parse_result == OK:");
		p_file->store_line("\t\t\tquest_database = json.data");
		p_file->store_line("\telse:");
		p_file->store_line("\t\t_create_default_quests()");
		p_file->store_line("");
		p_file->store_line("func _create_default_quests():");
		p_file->store_line("\tquest_database = {");
		p_file->store_line("\t\t\"tutorial_quest\": {");
		p_file->store_line("\t\t\t\"id\": \"tutorial_quest\",");
		p_file->store_line("\t\t\t\"title\": \"Getting Started\",");
		p_file->store_line("\t\t\t\"description\": \"Learn the basics of the game\",");
		p_file->store_line("\t\t\t\"objectives\": [");
		p_file->store_line("\t\t\t\t{");
		p_file->store_line("\t\t\t\t\t\"id\": \"talk_to_npc\",");
		p_file->store_line("\t\t\t\t\t\"type\": \"interact\",");
		p_file->store_line("\t\t\t\t\t\"description\": \"Talk to the village elder\",");
		p_file->store_line("\t\t\t\t\t\"target\": \"village_elder\",");
		p_file->store_line("\t\t\t\t\t\"target_amount\": 1");
		p_file->store_line("\t\t\t\t}");
		p_file->store_line("\t\t\t],");
		p_file->store_line("\t\t\t\"rewards\": [");
		p_file->store_line("\t\t\t\t{\"type\": \"experience\", \"amount\": 100},");
		p_file->store_line("\t\t\t\t{\"type\": \"gold\", \"amount\": 50}");
		p_file->store_line("\t\t\t]");
		p_file->store_line("\t\t}");
		p_file->store_line("\t}");
	} else if (filename == "Quest.gd") {
		p_file->store_line("# Quest.gd");
		p_file->store_line("# Generated by Lupine Engine - Quest Data Class");
		p_file->store_line("# Data structure for individual quests");
		p_file->store_line("");
		p_file->store_line("extends Resource");
		p_file->store_line("class_name Quest");
		p_file->store_line("");
		p_file->store_line("@export var id: String");
		p_file->store_line("@export var title: String");
		p_file->store_line("@export var description: String");
		p_file->store_line("@export var objectives: Array[QuestObjective]");
		p_file->store_line("@export var rewards: Array[Dictionary]");
		p_file->store_line("@export var prerequisites: Array[String]");
		p_file->store_line("@export var auto_complete: bool = false");
		p_file->store_line("@export var time_limit: float = 0.0");
		p_file->store_line("");
		p_file->store_line("var status: String = \"inactive\"  # inactive, active, completed, failed");
		p_file->store_line("var start_time: float = 0.0");
		p_file->store_line("var completion_time: float = 0.0");
	} else if (filename == "QuestObjective.gd") {
		p_file->store_line("# QuestObjective.gd");
		p_file->store_line("# Generated by Lupine Engine - Quest Objective Data Class");
		p_file->store_line("# Data structure for quest objectives");
		p_file->store_line("");
		p_file->store_line("extends Resource");
		p_file->store_line("class_name QuestObjective");
		p_file->store_line("");
		p_file->store_line("@export var id: String");
		p_file->store_line("@export var type: String  # kill, collect, interact, reach, escort");
		p_file->store_line("@export var description: String");
		p_file->store_line("@export var target: String");
		p_file->store_line("@export var target_amount: int = 1");
		p_file->store_line("@export var optional: bool = false");
		p_file->store_line("");
		p_file->store_line("var current_progress: int = 0");
		p_file->store_line("var completed: bool = false");
	}
}

void QuestSystemModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "QuestTracker") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://quest_tracker\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/QuestTracker.gd\" id=\"1_quest_tracker_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"QuestTracker\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 1");
		p_file->store_line("anchor_left = 1.0");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("offset_left = -300.0");
		p_file->store_line("offset_top = 20.0");
		p_file->store_line("offset_right = -20.0");
		p_file->store_line("offset_bottom = 200.0");
		p_file->store_line("script = ExtResource(\"1_quest_tracker_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"NinePatchRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"VBox\" type=\"VBoxContainer\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 10.0");
		p_file->store_line("offset_top = 10.0");
		p_file->store_line("offset_right = -10.0");
		p_file->store_line("offset_bottom = -10.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"QuestTitle\" type=\"Label\" parent=\"VBox\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"No Active Quest\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"ObjectivesList\" type=\"VBoxContainer\" parent=\"VBox\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_vertical = 3");
	} else if (p_scene_name == "QuestJournal") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://quest_journal\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/QuestJournal.gd\" id=\"1_quest_journal_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"QuestJournal\" type=\"Control\"]");
		p_file->store_line("process_mode = 2");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_quest_journal_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("color = Color(0, 0, 0, 0.7)");
		p_file->store_line("");
		p_file->store_line("[node name=\"JournalPanel\" type=\"Panel\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 8");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = -400.0");
		p_file->store_line("offset_top = -300.0");
		p_file->store_line("offset_right = 400.0");
		p_file->store_line("offset_bottom = 300.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"HBox\" type=\"HBoxContainer\" parent=\"JournalPanel\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 10.0");
		p_file->store_line("offset_top = 10.0");
		p_file->store_line("offset_right = -10.0");
		p_file->store_line("offset_bottom = -10.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"QuestList\" type=\"ItemList\" parent=\"JournalPanel/HBox\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_horizontal = 3");
		p_file->store_line("");
		p_file->store_line("[node name=\"QuestDetails\" type=\"VBoxContainer\" parent=\"JournalPanel/HBox\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_horizontal = 3");
		p_file->store_line("size_flags_stretch_ratio = 2.0");
	}
}
