#include "tactical_party_system_module.h"

void TacticalPartySystemModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();

	if (filename == "TacticalPartyManager.gd") {
		p_file->store_line("# TacticalPartyManager.gd");
		p_file->store_line("# Generated by Lupine Engine - Tactical Party Manager");
		p_file->store_line("# Commander-style party management for tactical RPGs");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal unit_recruited(unit: TacticalUnit)");
		p_file->store_line("signal unit_dismissed(unit: TacticalUnit)");
		p_file->store_line("signal unit_class_changed(unit: TacticalUnit, old_class: String, new_class: String)");
		p_file->store_line("signal army_composition_changed()");
		p_file->store_line("signal commander_selected(unit: TacticalUnit)");
		p_file->store_line("");
		p_file->store_line("# Army management");
		p_file->store_line("var player_army: Array[TacticalUnit] = []");
		p_file->store_line("var allied_units: Array[TacticalUnit] = []");
		p_file->store_line("var commander_unit: TacticalUnit = null");
		p_file->store_line("var max_army_size: int = 12");
		p_file->store_line("var deployment_limit: int = 8");
		p_file->store_line("");
		p_file->store_line("# Recruitment settings");
		p_file->store_line("var recruitment_gold_cost_base: int = 100");
		p_file->store_line("var recruitment_level_multiplier: float = 1.5");
		p_file->store_line("var dismissal_gold_return: float = 0.5");
		p_file->store_line("");
		p_file->store_line("# Class system");
		p_file->store_line("var class_system: ClassSystem");
		p_file->store_line("var recruitment_system: RecruitmentSystem");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Initialize systems");
		p_file->store_line("\tclass_system = ClassSystem.new()");
		p_file->store_line("\trecruitment_system = RecruitmentSystem.new()");
		p_file->store_line("\t");
		p_file->store_line("\t# Load class data");
		p_file->store_line("\tclass_system.load_classes_from_file(\"res://data/classes/default_classes.json\")");
		p_file->store_line("\trecruitment_system.load_recruitable_units(\"res://data/units/recruitable_units.json\")");
		p_file->store_line("");
		p_file->store_line("func set_commander(unit: TacticalUnit):");
		p_file->store_line("\tcommander_unit = unit");
		p_file->store_line("\tunit.is_commander = true");
		p_file->store_line("\tunit.is_player_controlled = true");
		p_file->store_line("\tcommander_selected.emit(unit)");
		p_file->store_line("");
		p_file->store_line("func recruit_unit(unit_id: String, position: Vector2 = Vector2.ZERO) -> TacticalUnit:");
		p_file->store_line("\tif player_army.size() >= max_army_size:");
		p_file->store_line("\t\tprint(\"Army is at maximum capacity!\")");
		p_file->store_line("\t\treturn null");
		p_file->store_line("\t");
		p_file->store_line("\t# Get unit template");
		p_file->store_line("\tvar unit_template = recruitment_system.get_unit_template(unit_id)");
		p_file->store_line("\tif not unit_template:");
		p_file->store_line("\t\tprint(\"Unit template not found: \", unit_id)");
		p_file->store_line("\t\treturn null");
		p_file->store_line("\t");
		p_file->store_line("\t# Check recruitment cost");
		p_file->store_line("\tvar cost = calculate_recruitment_cost(unit_template)");
		p_file->store_line("\tif PlayerStats and PlayerStats.current_gold < cost:");
		p_file->store_line("\t\tprint(\"Not enough gold to recruit unit!\")");
		p_file->store_line("\t\treturn null");
		p_file->store_line("\t");
		p_file->store_line("\t# Create new unit");
		p_file->store_line("\tvar new_unit = TacticalUnit.new()");
		p_file->store_line("\tnew_unit.initialize_from_template(unit_template)");
		p_file->store_line("\tnew_unit.position = position");
		p_file->store_line("\t");
		p_file->store_line("\t# Add to army");
		p_file->store_line("\tplayer_army.append(new_unit)");
		p_file->store_line("\t");
		p_file->store_line("\t# Pay recruitment cost");
		p_file->store_line("\tif PlayerStats:");
		p_file->store_line("\t\tPlayerStats.spend_gold(cost)");
		p_file->store_line("\t");
		p_file->store_line("\tunit_recruited.emit(new_unit)");
		p_file->store_line("\tarmy_composition_changed.emit()");
		p_file->store_line("\treturn new_unit");
		p_file->store_line("");
		p_file->store_line("func dismiss_unit(unit: TacticalUnit) -> bool:");
		p_file->store_line("\tif not player_army.has(unit):");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Can't dismiss commander");
		p_file->store_line("\tif unit == commander_unit:");
		p_file->store_line("\t\tprint(\"Cannot dismiss the commander!\")");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Remove from army");
		p_file->store_line("\tplayer_army.erase(unit)");
		p_file->store_line("\t");
		p_file->store_line("\t# Return some gold");
		p_file->store_line("\tvar refund = int(calculate_recruitment_cost_for_unit(unit) * dismissal_gold_return)");
		p_file->store_line("\tif PlayerStats:");
		p_file->store_line("\t\tPlayerStats.add_gold(refund)");
		p_file->store_line("\t");
		p_file->store_line("\tunit_dismissed.emit(unit)");
		p_file->store_line("\tarmy_composition_changed.emit()");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func change_unit_class(unit: TacticalUnit, new_class_id: String) -> bool:");
		p_file->store_line("\tif not player_army.has(unit) and not allied_units.has(unit):");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Check class change requirements");
		p_file->store_line("\tif not class_system.can_change_to_class(unit, new_class_id):");
		p_file->store_line("\t\tprint(\"Unit does not meet requirements for class: \", new_class_id)");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\tvar old_class = unit.current_class_id");
		p_file->store_line("\tunit.change_class(new_class_id, class_system.get_class_data(new_class_id))");
		p_file->store_line("\t");
		p_file->store_line("\tunit_class_changed.emit(unit, old_class, new_class_id)");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func add_allied_unit(unit: TacticalUnit):");
		p_file->store_line("\t# AI-controlled allies");
		p_file->store_line("\tunit.is_player_controlled = false");
		p_file->store_line("\tunit.is_allied = true");
		p_file->store_line("\tallied_units.append(unit)");
		p_file->store_line("\tarmy_composition_changed.emit()");
		p_file->store_line("");
		p_file->store_line("func remove_allied_unit(unit: TacticalUnit):");
		p_file->store_line("\tallied_units.erase(unit)");
		p_file->store_line("\tarmy_composition_changed.emit()");
		p_file->store_line("");
		p_file->store_line("func get_deployable_units() -> Array[TacticalUnit]:");
		p_file->store_line("\t# Return units that can be deployed (alive and not already deployed)");
		p_file->store_line("\tvar deployable: Array[TacticalUnit] = []");
		p_file->store_line("\tfor unit in player_army:");
		p_file->store_line("\t\tif not unit.is_dead() and not unit.is_deployed:");
		p_file->store_line("\t\t\tdeployable.append(unit)");
		p_file->store_line("\treturn deployable");
		p_file->store_line("");
		p_file->store_line("func get_all_player_units() -> Array[TacticalUnit]:");
		p_file->store_line("\treturn player_army.duplicate()");
		p_file->store_line("");
		p_file->store_line("func get_all_allied_units() -> Array[TacticalUnit]:");
		p_file->store_line("\treturn allied_units.duplicate()");
		p_file->store_line("");
		p_file->store_line("func get_living_units() -> Array[TacticalUnit]:");
		p_file->store_line("\tvar living: Array[TacticalUnit] = []");
		p_file->store_line("\tfor unit in player_army:");
		p_file->store_line("\t\tif not unit.is_dead():");
		p_file->store_line("\t\t\tliving.append(unit)");
		p_file->store_line("\tfor unit in allied_units:");
		p_file->store_line("\t\tif not unit.is_dead():");
		p_file->store_line("\t\t\tliving.append(unit)");
		p_file->store_line("\treturn living");
		p_file->store_line("");
		p_file->store_line("func calculate_recruitment_cost(unit_template: Dictionary) -> int:");
		p_file->store_line("\tvar base_cost = unit_template.get(\"recruitment_cost\", recruitment_gold_cost_base)");
		p_file->store_line("\tvar level = unit_template.get(\"level\", 1)");
		p_file->store_line("\treturn int(base_cost * pow(recruitment_level_multiplier, level - 1))");
		p_file->store_line("");
		p_file->store_line("func calculate_recruitment_cost_for_unit(unit: TacticalUnit) -> int:");
		p_file->store_line("\treturn int(recruitment_gold_cost_base * pow(recruitment_level_multiplier, unit.level - 1))");
		p_file->store_line("");
		p_file->store_line("func is_army_defeated() -> bool:");
		p_file->store_line("\t# Check if all player units are dead or if commander is dead");
		p_file->store_line("\tif commander_unit and commander_unit.is_dead():");
		p_file->store_line("\t\treturn true");
		p_file->store_line("\t");
		p_file->store_line("\tfor unit in player_army:");
		p_file->store_line("\t\tif not unit.is_dead():");
		p_file->store_line("\t\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func get_army_stats() -> Dictionary:");
		p_file->store_line("\treturn {");
		p_file->store_line("\t\t\"total_units\": player_army.size(),");
		p_file->store_line("\t\t\"living_units\": get_living_units().size(),");
		p_file->store_line("\t\t\"deployable_units\": get_deployable_units().size(),");
		p_file->store_line("\t\t\"allied_units\": allied_units.size(),");
		p_file->store_line("\t\t\"commander\": commander_unit.unit_name if commander_unit else \"None\"");
		p_file->store_line("\t}");
	} else if (filename == "TacticalUnit.gd") {
		p_file->store_line("# TacticalUnit.gd");
		p_file->store_line("# Generated by Lupine Engine - Tactical Unit");
		p_file->store_line("# Individual unit for tactical combat with class system");
		p_file->store_line("");
		p_file->store_line("extends Resource");
		p_file->store_line("class_name TacticalUnit");
		p_file->store_line("");
		p_file->store_line("# Unit identity");
		p_file->store_line("@export var unit_name: String = \"\"");
		p_file->store_line("@export var unit_id: String = \"\"");
		p_file->store_line("@export var portrait_texture: Texture2D");
		p_file->store_line("@export var sprite_texture: Texture2D");
		p_file->store_line("@export var model_scene: PackedScene");
		p_file->store_line("");
		p_file->store_line("# Class system");
		p_file->store_line("@export var current_class_id: String = \"\"");
		p_file->store_line("@export var available_classes: Array[String] = []");
		p_file->store_line("@export var class_levels: Dictionary = {}  # class_id -> level");
		p_file->store_line("@export var class_experience: Dictionary = {}  # class_id -> exp");
		p_file->store_line("");
		p_file->store_line("# Core stats");
		p_file->store_line("@export var level: int = 1");
		p_file->store_line("@export var experience: int = 0");
		p_file->store_line("@export var max_health: int = 100");
		p_file->store_line("@export var current_health: int = 100");
		p_file->store_line("@export var max_mana: int = 50");
		p_file->store_line("@export var current_mana: int = 50");
		p_file->store_line("");
		p_file->store_line("# Combat stats");
		p_file->store_line("@export var attack: int = 20");
		p_file->store_line("@export var defense: int = 15");
		p_file->store_line("@export var magic_attack: int = 15");
		p_file->store_line("@export var magic_defense: int = 12");
		p_file->store_line("@export var speed: int = 10");
		p_file->store_line("@export var accuracy: int = 85");
		p_file->store_line("@export var evasion: int = 10");
		p_file->store_line("@export var critical_rate: int = 5");
		p_file->store_line("@export var movement_range: int = 3");
		p_file->store_line("");
		p_file->store_line("# Equipment");
		p_file->store_line("@export var equipped_weapon: String = \"\"");
		p_file->store_line("@export var equipped_armor: String = \"\"");
		p_file->store_line("@export var equipped_accessory: String = \"\"");
		p_file->store_line("");
		p_file->store_line("# Skills and abilities");
		p_file->store_line("@export var learned_skills: Array[String] = []");
		p_file->store_line("@export var equipped_skills: Array[String] = []");
		p_file->store_line("@export var skill_points: int = 0");
		p_file->store_line("");
		p_file->store_line("# Tactical properties");
		p_file->store_line("@export var faction: String = \"player\"  # player, ally, enemy");
		p_file->store_line("@export var is_commander: bool = false");
		p_file->store_line("@export var is_player_controlled: bool = true");
		p_file->store_line("@export var is_allied: bool = false");
		p_file->store_line("@export var ai_behavior: String = \"balanced\"  # aggressive, defensive, support, balanced");
		p_file->store_line("@export var recruitment_cost: int = 100");
		p_file->store_line("");
		p_file->store_line("# Battle state");
		p_file->store_line("var grid_position: Vector2i = Vector2i.ZERO");
		p_file->store_line("var is_deployed: bool = false");
		p_file->store_line("var has_moved: bool = false");
		p_file->store_line("var has_attacked: bool = false");
		p_file->store_line("var status_effects: Array[Dictionary] = []");
		p_file->store_line("");
		p_file->store_line("# Growth rates (for leveling up)");
		p_file->store_line("@export var health_growth: int = 8");
		p_file->store_line("@export var mana_growth: int = 3");
		p_file->store_line("@export var attack_growth: int = 6");
		p_file->store_line("@export var defense_growth: int = 5");
		p_file->store_line("@export var magic_attack_growth: int = 4");
		p_file->store_line("@export var magic_defense_growth: int = 4");
		p_file->store_line("@export var speed_growth: int = 5");
		p_file->store_line("");
		p_file->store_line("func initialize_from_template(template: Dictionary):");
		p_file->store_line("\tunit_name = template.get(\"name\", \"Unknown\")");
		p_file->store_line("\tunit_id = template.get(\"id\", \"\")");
		p_file->store_line("\tcurrent_class_id = template.get(\"class\", \"fighter\")");
		p_file->store_line("\tlevel = template.get(\"level\", 1)");
		p_file->store_line("\t");
		p_file->store_line("\t# Set base stats");
		p_file->store_line("\tmax_health = template.get(\"health\", 100)");
		p_file->store_line("\tcurrent_health = max_health");
		p_file->store_line("\tmax_mana = template.get(\"mana\", 50)");
		p_file->store_line("\tcurrent_mana = max_mana");
		p_file->store_line("\tattack = template.get(\"attack\", 20)");
		p_file->store_line("\tdefense = template.get(\"defense\", 15)");
		p_file->store_line("\tmagic_attack = template.get(\"magic_attack\", 15)");
		p_file->store_line("\tmagic_defense = template.get(\"magic_defense\", 12)");
		p_file->store_line("\tspeed = template.get(\"speed\", 10)");
		p_file->store_line("\tmovement_range = template.get(\"movement\", 3)");
		p_file->store_line("\t");
		p_file->store_line("\t# Set faction and AI");
		p_file->store_line("\tfaction = template.get(\"faction\", \"player\")");
		p_file->store_line("\tai_behavior = template.get(\"ai_behavior\", \"balanced\")");
		p_file->store_line("\trecruitment_cost = template.get(\"recruitment_cost\", 100)");
		p_file->store_line("\t");
		p_file->store_line("\t# Initialize class data");
		p_file->store_line("\tif not class_levels.has(current_class_id):");
		p_file->store_line("\t\tclass_levels[current_class_id] = 1");
		p_file->store_line("\t\tclass_experience[current_class_id] = 0");
		p_file->store_line("");
		p_file->store_line("func change_class(new_class_id: String, class_data: Dictionary):");
		p_file->store_line("\t# Save current class level");
		p_file->store_line("\tif not class_levels.has(current_class_id):");
		p_file->store_line("\t\tclass_levels[current_class_id] = level");
		p_file->store_line("\t");
		p_file->store_line("\t# Switch to new class");
		p_file->store_line("\tcurrent_class_id = new_class_id");
		p_file->store_line("\t");
		p_file->store_line("\t# Set level for new class");
		p_file->store_line("\tif class_levels.has(new_class_id):");
		p_file->store_line("\t\tlevel = class_levels[new_class_id]");
		p_file->store_line("\telse:");
		p_file->store_line("\t\tlevel = 1");
		p_file->store_line("\t\tclass_levels[new_class_id] = 1");
		p_file->store_line("\t\tclass_experience[new_class_id] = 0");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply class stat modifiers");
		p_file->store_line("\t_apply_class_modifiers(class_data)");
		p_file->store_line("");
		p_file->store_line("func _apply_class_modifiers(class_data: Dictionary):");
		p_file->store_line("\t# Apply class-specific stat bonuses");
		p_file->store_line("\tvar modifiers = class_data.get(\"stat_modifiers\", {})");
		p_file->store_line("\tattack += modifiers.get(\"attack\", 0)");
		p_file->store_line("\tdefense += modifiers.get(\"defense\", 0)");
		p_file->store_line("\tmagic_attack += modifiers.get(\"magic_attack\", 0)");
		p_file->store_line("\tmagic_defense += modifiers.get(\"magic_defense\", 0)");
		p_file->store_line("\tspeed += modifiers.get(\"speed\", 0)");
		p_file->store_line("\tmovement_range = class_data.get(\"movement_range\", movement_range)");
		p_file->store_line("");
		p_file->store_line("func take_damage(damage: int) -> int:");
		p_file->store_line("\tvar actual_damage = max(1, damage - defense / 2)");
		p_file->store_line("\tcurrent_health = max(0, current_health - actual_damage)");
		p_file->store_line("\treturn actual_damage");
		p_file->store_line("");
		p_file->store_line("func heal(amount: int) -> int:");
		p_file->store_line("\tvar actual_heal = min(amount, max_health - current_health)");
		p_file->store_line("\tcurrent_health += actual_heal");
		p_file->store_line("\treturn actual_heal");
		p_file->store_line("");
		p_file->store_line("func use_mana(amount: int) -> bool:");
		p_file->store_line("\tif current_mana >= amount:");
		p_file->store_line("\t\tcurrent_mana -= amount");
		p_file->store_line("\t\treturn true");
		p_file->store_line("\treturn false");
		p_file->store_line("");
		p_file->store_line("func restore_mana(amount: int) -> int:");
		p_file->store_line("\tvar actual_restore = min(amount, max_mana - current_mana)");
		p_file->store_line("\tcurrent_mana += actual_restore");
		p_file->store_line("\treturn actual_restore");
		p_file->store_line("");
		p_file->store_line("func is_dead() -> bool:");
		p_file->store_line("\treturn current_health <= 0");
		p_file->store_line("");
		p_file->store_line("func reset_turn_actions():");
		p_file->store_line("\thas_moved = false");
		p_file->store_line("\thas_attacked = false");
		p_file->store_line("");
		p_file->store_line("func can_act() -> bool:");
		p_file->store_line("\treturn not is_dead() and (not has_moved or not has_attacked)");
		p_file->store_line("");
		p_file->store_line("func gain_experience(exp: int):");
		p_file->store_line("\texperience += exp");
		p_file->store_line("\tif class_experience.has(current_class_id):");
		p_file->store_line("\t\tclass_experience[current_class_id] += exp");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for level up");
		p_file->store_line("\tvar exp_needed = _calculate_exp_for_next_level()");
		p_file->store_line("\tif experience >= exp_needed:");
		p_file->store_line("\t\t_level_up()");
		p_file->store_line("");
		p_file->store_line("func _calculate_exp_for_next_level() -> int:");
		p_file->store_line("\treturn level * 100  # Simple formula");
		p_file->store_line("");
		p_file->store_line("func _level_up():");
		p_file->store_line("\tlevel += 1");
		p_file->store_line("\tclass_levels[current_class_id] = level");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply stat growth");
		p_file->store_line("\tmax_health += _roll_stat_growth(health_growth)");
		p_file->store_line("\tmax_mana += _roll_stat_growth(mana_growth)");
		p_file->store_line("\tattack += _roll_stat_growth(attack_growth)");
		p_file->store_line("\tdefense += _roll_stat_growth(defense_growth)");
		p_file->store_line("\tmagic_attack += _roll_stat_growth(magic_attack_growth)");
		p_file->store_line("\tmagic_defense += _roll_stat_growth(magic_defense_growth)");
		p_file->store_line("\tspeed += _roll_stat_growth(speed_growth)");
		p_file->store_line("\t");
		p_file->store_line("\t# Restore health and mana");
		p_file->store_line("\tcurrent_health = max_health");
		p_file->store_line("\tcurrent_mana = max_mana");
		p_file->store_line("");
		p_file->store_line("func _roll_stat_growth(growth_rate: int) -> int:");
		p_file->store_line("\t# Growth rate is percentage chance to gain +1");
		p_file->store_line("\tvar roll = randi() % 100");
		p_file->store_line("\treturn 1 if roll < growth_rate else 0");
		p_file->store_line("");
		p_file->store_line("func get_total_attack() -> int:");
		p_file->store_line("\t# Include weapon bonuses");
		p_file->store_line("\tvar total = attack");
		p_file->store_line("\t# Add weapon attack bonus here");
		p_file->store_line("\treturn total");
		p_file->store_line("");
		p_file->store_line("func get_total_defense() -> int:");
		p_file->store_line("\t# Include armor bonuses");
		p_file->store_line("\tvar total = defense");
		p_file->store_line("\t# Add armor defense bonus here");
		p_file->store_line("\treturn total");
		p_file->store_line("");
		p_file->store_line("func get_unit_info() -> Dictionary:");
		p_file->store_line("\treturn {");
		p_file->store_line("\t\t\"name\": unit_name,");
		p_file->store_line("\t\t\"class\": current_class_id,");
		p_file->store_line("\t\t\"level\": level,");
		p_file->store_line("\t\t\"health\": str(current_health) + \"/\" + str(max_health),");
		p_file->store_line("\t\t\"mana\": str(current_mana) + \"/\" + str(max_mana),");
		p_file->store_line("\t\t\"attack\": get_total_attack(),");
		p_file->store_line("\t\t\"defense\": get_total_defense(),");
		p_file->store_line("\t\t\"speed\": speed,");
		p_file->store_line("\t\t\"movement\": movement_range");
		p_file->store_line("\t}");
	}
}

void TacticalPartySystemModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "TacticalPartyUI") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://tactical_party_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/TacticalPartyUI.gd\" id=\"1_party_ui_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"TacticalPartyUI\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_party_ui_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("color = Color(0, 0, 0, 0.8)");
		p_file->store_line("");
		p_file->store_line("[node name=\"MainContainer\" type=\"HBoxContainer\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 8");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = -400.0");
		p_file->store_line("offset_top = -250.0");
		p_file->store_line("offset_right = 400.0");
		p_file->store_line("offset_bottom = 250.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"ArmyList\" type=\"VBoxContainer\" parent=\"MainContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_horizontal = 3");
		p_file->store_line("");
		p_file->store_line("[node name=\"UnitDetails\" type=\"VBoxContainer\" parent=\"MainContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_horizontal = 3");
		p_file->store_line("");
		p_file->store_line("[node name=\"Actions\" type=\"VBoxContainer\" parent=\"MainContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_horizontal = 2");
		p_file->store_line("");
		p_file->store_line("[node name=\"RecruitButton\" type=\"Button\" parent=\"MainContainer/Actions\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Recruit\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"DismissButton\" type=\"Button\" parent=\"MainContainer/Actions\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Dismiss\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"ClassChangeButton\" type=\"Button\" parent=\"MainContainer/Actions\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Change Class\"");
	} else if (p_scene_name == "RecruitmentUI") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://recruitment_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/RecruitmentUI.gd\" id=\"1_recruitment_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"RecruitmentUI\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_recruitment_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("color = Color(0, 0, 0, 0.9)");
		p_file->store_line("");
		p_file->store_line("[node name=\"RecruitmentPanel\" type=\"VBoxContainer\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 8");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = -300.0");
		p_file->store_line("offset_top = -200.0");
		p_file->store_line("offset_right = 300.0");
		p_file->store_line("offset_bottom = 200.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"Title\" type=\"Label\" parent=\"RecruitmentPanel\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Recruitment\"");
		p_file->store_line("horizontal_alignment = 1");
		p_file->store_line("");
		p_file->store_line("[node name=\"AvailableUnits\" type=\"ScrollContainer\" parent=\"RecruitmentPanel\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_vertical = 3");
		p_file->store_line("");
		p_file->store_line("[node name=\"UnitList\" type=\"VBoxContainer\" parent=\"RecruitmentPanel/AvailableUnits\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("");
		p_file->store_line("[node name=\"ButtonContainer\" type=\"HBoxContainer\" parent=\"RecruitmentPanel\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("");
		p_file->store_line("[node name=\"RecruitButton\" type=\"Button\" parent=\"RecruitmentPanel/ButtonContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_horizontal = 3");
		p_file->store_line("text = \"Recruit\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"CancelButton\" type=\"Button\" parent=\"RecruitmentPanel/ButtonContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_horizontal = 3");
		p_file->store_line("text = \"Cancel\"");
	} else if (p_scene_name == "ClassChangeUI") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://class_change_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/ClassChangeUI.gd\" id=\"1_class_change_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"ClassChangeUI\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_class_change_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("color = Color(0, 0, 0, 0.9)");
		p_file->store_line("");
		p_file->store_line("[node name=\"ClassPanel\" type=\"VBoxContainer\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 8");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = -250.0");
		p_file->store_line("offset_top = -150.0");
		p_file->store_line("offset_right = 250.0");
		p_file->store_line("offset_bottom = 150.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"Title\" type=\"Label\" parent=\"ClassPanel\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Class Change\"");
		p_file->store_line("horizontal_alignment = 1");
		p_file->store_line("");
		p_file->store_line("[node name=\"AvailableClasses\" type=\"ScrollContainer\" parent=\"ClassPanel\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_vertical = 3");
		p_file->store_line("");
		p_file->store_line("[node name=\"ClassList\" type=\"VBoxContainer\" parent=\"ClassPanel/AvailableClasses\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("");
		p_file->store_line("[node name=\"ButtonContainer\" type=\"HBoxContainer\" parent=\"ClassPanel\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("");
		p_file->store_line("[node name=\"ChangeButton\" type=\"Button\" parent=\"ClassPanel/ButtonContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_horizontal = 3");
		p_file->store_line("text = \"Change Class\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"CancelButton\" type=\"Button\" parent=\"ClassPanel/ButtonContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("size_flags_horizontal = 3");
		p_file->store_line("text = \"Cancel\"");
	}
}
