#include "jrpg_combat_system_module.h"

void JRPGCombatSystemModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();

	if (filename == "CombatManager.gd") {
		p_file->store_line("# CombatManager.gd");
		p_file->store_line("# Generated by Lupine Engine - JRPG Combat Manager");
		p_file->store_line("# Central combat system for turn-based JRPG battles");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal combat_started(encounter: CombatEncounter)");
		p_file->store_line("signal combat_ended(victory: bool, rewards: Dictionary)");
		p_file->store_line("signal turn_started(combatant: Node)");
		p_file->store_line("signal turn_ended(combatant: Node)");
		p_file->store_line("signal action_executed(action: CombatAction)");
		p_file->store_line("signal damage_dealt(attacker: Node, target: Node, damage: int)");
		p_file->store_line("signal healing_done(healer: Node, target: Node, amount: int)");
		p_file->store_line("");
		p_file->store_line("# Combat state");
		p_file->store_line("enum CombatState { NONE, SETUP, PLAYER_TURN, AI_TURN, ANIMATION, VICTORY, DEFEAT }");
		p_file->store_line("var current_state: CombatState = CombatState.NONE");
		p_file->store_line("var current_encounter: CombatEncounter");
		p_file->store_line("var battle_ui: Control");
		p_file->store_line("");
		p_file->store_line("# Turn management");
		p_file->store_line("var turn_queue: Array = []");
		p_file->store_line("var current_turn_index: int = 0");
		p_file->store_line("var pending_actions: Array[CombatAction] = []");
		p_file->store_line("");
		p_file->store_line("# Combat settings");
		p_file->store_line("@export var auto_battle_speed: float = 1.5");
		p_file->store_line("@export var animation_speed: float = 1.0");
		p_file->store_line("@export var allow_escape: bool = true");
		p_file->store_line("@export var escape_chance_base: float = 0.5");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Load battle UI scene");
		p_file->store_line("\tvar battle_ui_scene = preload(\"res://scenes/combat/BattleUI.tscn\")");
		p_file->store_line("\tbattle_ui = battle_ui_scene.instantiate()");
		p_file->store_line("\tbattle_ui.visible = false");
		p_file->store_line("\tget_tree().current_scene.add_child(battle_ui)");
		p_file->store_line("");
		p_file->store_line("func start_combat(encounter: CombatEncounter):");
		p_file->store_line("\tcurrent_encounter = encounter");
		p_file->store_line("\tcurrent_state = CombatState.SETUP");
		p_file->store_line("\t");
		p_file->store_line("\t# Setup battle scene");
		p_file->store_line("\t_setup_battle_scene()");
		p_file->store_line("\t");
		p_file->store_line("\t# Initialize turn order");
		p_file->store_line("\t_calculate_turn_order()");
		p_file->store_line("\t");
		p_file->store_line("\t# Show battle UI");
		p_file->store_line("\tbattle_ui.visible = true");
		p_file->store_line("\tbattle_ui.setup_for_encounter(encounter)");
		p_file->store_line("\t");
		p_file->store_line("\tcombat_started.emit(encounter)");
		p_file->store_line("\t");
		p_file->store_line("\t# Start first turn");
		p_file->store_line("\t_start_next_turn()");
		p_file->store_line("");
		p_file->store_line("func end_combat(victory: bool, rewards: Dictionary = {}):");
		p_file->store_line("\tcurrent_state = CombatState.VICTORY if victory else CombatState.DEFEAT");
		p_file->store_line("\t");
		p_file->store_line("\t# Hide battle UI");
		p_file->store_line("\tbattle_ui.visible = false");
		p_file->store_line("\t");
		p_file->store_line("\t# Distribute rewards if victory");
		p_file->store_line("\tif victory and PartyManager:");
		p_file->store_line("\t\t_distribute_rewards(rewards)");
		p_file->store_line("\t");
		p_file->store_line("\tcombat_ended.emit(victory, rewards)");
		p_file->store_line("\t");
		p_file->store_line("\t# Clean up");
		p_file->store_line("\tcurrent_encounter = null");
		p_file->store_line("\tturn_queue.clear()");
		p_file->store_line("\tpending_actions.clear()");
		p_file->store_line("\tcurrent_state = CombatState.NONE");
		p_file->store_line("");
		p_file->store_line("func queue_action(action: CombatAction):");
		p_file->store_line("\tpending_actions.append(action)");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if all party members have chosen actions");
		p_file->store_line("\tif _all_party_actions_queued():");
		p_file->store_line("\t\t_execute_turn()");
		p_file->store_line("");
		p_file->store_line("func _setup_battle_scene():");
		p_file->store_line("\t# Position party members");
		p_file->store_line("\tif PartyManager:");
		p_file->store_line("\t\tvar party = PartyManager.get_active_party()");
		p_file->store_line("\t\tfor i in range(party.size()):");
		p_file->store_line("\t\t\tvar member = party[i]");
		p_file->store_line("\t\t\t# Position member sprite in battle formation");
		p_file->store_line("\t\t\t# This would be handled by the battle scene");
		p_file->store_line("");
		p_file->store_line("func _calculate_turn_order():");
		p_file->store_line("\tturn_queue.clear()");
		p_file->store_line("\t");
		p_file->store_line("\t# Add party members");
		p_file->store_line("\tif PartyManager:");
		p_file->store_line("\t\tfor member in PartyManager.get_living_party_members():");
		p_file->store_line("\t\t\tturn_queue.append(member)");
		p_file->store_line("\t");
		p_file->store_line("\t# Add enemies");
		p_file->store_line("\tif current_encounter:");
		p_file->store_line("\t\tfor enemy in current_encounter.enemies:");
		p_file->store_line("\t\t\tif not enemy.is_dead():");
		p_file->store_line("\t\t\t\tturn_queue.append(enemy)");
		p_file->store_line("\t");
		p_file->store_line("\t# Sort by speed (highest first)");
		p_file->store_line("\tturn_queue.sort_custom(_compare_speed)");
		p_file->store_line("\tcurrent_turn_index = 0");
		p_file->store_line("");
		p_file->store_line("func _compare_speed(a, b) -> bool:");
		p_file->store_line("\tvar speed_a = a.get_speed() if a.has_method(\"get_speed\") else 10");
		p_file->store_line("\tvar speed_b = b.get_speed() if b.has_method(\"get_speed\") else 10");
		p_file->store_line("\treturn speed_a > speed_b");
		p_file->store_line("");
		p_file->store_line("func _start_next_turn():");
		p_file->store_line("\tif current_turn_index >= turn_queue.size():");
		p_file->store_line("\t\t# End of round, start new round");
		p_file->store_line("\t\tcurrent_turn_index = 0");
		p_file->store_line("\t\t_calculate_turn_order()  # Recalculate in case someone died");
		p_file->store_line("\t");
		p_file->store_line("\tif turn_queue.is_empty():");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar current_combatant = turn_queue[current_turn_index]");
		p_file->store_line("\tturn_started.emit(current_combatant)");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if it's a party member or enemy");
		p_file->store_line("\tif PartyManager and PartyManager.get_active_party().has(current_combatant):");
		p_file->store_line("\t\t_handle_party_member_turn(current_combatant)");
		p_file->store_line("\telse:");
		p_file->store_line("\t\t_handle_enemy_turn(current_combatant)");
		p_file->store_line("");
		p_file->store_line("func _handle_party_member_turn(member: PartyMember):");
		p_file->store_line("\tif member.is_player_controlled:");
		p_file->store_line("\t\tcurrent_state = CombatState.PLAYER_TURN");
		p_file->store_line("\t\t# Show action menu for player");
		p_file->store_line("\t\tbattle_ui.show_action_menu(member)");
		p_file->store_line("\telse:");
		p_file->store_line("\t\tcurrent_state = CombatState.AI_TURN");
		p_file->store_line("\t\t# AI chooses action");
		p_file->store_line("\t\tvar ai_action = CombatAI.choose_action(member, current_encounter)");
		p_file->store_line("\t\tqueue_action(ai_action)");
		p_file->store_line("");
		p_file->store_line("func _handle_enemy_turn(enemy):");
		p_file->store_line("\tcurrent_state = CombatState.AI_TURN");
		p_file->store_line("\t# Enemy AI chooses action");
		p_file->store_line("\tvar ai_action = CombatAI.choose_enemy_action(enemy, PartyManager.get_active_party())");
		p_file->store_line("\tqueue_action(ai_action)");
		p_file->store_line("");
		p_file->store_line("func _all_party_actions_queued() -> bool:");
		p_file->store_line("\t# Check if we have actions for all living combatants in current turn");
		p_file->store_line("\treturn pending_actions.size() >= 1  # For now, one action per turn");
		p_file->store_line("");
		p_file->store_line("func _execute_turn():");
		p_file->store_line("\tcurrent_state = CombatState.ANIMATION");
		p_file->store_line("\t");
		p_file->store_line("\t# Execute all pending actions");
		p_file->store_line("\tfor action in pending_actions:");
		p_file->store_line("\t\tawait _execute_action(action)");
		p_file->store_line("\t");
		p_file->store_line("\t# Clear pending actions");
		p_file->store_line("\tpending_actions.clear()");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for battle end conditions");
		p_file->store_line("\tif _check_victory_conditions():");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Move to next turn");
		p_file->store_line("\tcurrent_turn_index += 1");
		p_file->store_line("\t_start_next_turn()");
		p_file->store_line("");
		p_file->store_line("func _execute_action(action: CombatAction):");
		p_file->store_line("\taction_executed.emit(action)");
		p_file->store_line("\t");
		p_file->store_line("\tmatch action.type:");
		p_file->store_line("\t\t\"attack\":");
		p_file->store_line("\t\t\tawait _execute_attack(action)");
		p_file->store_line("\t\t\"skill\":");
		p_file->store_line("\t\t\tawait _execute_skill(action)");
		p_file->store_line("\t\t\"item\":");
		p_file->store_line("\t\t\tawait _execute_item(action)");
		p_file->store_line("\t\t\"defend\":");
		p_file->store_line("\t\t\tawait _execute_defend(action)");
		p_file->store_line("\t\t\"escape\":");
		p_file->store_line("\t\t\tawait _execute_escape(action)");
		p_file->store_line("");
		p_file->store_line("func _execute_attack(action: CombatAction):");
		p_file->store_line("\tvar attacker = action.user");
		p_file->store_line("\tvar target = action.target");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate damage");
		p_file->store_line("\tvar damage = _calculate_physical_damage(attacker, target)");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply damage");
		p_file->store_line("\ttarget.take_damage(damage)");
		p_file->store_line("\tdamage_dealt.emit(attacker, target, damage)");
		p_file->store_line("\t");
		p_file->store_line("\t# Play animation");
		p_file->store_line("\tawait get_tree().create_timer(1.0 / animation_speed).timeout");
		p_file->store_line("");
		p_file->store_line("func _calculate_physical_damage(attacker, target) -> int:");
		p_file->store_line("\tvar attack_power = attacker.get_attack() if attacker.has_method(\"get_attack\") else 20");
		p_file->store_line("\tvar defense = target.get_defense() if target.has_method(\"get_defense\") else 10");
		p_file->store_line("\t");
		p_file->store_line("\t# Basic damage formula");
		p_file->store_line("\tvar base_damage = max(1, attack_power - defense / 2)");
		p_file->store_line("\tvar variance = randf_range(0.85, 1.15)");
		p_file->store_line("\t");
		p_file->store_line("\treturn int(base_damage * variance)");
		p_file->store_line("");
		p_file->store_line("func _check_victory_conditions() -> bool:");
		p_file->store_line("\t# Check if all enemies are defeated");
		p_file->store_line("\tif current_encounter:");
		p_file->store_line("\t\tvar living_enemies = 0");
		p_file->store_line("\t\tfor enemy in current_encounter.enemies:");
		p_file->store_line("\t\t\tif not enemy.is_dead():");
		p_file->store_line("\t\t\t\tliving_enemies += 1");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tif living_enemies == 0:");
		p_file->store_line("\t\t\tend_combat(true, current_encounter.get_rewards())");
		p_file->store_line("\t\t\treturn true");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if all party members are defeated");
		p_file->store_line("\tif PartyManager and PartyManager.is_party_defeated():");
		p_file->store_line("\t\tend_combat(false)");
		p_file->store_line("\t\treturn true");
		p_file->store_line("\t");
		p_file->store_line("\treturn false");
		p_file->store_line("");
		p_file->store_line("func _distribute_rewards(rewards: Dictionary):");
		p_file->store_line("\t# Distribute experience");
		p_file->store_line("\tvar exp = rewards.get(\"experience\", 0)");
		p_file->store_line("\tif exp > 0:");
		p_file->store_line("\t\tPartyManager.distribute_experience(exp)");
		p_file->store_line("\t");
		p_file->store_line("\t# Give gold");
		p_file->store_line("\tvar gold = rewards.get(\"gold\", 0)");
		p_file->store_line("\tif gold > 0 and PlayerStats:");
		p_file->store_line("\t\tPlayerStats.add_gold(gold)");
		p_file->store_line("\t");
		p_file->store_line("\t# Give items");
		p_file->store_line("\tvar items = rewards.get(\"items\", [])");
		p_file->store_line("\tfor item in items:");
		p_file->store_line("\t\tif InventorySystem:");
		p_file->store_line("\t\t\tInventorySystem.add_item(item.id, item.get(\"quantity\", 1))");
	}
}

void JRPGCombatSystemModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "BattleScene") {
		p_file->store_line("[gd_scene load_steps=3 format=3 uid=\"uid://battle_scene\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/combat/CombatEncounter.gd\" id=\"1_encounter_script\"]");
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"res://scenes/combat/BattleUI.tscn\" id=\"2_battle_ui\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"BattleScene\" type=\"Node2D\"]");
		p_file->store_line("script = ExtResource(\"1_encounter_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("color = Color(0.2, 0.3, 0.5, 1)");
		p_file->store_line("");
		p_file->store_line("[node name=\"PartyPositions\" type=\"Node2D\" parent=\".\"]");
		p_file->store_line("position = Vector2(200, 300)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Position1\" type=\"Marker2D\" parent=\"PartyPositions\"]");
		p_file->store_line("position = Vector2(0, -60)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Position2\" type=\"Marker2D\" parent=\"PartyPositions\"]");
		p_file->store_line("position = Vector2(0, -20)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Position3\" type=\"Marker2D\" parent=\"PartyPositions\"]");
		p_file->store_line("position = Vector2(0, 20)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Position4\" type=\"Marker2D\" parent=\"PartyPositions\"]");
		p_file->store_line("position = Vector2(0, 60)");
		p_file->store_line("");
		p_file->store_line("[node name=\"EnemyPositions\" type=\"Node2D\" parent=\".\"]");
		p_file->store_line("position = Vector2(800, 300)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Position1\" type=\"Marker2D\" parent=\"EnemyPositions\"]");
		p_file->store_line("position = Vector2(0, -40)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Position2\" type=\"Marker2D\" parent=\"EnemyPositions\"]");
		p_file->store_line("position = Vector2(0, 0)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Position3\" type=\"Marker2D\" parent=\"EnemyPositions\"]");
		p_file->store_line("position = Vector2(0, 40)");
		p_file->store_line("");
		p_file->store_line("[node name=\"UI\" type=\"CanvasLayer\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"BattleUI\" parent=\"UI\" instance=ExtResource(\"2_battle_ui\")]");
	} else if (p_scene_name == "BattleUI") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://battle_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/combat/BattleUI.gd\" id=\"1_battle_ui_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"BattleUI\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_battle_ui_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"ActionMenu\" type=\"VBoxContainer\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 3");
		p_file->store_line("anchor_left = 1.0");
		p_file->store_line("anchor_top = 1.0");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = -200.0");
		p_file->store_line("offset_top = -150.0");
		p_file->store_line("offset_right = -20.0");
		p_file->store_line("offset_bottom = -20.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"AttackButton\" type=\"Button\" parent=\"ActionMenu\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Attack\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"SkillButton\" type=\"Button\" parent=\"ActionMenu\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Skill\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"ItemButton\" type=\"Button\" parent=\"ActionMenu\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Item\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"DefendButton\" type=\"Button\" parent=\"ActionMenu\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Defend\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"PartyStatus\" type=\"HBoxContainer\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 2");
		p_file->store_line("anchor_top = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 20.0");
		p_file->store_line("offset_top = -100.0");
		p_file->store_line("offset_right = 400.0");
		p_file->store_line("offset_bottom = -20.0");
	}
}
