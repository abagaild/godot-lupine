#include "social_interaction_module.h"

void SocialInteractionModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();

	if (filename == "SocialInteractionManager.gd") {
		p_file->store_line("# SocialInteractionManager.gd");
		p_file->store_line("# Generated by Lupine Engine - Social Interaction Manager");
		p_file->store_line("# Stardew Valley/Harvest Moon style social interactions");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal gift_given(character_id: String, item_id: String, reaction: String)");
		p_file->store_line("signal friendship_event_triggered(character_id: String, event_id: String)");
		p_file->store_line("signal date_completed(character_id: String, activity: String, success: bool)");
		p_file->store_line("signal marriage_proposal(character_id: String, accepted: bool)");
		p_file->store_line("signal birthday_reminder(character_id: String, days_until: int)");
		p_file->store_line("signal festival_invitation(character_id: String, festival_id: String)");
		p_file->store_line("");
		p_file->store_line("# Social systems");
		p_file->store_line("var gift_system: GiftSystem");
		p_file->store_line("var date_system: DateSystem");
		p_file->store_line("var marriage_system: MarriageSystem");
		p_file->store_line("var social_calendar: SocialCalendar");
		p_file->store_line("");
		p_file->store_line("# Character data");
		p_file->store_line("var character_schedules: Dictionary = {}  # character_id -> CharacterSchedule");
		p_file->store_line("var friendship_events: Dictionary = {}  # event_id -> FriendshipEvent");
		p_file->store_line("var triggered_events: Array[String] = []");
		p_file->store_line("");
		p_file->store_line("# Interaction tracking");
		p_file->store_line("var daily_gift_given: Dictionary = {}  # character_id -> bool");
		p_file->store_line("var weekly_interactions: Dictionary = {}  # character_id -> count");
		p_file->store_line("var special_dialogue_unlocked: Dictionary = {}  # character_id -> Array[String]");
		p_file->store_line("");
		p_file->store_line("# Settings");
		p_file->store_line("@export var max_gifts_per_week: int = 2");
		p_file->store_line("@export var birthday_gift_multiplier: float = 2.0");
		p_file->store_line("@export var festival_gift_multiplier: float = 1.5");
		p_file->store_line("@export var enable_dating: bool = true");
		p_file->store_line("@export var enable_marriage: bool = true");
		p_file->store_line("@export var max_dating_partners: int = 1");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Initialize systems");
		p_file->store_line("\tgift_system = GiftSystem.new()");
		p_file->store_line("\tdate_system = DateSystem.new()");
		p_file->store_line("\tmarriage_system = MarriageSystem.new()");
		p_file->store_line("\tsocial_calendar = SocialCalendar.new()");
		p_file->store_line("\t");
		p_file->store_line("\t# Load data");
		p_file->store_line("\tload_social_data()");
		p_file->store_line("\t");
		p_file->store_line("\t# Connect to game time");
		p_file->store_line("\tif GameTime:");
		p_file->store_line("\t\tGameTime.day_changed.connect(_on_day_changed)");
		p_file->store_line("\t\tGameTime.week_changed.connect(_on_week_changed)");
		p_file->store_line("");
		p_file->store_line("func load_social_data():");
		p_file->store_line("\tgift_system.load_gift_preferences(\"res://data/social/gift_preferences.json\")");
		p_file->store_line("\tload_friendship_events(\"res://data/social/friendship_events.json\")");
		p_file->store_line("\tload_character_schedules(\"res://data/social/character_schedules.json\")");
		p_file->store_line("\tdate_system.load_date_activities(\"res://data/social/date_activities.json\")");
		p_file->store_line("");
		p_file->store_line("func give_gift(character_id: String, item_id: String) -> Dictionary:");
		p_file->store_line("\t# Check if already gave gift today");
		p_file->store_line("\tif daily_gift_given.get(character_id, false):");
		p_file->store_line("\t\treturn {\"success\": false, \"reason\": \"already_gave_today\"}");
		p_file->store_line("\t");
		p_file->store_line("\t# Check weekly limit");
		p_file->store_line("\tvar weekly_count = weekly_interactions.get(character_id, 0)");
		p_file->store_line("\tif weekly_count >= max_gifts_per_week:");
		p_file->store_line("\t\treturn {\"success\": false, \"reason\": \"weekly_limit_reached\"}");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if player has the item");
		p_file->store_line("\tif InventorySystem and not InventorySystem.has_item(item_id):");
		p_file->store_line("\t\treturn {\"success\": false, \"reason\": \"no_item\"}");
		p_file->store_line("\t");
		p_file->store_line("\t# Get gift reaction and points");
		p_file->store_line("\tvar gift_result = gift_system.give_gift(character_id, item_id)");
		p_file->store_line("\tvar points = gift_result.friendship_points");
		p_file->store_line("\tvar reaction = gift_result.reaction");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply special multipliers");
		p_file->store_line("\tif _is_character_birthday(character_id):");
		p_file->store_line("\t\tpoints = int(points * birthday_gift_multiplier)");
		p_file->store_line("\t\treaction += \"_birthday\"");
		p_file->store_line("\telif _is_festival_day():");
		p_file->store_line("\t\tpoints = int(points * festival_gift_multiplier)");
		p_file->store_line("\t\treaction += \"_festival\"");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply friendship points");
		p_file->store_line("\tif RelationshipManager:");
		p_file->store_line("\t\tRelationshipManager.increase_relationship(character_id, points, \"gift\")");
		p_file->store_line("\t");
		p_file->store_line("\t# Remove item from inventory");
		p_file->store_line("\tif InventorySystem:");
		p_file->store_line("\t\tInventorySystem.remove_item(item_id, 1)");
		p_file->store_line("\t");
		p_file->store_line("\t# Track gift giving");
		p_file->store_line("\tdaily_gift_given[character_id] = true");
		p_file->store_line("\tweekly_interactions[character_id] = weekly_count + 1");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for friendship events");
		p_file->store_line("\t_check_friendship_events(character_id)");
		p_file->store_line("\t");
		p_file->store_line("\tgift_given.emit(character_id, item_id, reaction)");
		p_file->store_line("\t");
		p_file->store_line("\treturn {\"success\": true, \"reaction\": reaction, \"points\": points}");
		p_file->store_line("");
		p_file->store_line("func start_conversation(character_id: String) -> Dictionary:");
		p_file->store_line("\t# Get character's current dialogue based on relationship, time, location, etc.");
		p_file->store_line("\tvar character = RelationshipManager.get_character(character_id)");
		p_file->store_line("\tif not character:");
		p_file->store_line("\t\treturn {\"success\": false, \"reason\": \"character_not_found\"}");
		p_file->store_line("\t");
		p_file->store_line("\t# Check character schedule and mood");
		p_file->store_line("\tvar schedule = character_schedules.get(character_id)");
		p_file->store_line("\tvar dialogue_context = _get_dialogue_context(character_id, schedule)");
		p_file->store_line("\t");
		p_file->store_line("\t# Get appropriate dialogue");
		p_file->store_line("\tvar dialogue_file = _select_dialogue(character_id, dialogue_context)");
		p_file->store_line("\t");
		p_file->store_line("\t# Start dialogue");
		p_file->store_line("\tif DialogueSystem:");
		p_file->store_line("\t\tDialogueSystem.start_dialogue(dialogue_file)");
		p_file->store_line("\t");
		p_file->store_line("\t# Small friendship boost for talking");
		p_file->store_line("\tif RelationshipManager:");
		p_file->store_line("\t\tRelationshipManager.increase_relationship(character_id, 5, \"conversation\")");
		p_file->store_line("\t");
		p_file->store_line("\treturn {\"success\": true, \"dialogue\": dialogue_file}");
		p_file->store_line("");
		p_file->store_line("func plan_date(character_id: String, activity_id: String, date_time: Dictionary) -> Dictionary:");
		p_file->store_line("\tif not enable_dating:");
		p_file->store_line("\t\treturn {\"success\": false, \"reason\": \"dating_disabled\"}");
		p_file->store_line("\t");
		p_file->store_line("\t# Check relationship level");
		p_file->store_line("\tif RelationshipManager:");
		p_file->store_line("\t\tvar relationship = RelationshipManager.get_relationship(\"player\", character_id)");
		p_file->store_line("\t\tvar level = RelationshipManager.get_relationship_level(relationship.friendship_points)");
		p_file->store_line("\t\tif level < RelationshipManager.RelationshipLevel.ROMANCE_INTEREST:");
		p_file->store_line("\t\t\treturn {\"success\": false, \"reason\": \"relationship_too_low\"}");
		p_file->store_line("\t");
		p_file->store_line("\t# Check dating limits");
		p_file->store_line("\tvar current_partners = date_system.get_current_dating_partners()");
		p_file->store_line("\tif current_partners.size() >= max_dating_partners and not current_partners.has(character_id):");
		p_file->store_line("\t\treturn {\"success\": false, \"reason\": \"too_many_partners\"}");
		p_file->store_line("\t");
		p_file->store_line("\t# Plan the date");
		p_file->store_line("\tvar date_result = date_system.plan_date(character_id, activity_id, date_time)");
		p_file->store_line("\treturn date_result");
		p_file->store_line("");
		p_file->store_line("func propose_marriage(character_id: String) -> Dictionary:");
		p_file->store_line("\tif not enable_marriage:");
		p_file->store_line("\t\treturn {\"success\": false, \"reason\": \"marriage_disabled\"}");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if already married");
		p_file->store_line("\tif marriage_system.is_player_married():");
		p_file->store_line("\t\treturn {\"success\": false, \"reason\": \"already_married\"}");
		p_file->store_line("\t");
		p_file->store_line("\t# Check relationship level");
		p_file->store_line("\tif RelationshipManager:");
		p_file->store_line("\t\tvar relationship = RelationshipManager.get_relationship(\"player\", character_id)");
		p_file->store_line("\t\tvar level = RelationshipManager.get_relationship_level(relationship.friendship_points)");
		p_file->store_line("\t\tif level < RelationshipManager.RelationshipLevel.ROMANCE_PARTNER:");
		p_file->store_line("\t\t\treturn {\"success\": false, \"reason\": \"relationship_too_low\"}");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if character is marriageable");
		p_file->store_line("\tvar character = RelationshipManager.get_character(character_id)");
		p_file->store_line("\tif not character or not character.is_marriageable:");
		p_file->store_line("\t\treturn {\"success\": false, \"reason\": \"not_marriageable\"}");
		p_file->store_line("\t");
		p_file->store_line("\t# Propose marriage");
		p_file->store_line("\tvar proposal_result = marriage_system.propose_marriage(character_id)");
		p_file->store_line("\tmarriage_proposal.emit(character_id, proposal_result.accepted)");
		p_file->store_line("\t");
		p_file->store_line("\treturn proposal_result");
		p_file->store_line("");
		p_file->store_line("func get_character_location(character_id: String) -> Dictionary:");
		p_file->store_line("\t# Get character's current location based on schedule");
		p_file->store_line("\tvar schedule = character_schedules.get(character_id)");
		p_file->store_line("\tif not schedule:");
		p_file->store_line("\t\treturn {}");
		p_file->store_line("\t");
		p_file->store_line("\tvar current_time = GameTime.get_current_time() if GameTime else {\"hour\": 12, \"minute\": 0}");
		p_file->store_line("\treturn schedule.get_location_at_time(current_time)");
		p_file->store_line("");
		p_file->store_line("func _is_character_birthday(character_id: String) -> bool:");
		p_file->store_line("\tvar character = RelationshipManager.get_character(character_id)");
		p_file->store_line("\tif not character or not GameTime:");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\tvar current_date = GameTime.get_current_date()");
		p_file->store_line("\treturn character.birthday_season == current_date.season and character.birthday_day == current_date.day");
		p_file->store_line("");
		p_file->store_line("func _is_festival_day() -> bool:");
		p_file->store_line("\tif not GameTime:");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\tvar current_date = GameTime.get_current_date()");
		p_file->store_line("\treturn social_calendar.is_festival_day(current_date)");
		p_file->store_line("");
		p_file->store_line("func _check_friendship_events(character_id: String):");
		p_file->store_line("\t# Check if any friendship events should trigger");
		p_file->store_line("\tif not RelationshipManager:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar relationship = RelationshipManager.get_relationship(\"player\", character_id)");
		p_file->store_line("\tvar friendship_level = RelationshipManager.get_relationship_level(relationship.friendship_points)");
		p_file->store_line("\t");
		p_file->store_line("\tfor event_id in friendship_events.keys():");
		p_file->store_line("\t\tvar event = friendship_events[event_id]");
		p_file->store_line("\t\tif event.character_id == character_id and not triggered_events.has(event_id):");
		p_file->store_line("\t\t\tif event.can_trigger(friendship_level):");
		p_file->store_line("\t\t\t\ttriggered_events.append(event_id)");
		p_file->store_line("\t\t\t\tfriendship_event_triggered.emit(character_id, event_id)");
		p_file->store_line("");
		p_file->store_line("func _on_day_changed():");
		p_file->store_line("\t# Reset daily gift tracking");
		p_file->store_line("\tdaily_gift_given.clear()");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for birthdays and festivals");
		p_file->store_line("\t_check_upcoming_birthdays()");
		p_file->store_line("\t_check_festival_invitations()");
		p_file->store_line("");
		p_file->store_line("func _on_week_changed():");
		p_file->store_line("\t# Reset weekly interaction tracking");
		p_file->store_line("\tweekly_interactions.clear()");
		p_file->store_line("");
		p_file->store_line("func _check_upcoming_birthdays():");
		p_file->store_line("\t# Notify about upcoming birthdays");
		p_file->store_line("\tfor character_id in RelationshipManager.characters.keys():");
		p_file->store_line("\t\tvar character = RelationshipManager.get_character(character_id)");
		p_file->store_line("\t\tif character:");
		p_file->store_line("\t\t\tvar days_until = _get_days_until_birthday(character)");
		p_file->store_line("\t\t\tif days_until <= 3 and days_until > 0:");
		p_file->store_line("\t\t\t\tbirthday_reminder.emit(character_id, days_until)");
		p_file->store_line("");
		p_file->store_line("func _get_days_until_birthday(character) -> int:");
		p_file->store_line("\tif not GameTime:");
		p_file->store_line("\t\treturn -1");
		p_file->store_line("\t");
		p_file->store_line("\tvar current_date = GameTime.get_current_date()");
		p_file->store_line("\t# Calculate days until birthday (simplified)");
		p_file->store_line("\tvar birthday_day = character.birthday_day");
		p_file->store_line("\tvar current_day = current_date.day");
		p_file->store_line("\t");
		p_file->store_line("\tif birthday_day > current_day:");
		p_file->store_line("\t\treturn birthday_day - current_day");
		p_file->store_line("\telse:");
		p_file->store_line("\t\treturn (28 - current_day) + birthday_day  # Assuming 28-day seasons");
	}
}

void SocialInteractionModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "SocialInteractionUI") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://social_interaction_ui\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/SocialInteractionUI.gd\" id=\"1_social_ui_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"SocialInteractionUI\" type=\"Control\"]");
		p_file->store_line("process_mode = 2");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_social_ui_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("color = Color(0, 0, 0, 0.7)");
		p_file->store_line("");
		p_file->store_line("[node name=\"InteractionPanel\" type=\"Panel\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 8");
		p_file->store_line("anchor_left = 0.5");
		p_file->store_line("anchor_top = 0.5");
		p_file->store_line("anchor_right = 0.5");
		p_file->store_line("anchor_bottom = 0.5");
		p_file->store_line("offset_left = -300.0");
		p_file->store_line("offset_top = -200.0");
		p_file->store_line("offset_right = 300.0");
		p_file->store_line("offset_bottom = 200.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"VBoxContainer\" type=\"VBoxContainer\" parent=\"InteractionPanel\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 20.0");
		p_file->store_line("offset_top = 20.0");
		p_file->store_line("offset_right = -20.0");
		p_file->store_line("offset_bottom = -20.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"CharacterName\" type=\"Label\" parent=\"InteractionPanel/VBoxContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Character Name\"");
		p_file->store_line("horizontal_alignment = 1");
		p_file->store_line("");
		p_file->store_line("[node name=\"TalkButton\" type=\"Button\" parent=\"InteractionPanel/VBoxContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Talk\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"GiftButton\" type=\"Button\" parent=\"InteractionPanel/VBoxContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Give Gift\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"TradeButton\" type=\"Button\" parent=\"InteractionPanel/VBoxContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Trade\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"CloseButton\" type=\"Button\" parent=\"InteractionPanel/VBoxContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Close\"");
	}
}
