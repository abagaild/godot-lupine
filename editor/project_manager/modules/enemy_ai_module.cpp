#include "enemy_ai_module.h"

void EnemyAIModule::generate_script(Ref<FileAccess> p_file) {
	p_file->store_line("# EnemyBase.gd");
	p_file->store_line("# Generated by Lupine Engine - Enemy AI Base Class");
	p_file->store_line("# Base class for all enemy types with common functionality");
	p_file->store_line("");
	p_file->store_line("extends CharacterBody2D");
	p_file->store_line("class_name EnemyBase");
	p_file->store_line("");
	p_file->store_line("# Signals");
	p_file->store_line("signal enemy_died(enemy: EnemyBase)");
	p_file->store_line("signal enemy_damaged(damage: float)");
	p_file->store_line("signal player_detected(player: Node)");
	p_file->store_line("signal player_lost()");
	p_file->store_line("");
	p_file->store_line("# Enemy stats");
	p_file->store_line("@export var max_health: float = 100.0");
	p_file->store_line("@export var move_speed: float = 100.0");
	p_file->store_line("@export var attack_damage: float = 20.0");
	p_file->store_line("@export var attack_range: float = 50.0");
	p_file->store_line("@export var detection_range: float = 150.0");
	p_file->store_line("@export var experience_reward: int = 10");
	p_file->store_line("");
	p_file->store_line("# Current state");
	p_file->store_line("var current_health: float");
	p_file->store_line("var is_dead: bool = false");
	p_file->store_line("var player_target: Node = null");
	p_file->store_line("var last_known_player_position: Vector2");
	p_file->store_line("");
	p_file->store_line("# AI State");
	p_file->store_line("enum AIState { IDLE, PATROL, CHASE, ATTACK, RETURN, STUNNED }");
	p_file->store_line("var current_state: AIState = AIState.IDLE");
	p_file->store_line("var state_timer: float = 0.0");
	p_file->store_line("");
	p_file->store_line("# Components");
	p_file->store_line("@onready var sprite: Sprite2D = $Sprite2D");
	p_file->store_line("@onready var collision: CollisionShape2D = $CollisionShape2D");
	p_file->store_line("@onready var detection_area: Area2D = $DetectionArea");
	p_file->store_line("@onready var attack_area: Area2D = $AttackArea");
	p_file->store_line("@onready var health_bar: ProgressBar = $HealthBar");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\tcurrent_health = max_health");
	p_file->store_line("\t_setup_detection_area()");
	p_file->store_line("\t_setup_attack_area()");
	p_file->store_line("\t_update_health_bar()");
	p_file->store_line("");
	p_file->store_line("func _physics_process(delta):");
	p_file->store_line("\tif is_dead:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tstate_timer += delta");
	p_file->store_line("\t_update_ai_state(delta)");
	p_file->store_line("\t_handle_movement(delta)");
	p_file->store_line("\tmove_and_slide()");
	p_file->store_line("");
	p_file->store_line("func _update_ai_state(delta: float):");
	p_file->store_line("\t# Override in derived classes");
	p_file->store_line("\tpass");
	p_file->store_line("");
	p_file->store_line("func _handle_movement(delta: float):");
	p_file->store_line("\t# Override in derived classes");
	p_file->store_line("\tpass");
	p_file->store_line("");
	p_file->store_line("func take_damage(damage: float, knockback_force: Vector2 = Vector2.ZERO):");
	p_file->store_line("\tif is_dead:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tcurrent_health -= damage");
	p_file->store_line("\tcurrent_health = max(0, current_health)");
	p_file->store_line("\t");
	p_file->store_line("\t# Apply knockback");
	p_file->store_line("\tif knockback_force != Vector2.ZERO:");
	p_file->store_line("\t\tvelocity += knockback_force");
	p_file->store_line("\t");
	p_file->store_line("\t# Flash effect");
	p_file->store_line("\t_flash_damage()");
	p_file->store_line("\t");
	p_file->store_line("\t_update_health_bar()");
	p_file->store_line("\tenemy_damaged.emit(damage)");
	p_file->store_line("\t");
	p_file->store_line("\tif current_health <= 0:");
	p_file->store_line("\t\t_die()");
	p_file->store_line("");
	p_file->store_line("func _die():");
	p_file->store_line("\tis_dead = true");
	p_file->store_line("\tcurrent_state = AIState.STUNNED");
	p_file->store_line("\t");
	p_file->store_line("\t# Give experience to player");
	p_file->store_line("\tif PlayerStats:");
	p_file->store_line("\t\tPlayerStats.add_experience(experience_reward)");
	p_file->store_line("\t");
	p_file->store_line("\t# Drop loot");
	p_file->store_line("\t_drop_loot()");
	p_file->store_line("\t");
	p_file->store_line("\t# Death animation");
	p_file->store_line("\tvar tween = create_tween()");
	p_file->store_line("\ttween.tween_property(sprite, \"modulate:a\", 0.0, 0.5)");
	p_file->store_line("\ttween.tween_callback(queue_free)");
	p_file->store_line("\t");
	p_file->store_line("\tenemy_died.emit(self)");
	p_file->store_line("");
	p_file->store_line("func _drop_loot():");
	p_file->store_line("\t# Override in derived classes or use loot tables");
	p_file->store_line("\tpass");
	p_file->store_line("");
	p_file->store_line("func _flash_damage():");
	p_file->store_line("\tvar tween = create_tween()");
	p_file->store_line("\ttween.tween_property(sprite, \"modulate\", Color.RED, 0.1)");
	p_file->store_line("\ttween.tween_property(sprite, \"modulate\", Color.WHITE, 0.1)");
	p_file->store_line("");
	p_file->store_line("func _setup_detection_area():");
	p_file->store_line("\tif detection_area:");
	p_file->store_line("\t\tdetection_area.body_entered.connect(_on_player_detected)");
	p_file->store_line("\t\tdetection_area.body_exited.connect(_on_player_lost)");
	p_file->store_line("\t\t");
	p_file->store_line("\t\t# Set detection range");
	p_file->store_line("\t\tvar detection_shape = detection_area.get_child(0) as CollisionShape2D");
	p_file->store_line("\t\tif detection_shape and detection_shape.shape is CircleShape2D:");
	p_file->store_line("\t\t\t(detection_shape.shape as CircleShape2D).radius = detection_range");
	p_file->store_line("");
	p_file->store_line("func _setup_attack_area():");
	p_file->store_line("\tif attack_area:");
	p_file->store_line("\t\t# Set attack range");
	p_file->store_line("\t\tvar attack_shape = attack_area.get_child(0) as CollisionShape2D");
	p_file->store_line("\t\tif attack_shape and attack_shape.shape is CircleShape2D:");
	p_file->store_line("\t\t\t(attack_shape.shape as CircleShape2D).radius = attack_range");
	p_file->store_line("");
	p_file->store_line("func _on_player_detected(body: Node):");
	p_file->store_line("\tif body.has_method(\"take_damage\") and body.name.contains(\"Player\"):");
	p_file->store_line("\t\tplayer_target = body");
	p_file->store_line("\t\tlast_known_player_position = body.global_position");
	p_file->store_line("\t\tplayer_detected.emit(body)");
	p_file->store_line("");
	p_file->store_line("func _on_player_lost(body: Node):");
	p_file->store_line("\tif body == player_target:");
	p_file->store_line("\t\tplayer_target = null");
	p_file->store_line("\t\tplayer_lost.emit()");
	p_file->store_line("");
	p_file->store_line("func _update_health_bar():");
	p_file->store_line("\tif health_bar:");
	p_file->store_line("\t\thealth_bar.value = (current_health / max_health) * 100");
	p_file->store_line("\t\thealth_bar.visible = current_health < max_health");
	p_file->store_line("");
	p_file->store_line("func get_distance_to_player() -> float:");
	p_file->store_line("\tif player_target:");
	p_file->store_line("\t\treturn global_position.distance_to(player_target.global_position)");
	p_file->store_line("\treturn INF");
	p_file->store_line("");
	p_file->store_line("func get_direction_to_player() -> Vector2:");
	p_file->store_line("\tif player_target:");
	p_file->store_line("\t\treturn (player_target.global_position - global_position).normalized()");
	p_file->store_line("\treturn Vector2.ZERO");
	p_file->store_line("");
	p_file->store_line("func attack_player():");
	p_file->store_line("\tif player_target and player_target.has_method(\"take_damage\"):");
	p_file->store_line("\t\tvar distance = get_distance_to_player()");
	p_file->store_line("\t\tif distance <= attack_range:");
	p_file->store_line("\t\t\tvar knockback = get_direction_to_player() * 200");
	p_file->store_line("\t\t\tplayer_target.take_damage(attack_damage, knockback)");
	p_file->store_line("\t\t\treturn true");
	p_file->store_line("\treturn false");
}

void EnemyAIModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "EnemyPatrol") {
		// Generate patrol enemy scene
		p_file->store_line("[gd_scene load_steps=4 format=3 uid=\"uid://enemy_patrol\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/enemies/EnemyPatrol.gd\" id=\"1_enemy_patrol_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"RectangleShape2D\" id=\"RectangleShape2D_1\"]");
		p_file->store_line("size = Vector2(32, 32)");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CircleShape2D\" id=\"CircleShape2D_1\"]");
		p_file->store_line("radius = 150.0");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CircleShape2D\" id=\"CircleShape2D_2\"]");
		p_file->store_line("radius = 50.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"EnemyPatrol\" type=\"CharacterBody2D\"]");
		p_file->store_line("script = ExtResource(\"1_enemy_patrol_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("modulate = Color(1, 0.5, 0.5, 1)");
		p_file->store_line("scale = Vector2(32, 32)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"DetectionArea\" type=\"Area2D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"DetectionShape\" type=\"CollisionShape2D\" parent=\"DetectionArea\"]");
		p_file->store_line("shape = SubResource(\"CircleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"AttackArea\" type=\"Area2D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"AttackShape\" type=\"CollisionShape2D\" parent=\"AttackArea\"]");
		p_file->store_line("shape = SubResource(\"CircleShape2D_2\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"HealthBar\" type=\"ProgressBar\" parent=\".\"]");
		p_file->store_line("offset_left = -20.0");
		p_file->store_line("offset_top = -30.0");
		p_file->store_line("offset_right = 20.0");
		p_file->store_line("offset_bottom = -25.0");
		p_file->store_line("value = 100.0");
		p_file->store_line("show_percentage = false");
	} else if (p_scene_name == "EnemyChaser") {
		// Generate chaser enemy scene
		p_file->store_line("[gd_scene load_steps=4 format=3 uid=\"uid://enemy_chaser\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/enemies/EnemyChaser.gd\" id=\"1_enemy_chaser_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"RectangleShape2D\" id=\"RectangleShape2D_1\"]");
		p_file->store_line("size = Vector2(28, 28)");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CircleShape2D\" id=\"CircleShape2D_1\"]");
		p_file->store_line("radius = 200.0");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CircleShape2D\" id=\"CircleShape2D_2\"]");
		p_file->store_line("radius = 40.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"EnemyChaser\" type=\"CharacterBody2D\"]");
		p_file->store_line("script = ExtResource(\"1_enemy_chaser_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("modulate = Color(1, 0.3, 0.3, 1)");
		p_file->store_line("scale = Vector2(28, 28)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"DetectionArea\" type=\"Area2D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"DetectionShape\" type=\"CollisionShape2D\" parent=\"DetectionArea\"]");
		p_file->store_line("shape = SubResource(\"CircleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"AttackArea\" type=\"Area2D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"AttackShape\" type=\"CollisionShape2D\" parent=\"AttackArea\"]");
		p_file->store_line("shape = SubResource(\"CircleShape2D_2\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"HealthBar\" type=\"ProgressBar\" parent=\".\"]");
		p_file->store_line("offset_left = -20.0");
		p_file->store_line("offset_top = -30.0");
		p_file->store_line("offset_right = 20.0");
		p_file->store_line("offset_bottom = -25.0");
		p_file->store_line("value = 100.0");
		p_file->store_line("show_percentage = false");
	} else if (p_scene_name == "EnemyFlying") {
		// Generate flying enemy scene
		p_file->store_line("[gd_scene load_steps=4 format=3 uid=\"uid://enemy_flying\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/enemies/EnemyFlying.gd\" id=\"1_enemy_flying_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CircleShape2D\" id=\"CircleShape2D_1\"]");
		p_file->store_line("radius = 16.0");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CircleShape2D\" id=\"CircleShape2D_2\"]");
		p_file->store_line("radius = 180.0");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CircleShape2D\" id=\"CircleShape2D_3\"]");
		p_file->store_line("radius = 45.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"EnemyFlying\" type=\"CharacterBody2D\"]");
		p_file->store_line("script = ExtResource(\"1_enemy_flying_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("modulate = Color(0.8, 0.8, 1, 1)");
		p_file->store_line("scale = Vector2(32, 32)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"CircleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"DetectionArea\" type=\"Area2D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"DetectionShape\" type=\"CollisionShape2D\" parent=\"DetectionArea\"]");
		p_file->store_line("shape = SubResource(\"CircleShape2D_2\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"AttackArea\" type=\"Area2D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"AttackShape\" type=\"CollisionShape2D\" parent=\"AttackArea\"]");
		p_file->store_line("shape = SubResource(\"CircleShape2D_3\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"HealthBar\" type=\"ProgressBar\" parent=\".\"]");
		p_file->store_line("offset_left = -20.0");
		p_file->store_line("offset_top = -30.0");
		p_file->store_line("offset_right = 20.0");
		p_file->store_line("offset_bottom = -25.0");
		p_file->store_line("value = 100.0");
		p_file->store_line("show_percentage = false");
	}
}
