#include "topdown_rpg_8dir_main_scene_module.h"

void TopdownRPG8DirMainSceneModule::generate_script(Ref<FileAccess> p_file) {
	// This module generates the same scripts as the 4-directional version
	// The scripts are shared between both versions
	String filename = p_file->get_path().get_file();

	if (filename == "GameManager.gd") {
		p_file->store_line("# GameManager.gd");
		p_file->store_line("# Generated by Lupine Engine - Game Manager");
		p_file->store_line("# Central game state management");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Game state");
		p_file->store_line("var game_paused: bool = false");
		p_file->store_line("var current_scene_path: String = \"\"");
		p_file->store_line("var player_spawn_point: Vector2 = Vector2.ZERO");
		p_file->store_line("");
		p_file->store_line("# Events");
		p_file->store_line("signal game_paused");
		p_file->store_line("signal game_resumed");
		p_file->store_line("signal scene_changed(scene_path: String)");
		p_file->store_line("signal player_died");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tcurrent_scene_path = get_tree().current_scene.scene_file_path");
		p_file->store_line("");
		p_file->store_line("func _unhandled_input(event: InputEvent):");
		p_file->store_line("\tif event.is_action_pressed(\"pause\"):");
		p_file->store_line("\t\ttoggle_pause()");
		p_file->store_line("");
		p_file->store_line("func toggle_pause():");
		p_file->store_line("\tgame_paused = !game_paused");
		p_file->store_line("\tget_tree().paused = game_paused");
		p_file->store_line("\t");
		p_file->store_line("\tif game_paused:");
		p_file->store_line("\t\tgame_paused.emit()");
		p_file->store_line("\telse:");
		p_file->store_line("\t\tgame_resumed.emit()");
		p_file->store_line("");
		p_file->store_line("func change_scene(scene_path: String, spawn_point: Vector2 = Vector2.ZERO):");
		p_file->store_line("\tplayer_spawn_point = spawn_point");
		p_file->store_line("\tcurrent_scene_path = scene_path");
		p_file->store_line("\tget_tree().change_scene_to_file(scene_path)");
		p_file->store_line("\tscene_changed.emit(scene_path)");
		p_file->store_line("");
		p_file->store_line("func player_died():");
		p_file->store_line("\tplayer_died.emit()");
		p_file->store_line("\t# Implement respawn or game over logic here");
		p_file->store_line("");
		p_file->store_line("func save_game():");
		p_file->store_line("\t# Implement save system");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("func load_game():");
		p_file->store_line("\t# Implement load system");
		p_file->store_line("\tpass");
	} else if (filename == "WorldManager.gd") {
		p_file->store_line("# WorldManager.gd");
		p_file->store_line("# Generated by Lupine Engine - World Manager");
		p_file->store_line("# Manages world state, entities, and environment");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# World state");
		p_file->store_line("var world_time: float = 0.0");
		p_file->store_line("var day_length: float = 600.0  # 10 minutes per day");
		p_file->store_line("var current_day: int = 1");
		p_file->store_line("");
		p_file->store_line("# Entity tracking");
		p_file->store_line("var active_enemies: Array[Node] = []");
		p_file->store_line("var active_npcs: Array[Node] = []");
		p_file->store_line("var collectibles: Array[Node] = []");
		p_file->store_line("");
		p_file->store_line("# Events");
		p_file->store_line("signal day_changed(day: int)");
		p_file->store_line("signal enemy_spawned(enemy: Node)");
		p_file->store_line("signal enemy_defeated(enemy: Node)");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t_register_world_entities()");
		p_file->store_line("");
		p_file->store_line("func _process(delta: float):");
		p_file->store_line("\tworld_time += delta");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for day change");
		p_file->store_line("\tvar new_day = int(world_time / day_length) + 1");
		p_file->store_line("\tif new_day != current_day:");
		p_file->store_line("\t\tcurrent_day = new_day");
		p_file->store_line("\t\tday_changed.emit(current_day)");
		p_file->store_line("");
		p_file->store_line("func _register_world_entities():");
		p_file->store_line("\t# Find and register all world entities");
		p_file->store_line("\tvar world_node = get_node(\"../World\")");
		p_file->store_line("\tif world_node:");
		p_file->store_line("\t\t_register_entities_in_node(world_node)");
		p_file->store_line("");
		p_file->store_line("func _register_entities_in_node(node: Node):");
		p_file->store_line("\tfor child in node.get_children():");
		p_file->store_line("\t\tif child.has_method(\"is_enemy\"):");
		p_file->store_line("\t\t\tactive_enemies.append(child)");
		p_file->store_line("\t\telif child.has_method(\"is_npc\"):");
		p_file->store_line("\t\t\tactive_npcs.append(child)");
		p_file->store_line("\t\telif child.has_method(\"is_collectible\"):");
		p_file->store_line("\t\t\tcollectibles.append(child)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\t# Recursively check children");
		p_file->store_line("\t\t_register_entities_in_node(child)");
		p_file->store_line("");
		p_file->store_line("func get_time_of_day() -> float:");
		p_file->store_line("\treturn fmod(world_time, day_length) / day_length");
		p_file->store_line("");
		p_file->store_line("func is_day_time() -> bool:");
		p_file->store_line("\tvar time_of_day = get_time_of_day()");
		p_file->store_line("\treturn time_of_day >= 0.25 and time_of_day <= 0.75");
	} else if (filename == "InputManager.gd") {
		p_file->store_line("# InputManager.gd");
		p_file->store_line("# Generated by Lupine Engine - Input Manager");
		p_file->store_line("# Centralized input handling and key mapping");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Input state");
		p_file->store_line("var input_enabled: bool = true");
		p_file->store_line("var input_buffer: Dictionary = {}");
		p_file->store_line("");
		p_file->store_line("# Events");
		p_file->store_line("signal input_disabled");
		p_file->store_line("signal input_enabled");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t_setup_input_map()");
		p_file->store_line("");
		p_file->store_line("func _setup_input_map():");
		p_file->store_line("\t# Define default input mappings");
		p_file->store_line("\tif not InputMap.has_action(\"move_left\"):");
		p_file->store_line("\t\tInputMap.add_action(\"move_left\")");
		p_file->store_line("\t\tvar key_a = InputEventKey.new()");
		p_file->store_line("\t\tkey_a.keycode = KEY_A");
		p_file->store_line("\t\tInputMap.action_add_event(\"move_left\", key_a)");
		p_file->store_line("\t\tvar key_left = InputEventKey.new()");
		p_file->store_line("\t\tkey_left.keycode = KEY_LEFT");
		p_file->store_line("\t\tInputMap.action_add_event(\"move_left\", key_left)");
		p_file->store_line("\t");
		p_file->store_line("\tif not InputMap.has_action(\"move_right\"):");
		p_file->store_line("\t\tInputMap.add_action(\"move_right\")");
		p_file->store_line("\t\tvar key_d = InputEventKey.new()");
		p_file->store_line("\t\tkey_d.keycode = KEY_D");
		p_file->store_line("\t\tInputMap.action_add_event(\"move_right\", key_d)");
		p_file->store_line("\t\tvar key_right = InputEventKey.new()");
		p_file->store_line("\t\tkey_right.keycode = KEY_RIGHT");
		p_file->store_line("\t\tInputMap.action_add_event(\"move_right\", key_right)");
		p_file->store_line("\t");
		p_file->store_line("\tif not InputMap.has_action(\"move_up\"):");
		p_file->store_line("\t\tInputMap.add_action(\"move_up\")");
		p_file->store_line("\t\tvar key_w = InputEventKey.new()");
		p_file->store_line("\t\tkey_w.keycode = KEY_W");
		p_file->store_line("\t\tInputMap.action_add_event(\"move_up\", key_w)");
		p_file->store_line("\t\tvar key_up = InputEventKey.new()");
		p_file->store_line("\t\tkey_up.keycode = KEY_UP");
		p_file->store_line("\t\tInputMap.action_add_event(\"move_up\", key_up)");
		p_file->store_line("\t");
		p_file->store_line("\tif not InputMap.has_action(\"move_down\"):");
		p_file->store_line("\t\tInputMap.add_action(\"move_down\")");
		p_file->store_line("\t\tvar key_s = InputEventKey.new()");
		p_file->store_line("\t\tkey_s.keycode = KEY_S");
		p_file->store_line("\t\tInputMap.action_add_event(\"move_down\", key_s)");
		p_file->store_line("\t\tvar key_down = InputEventKey.new()");
		p_file->store_line("\t\tkey_down.keycode = KEY_DOWN");
		p_file->store_line("\t\tInputMap.action_add_event(\"move_down\", key_down)");
		p_file->store_line("\t");
		p_file->store_line("\t# Add other actions");
		p_file->store_line("\t_add_action_if_missing(\"sprint\", KEY_SHIFT)");
		p_file->store_line("\t_add_action_if_missing(\"attack\", KEY_F)");
		p_file->store_line("\t_add_action_if_missing(\"ranged_attack\", KEY_R)");
		p_file->store_line("\t_add_action_if_missing(\"dash\", KEY_TAB)");
		p_file->store_line("\t_add_action_if_missing(\"interact\", KEY_E)");
		p_file->store_line("\t_add_action_if_missing(\"pause\", KEY_ESCAPE)");
		p_file->store_line("");
		p_file->store_line("func _add_action_if_missing(action_name: String, keycode: Key):");
		p_file->store_line("\tif not InputMap.has_action(action_name):");
		p_file->store_line("\t\tInputMap.add_action(action_name)");
		p_file->store_line("\t\tvar key_event = InputEventKey.new()");
		p_file->store_line("\t\tkey_event.keycode = keycode");
		p_file->store_line("\t\tInputMap.action_add_event(action_name, key_event)");
		p_file->store_line("");
		p_file->store_line("func disable_input():");
		p_file->store_line("\tinput_enabled = false");
		p_file->store_line("\tinput_disabled.emit()");
		p_file->store_line("");
		p_file->store_line("func enable_input():");
		p_file->store_line("\tinput_enabled = true");
		p_file->store_line("\tinput_enabled.emit()");
		p_file->store_line("");
		p_file->store_line("func is_input_enabled() -> bool:");
		p_file->store_line("\treturn input_enabled");
	} else if (filename == "GameUI.gd") {
		// Same GameUI script as 4-directional version
		p_file->store_line("# GameUI.gd");
		p_file->store_line("# Generated by Lupine Engine - Game UI Controller");
		p_file->store_line("# Main game interface controller");
		p_file->store_line("");
		p_file->store_line("extends Control");
		p_file->store_line("");
		p_file->store_line("# UI References");
		p_file->store_line("@onready var health_bar: ProgressBar = $VBoxContainer/StatsContainer/HealthBar");
		p_file->store_line("@onready var stamina_bar: ProgressBar = $VBoxContainer/StatsContainer/StaminaBar");
		p_file->store_line("@onready var mana_bar: ProgressBar = $VBoxContainer/StatsContainer/ManaBar");
		p_file->store_line("@onready var experience_bar: ProgressBar = $VBoxContainer/StatsContainer/ExperienceBar");
		p_file->store_line("@onready var level_label: Label = $VBoxContainer/StatsContainer/LevelLabel");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Connect to PlayerStats signals");
		p_file->store_line("\tif PlayerStats:");
		p_file->store_line("\t\tPlayerStats.health_changed.connect(_on_health_changed)");
		p_file->store_line("\t\tPlayerStats.stamina_changed.connect(_on_stamina_changed)");
		p_file->store_line("\t\tPlayerStats.mana_changed.connect(_on_mana_changed)");
		p_file->store_line("\t\tPlayerStats.experience_changed.connect(_on_experience_changed)");
		p_file->store_line("\t\tPlayerStats.level_changed.connect(_on_level_changed)");
		p_file->store_line("\t\t_update_all_bars()");
		p_file->store_line("");
		p_file->store_line("func _on_health_changed(current: float, maximum: float):");
		p_file->store_line("\tif health_bar:");
		p_file->store_line("\t\thealth_bar.max_value = maximum");
		p_file->store_line("\t\thealth_bar.value = current");
		p_file->store_line("");
		p_file->store_line("func _on_stamina_changed(current: float, maximum: float):");
		p_file->store_line("\tif stamina_bar:");
		p_file->store_line("\t\tstamina_bar.max_value = maximum");
		p_file->store_line("\t\tstamina_bar.value = current");
		p_file->store_line("");
		p_file->store_line("func _on_mana_changed(current: float, maximum: float):");
		p_file->store_line("\tif mana_bar:");
		p_file->store_line("\t\tmana_bar.max_value = maximum");
		p_file->store_line("\t\tmana_bar.value = current");
		p_file->store_line("");
		p_file->store_line("func _on_experience_changed(current: float, required: float):");
		p_file->store_line("\tif experience_bar:");
		p_file->store_line("\t\texperience_bar.max_value = required");
		p_file->store_line("\t\texperience_bar.value = current");
		p_file->store_line("");
		p_file->store_line("func _on_level_changed(level: int):");
		p_file->store_line("\tif level_label:");
		p_file->store_line("\t\tlevel_label.text = \"Level: \" + str(level)");
		p_file->store_line("");
		p_file->store_line("func _update_all_bars():");
		p_file->store_line("\tif PlayerStats:");
		p_file->store_line("\t\t_on_health_changed(PlayerStats.current_health, PlayerStats.max_health)");
		p_file->store_line("\t\t_on_stamina_changed(PlayerStats.current_stamina, PlayerStats.max_stamina)");
		p_file->store_line("\t\t_on_mana_changed(PlayerStats.current_mana, PlayerStats.max_mana)");
		p_file->store_line("\t\t_on_experience_changed(PlayerStats.current_experience, PlayerStats.experience_to_next_level)");
		p_file->store_line("\t\t_on_level_changed(PlayerStats.current_level)");
	}
}

void TopdownRPG8DirMainSceneModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "Main") {
		// Enhanced main scene with complete example setup for 8-directional movement
		p_file->store_line("[gd_scene load_steps=12 format=3 uid=\"uid://main_topdown_rpg_8dir\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/WorldManager.gd\" id=\"1_world_manager\"]");
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"res://scenes/Player2DTopdown8Dir.tscn\" id=\"2_player\"]");
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"res://scenes/CameraTopdownRPG.tscn\" id=\"3_camera\"]");
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"res://scenes/ui/GameUI.tscn\" id=\"4_game_ui\"]");
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"res://scenes/enemies/EnemyPatrolGuard.tscn\" id=\"5_enemy_guard\"]");
		p_file->store_line("[ext_resource type=\"PackedScene\" path=\"res://scenes/enemies/EnemyChaser.tscn\" id=\"6_enemy_chaser\"]");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/characters/BasicNPC.gd\" id=\"7_npc_script\"]");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/world/TreasureChest.gd\" id=\"8_chest_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"RectangleShape2D\" id=\"RectangleShape2D_1\"]");
		p_file->store_line("size = Vector2(20, 30)");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CircleShape2D\" id=\"CircleShape2D_1\"]");
		p_file->store_line("radius = 40.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"Main\" type=\"Node2D\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"WorldManager\" type=\"Node\" parent=\".\"]");
		p_file->store_line("script = ExtResource(\"1_world_manager\")");
		p_file->store_line("");
		p_file->store_line("# Background Environment");
		p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_right = 1200.0");
		p_file->store_line("offset_bottom = 800.0");
		p_file->store_line("color = Color(0.2, 0.6, 0.2, 1)");
		p_file->store_line("z_index = -10");
		p_file->store_line("");
		p_file->store_line("# Player Character (8-Directional)");
		p_file->store_line("[node name=\"Player\" parent=\".\" instance=ExtResource(\"2_player\")]");
		p_file->store_line("position = Vector2(600, 400)");
		p_file->store_line("");
		p_file->store_line("# Camera System");
		p_file->store_line("[node name=\"Camera\" parent=\".\" groups=[\"camera\"] instance=ExtResource(\"3_camera\")]");
		p_file->store_line("");
		p_file->store_line("# World Container");
		p_file->store_line("[node name=\"World\" type=\"Node2D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("# Environment Objects");
		p_file->store_line("[node name=\"Environment\" type=\"Node2D\" parent=\"World\"]");
		p_file->store_line("");
		p_file->store_line("# Example Walls/Obstacles");
		p_file->store_line("[node name=\"Wall1\" type=\"StaticBody2D\" parent=\"World/Environment\"]");
		p_file->store_line("position = Vector2(200, 200)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\"World/Environment/Wall1\"]");
		p_file->store_line("modulate = Color(0.5, 0.3, 0.1, 1)");
		p_file->store_line("scale = Vector2(100, 20)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"World/Environment/Wall1\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("scale = Vector2(5, 1)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Wall2\" type=\"StaticBody2D\" parent=\"World/Environment\"]");
		p_file->store_line("position = Vector2(1000, 600)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\"World/Environment/Wall2\"]");
		p_file->store_line("modulate = Color(0.5, 0.3, 0.1, 1)");
		p_file->store_line("scale = Vector2(20, 100)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"World/Environment/Wall2\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("scale = Vector2(1, 5)");
		p_file->store_line("");
		p_file->store_line("# Enemy Examples");
		p_file->store_line("[node name=\"Enemies\" type=\"Node2D\" parent=\"World\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"PatrolGuard1\" parent=\"World/Enemies\" instance=ExtResource(\"5_enemy_guard\")]");
		p_file->store_line("position = Vector2(300, 300)");
		p_file->store_line("");
		p_file->store_line("[node name=\"PatrolGuard2\" parent=\"World/Enemies\" instance=ExtResource(\"5_enemy_guard\")]");
		p_file->store_line("position = Vector2(800, 200)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Chaser1\" parent=\"World/Enemies\" instance=ExtResource(\"6_enemy_chaser\")]");
		p_file->store_line("position = Vector2(900, 500)");
		p_file->store_line("");
		p_file->store_line("# NPC Examples");
		p_file->store_line("[node name=\"NPCs\" type=\"Node2D\" parent=\"World\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"VillageElder\" type=\"CharacterBody2D\" parent=\"World/NPCs\"]");
		p_file->store_line("position = Vector2(400, 150)");
		p_file->store_line("script = ExtResource(\"7_npc_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\"World/NPCs/VillageElder\"]");
		p_file->store_line("modulate = Color(0.8, 0.8, 1, 1)");
		p_file->store_line("scale = Vector2(20, 30)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"World/NPCs/VillageElder\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"InteractionArea\" type=\"Area2D\" parent=\"World/NPCs/VillageElder\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"World/NPCs/VillageElder/InteractionArea\"]");
		p_file->store_line("shape = SubResource(\"CircleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Merchant\" type=\"CharacterBody2D\" parent=\"World/NPCs\"]");
		p_file->store_line("position = Vector2(700, 150)");
		p_file->store_line("script = ExtResource(\"7_npc_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\"World/NPCs/Merchant\"]");
		p_file->store_line("modulate = Color(1, 0.8, 0.2, 1)");
		p_file->store_line("scale = Vector2(20, 30)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"World/NPCs/Merchant\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"InteractionArea\" type=\"Area2D\" parent=\"World/NPCs/Merchant\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"World/NPCs/Merchant/InteractionArea\"]");
		p_file->store_line("shape = SubResource(\"CircleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("# Collectibles and Interactive Objects");
		p_file->store_line("[node name=\"Collectibles\" type=\"Node2D\" parent=\"World\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"TreasureChest1\" type=\"Area2D\" parent=\"World/Collectibles\"]");
		p_file->store_line("position = Vector2(150, 500)");
		p_file->store_line("script = ExtResource(\"8_chest_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\"World/Collectibles/TreasureChest1\"]");
		p_file->store_line("modulate = Color(0.8, 0.6, 0.2, 1)");
		p_file->store_line("scale = Vector2(25, 20)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"World/Collectibles/TreasureChest1\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"TreasureChest2\" type=\"Area2D\" parent=\"World/Collectibles\"]");
		p_file->store_line("position = Vector2(1050, 300)");
		p_file->store_line("script = ExtResource(\"8_chest_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\"World/Collectibles/TreasureChest2\"]");
		p_file->store_line("modulate = Color(0.8, 0.6, 0.2, 1)");
		p_file->store_line("scale = Vector2(25, 20)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\"World/Collectibles/TreasureChest2\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("# UI Layer");
		p_file->store_line("[node name=\"UI\" type=\"CanvasLayer\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"GameUI\" parent=\"UI\" instance=ExtResource(\"4_game_ui\")]");
	} else if (p_scene_name == "GameUI") {
		// Same GameUI scene as 4-directional version
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://game_ui_8dir\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/GameUI.gd\" id=\"1_game_ui_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"GameUI\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("script = ExtResource(\"1_game_ui_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"VBoxContainer\" type=\"VBoxContainer\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 2");
		p_file->store_line("anchor_top = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("offset_left = 10.0");
		p_file->store_line("offset_top = -120.0");
		p_file->store_line("offset_right = 300.0");
		p_file->store_line("offset_bottom = -10.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"StatsContainer\" type=\"VBoxContainer\" parent=\"VBoxContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("");
		p_file->store_line("[node name=\"LevelLabel\" type=\"Label\" parent=\"VBoxContainer/StatsContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("text = \"Level: 1\"");
		p_file->store_line("");
		p_file->store_line("[node name=\"HealthBar\" type=\"ProgressBar\" parent=\"VBoxContainer/StatsContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("max_value = 100.0");
		p_file->store_line("value = 100.0");
		p_file->store_line("show_percentage = false");
		p_file->store_line("");
		p_file->store_line("[node name=\"StaminaBar\" type=\"ProgressBar\" parent=\"VBoxContainer/StatsContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("max_value = 100.0");
		p_file->store_line("value = 100.0");
		p_file->store_line("show_percentage = false");
		p_file->store_line("");
		p_file->store_line("[node name=\"ManaBar\" type=\"ProgressBar\" parent=\"VBoxContainer/StatsContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("max_value = 100.0");
		p_file->store_line("value = 100.0");
		p_file->store_line("show_percentage = false");
		p_file->store_line("");
		p_file->store_line("[node name=\"ExperienceBar\" type=\"ProgressBar\" parent=\"VBoxContainer/StatsContainer\"]");
		p_file->store_line("layout_mode = 2");
		p_file->store_line("max_value = 100.0");
		p_file->store_line("show_percentage = false");
	}
}
