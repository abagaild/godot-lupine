#include "ability_system_module.h"

void AbilitySystemModule::generate_script(Ref<FileAccess> p_file) {
	p_file->store_line("# AbilitySystem.gd");
	p_file->store_line("# Generated by Lupine Engine - Ability System");
	p_file->store_line("# RPG ability system with spells, skills, and cooldowns");
	p_file->store_line("");
	p_file->store_line("extends Node");
	p_file->store_line("");
	p_file->store_line("# Signals");
	p_file->store_line("signal ability_used(ability_id: String, caster: Node)");
	p_file->store_line("signal ability_learned(ability_id: String)");
	p_file->store_line("signal ability_upgraded(ability_id: String, new_level: int)");
	p_file->store_line("signal cooldown_started(ability_id: String, duration: float)");
	p_file->store_line("signal cooldown_finished(ability_id: String)");
	p_file->store_line("");
	p_file->store_line("# Ability data");
	p_file->store_line("var ability_database: Dictionary = {}");
	p_file->store_line("var learned_abilities: Dictionary = {}");
	p_file->store_line("var ability_cooldowns: Dictionary = {}");
	p_file->store_line("var active_buffs: Array[Dictionary] = []");
	p_file->store_line("");
	p_file->store_line("# Hotbar abilities");
	p_file->store_line("var hotbar_abilities: Array[String] = [\"\", \"\", \"\", \"\", \"\"]");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\t_load_ability_database()");
	p_file->store_line("\t_setup_default_abilities()");
	p_file->store_line("");
	p_file->store_line("func _process(delta):");
	p_file->store_line("\t_update_cooldowns(delta)");
	p_file->store_line("\t_update_buffs(delta)");
	p_file->store_line("");
	p_file->store_line("func use_ability(ability_id: String, caster: Node, target_position: Vector2 = Vector2.ZERO) -> bool:");
	p_file->store_line("\t# Check if ability exists and is learned");
	p_file->store_line("\tif not learned_abilities.has(ability_id):");
	p_file->store_line("\t\tprint(\"Ability not learned: \", ability_id)");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\t# Check cooldown");
	p_file->store_line("\tif is_on_cooldown(ability_id):");
	p_file->store_line("\t\tprint(\"Ability on cooldown: \", ability_id)");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\tvar ability_data = ability_database[ability_id]");
	p_file->store_line("\tvar ability_level = learned_abilities[ability_id]");
	p_file->store_line("\t");
	p_file->store_line("\t# Check mana cost");
	p_file->store_line("\tvar mana_cost = _get_ability_stat(ability_data, \"mana_cost\", ability_level)");
	p_file->store_line("\tif PlayerStats and PlayerStats.current_mana < mana_cost:");
	p_file->store_line("\t\tprint(\"Not enough mana for ability: \", ability_id)");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\t# Consume mana");
	p_file->store_line("\tif PlayerStats:");
	p_file->store_line("\t\tPlayerStats.modify_mana(-mana_cost)");
	p_file->store_line("\t");
	p_file->store_line("\t# Execute ability");
	p_file->store_line("\t_execute_ability(ability_id, ability_data, ability_level, caster, target_position)");
	p_file->store_line("\t");
	p_file->store_line("\t# Start cooldown");
	p_file->store_line("\tvar cooldown = _get_ability_stat(ability_data, \"cooldown\", ability_level)");
	p_file->store_line("\tstart_cooldown(ability_id, cooldown)");
	p_file->store_line("\t");
	p_file->store_line("\tability_used.emit(ability_id, caster)");
	p_file->store_line("\treturn true");
	p_file->store_line("");
	p_file->store_line("func _execute_ability(ability_id: String, ability_data: Dictionary, level: int, caster: Node, target_pos: Vector2):");
	p_file->store_line("\tmatch ability_data.type:");
	p_file->store_line("\t\t\"projectile\":");
	p_file->store_line("\t\t\t_cast_projectile_ability(ability_id, ability_data, level, caster, target_pos)");
	p_file->store_line("\t\t\"melee\":");
	p_file->store_line("\t\t\t_cast_melee_ability(ability_id, ability_data, level, caster)");
	p_file->store_line("\t\t\"buff\":");
	p_file->store_line("\t\t\t_cast_buff_ability(ability_id, ability_data, level, caster)");
	p_file->store_line("\t\t\"heal\":");
	p_file->store_line("\t\t\t_cast_heal_ability(ability_id, ability_data, level, caster)");
	p_file->store_line("");
	p_file->store_line("func _cast_projectile_ability(ability_id: String, data: Dictionary, level: int, caster: Node, target_pos: Vector2):");
	p_file->store_line("\tvar projectile_scene = load(data.projectile_scene)");
	p_file->store_line("\tif not projectile_scene:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tvar projectile = projectile_scene.instantiate()");
	p_file->store_line("\tget_tree().current_scene.add_child(projectile)");
	p_file->store_line("\t");
	p_file->store_line("\t# Set projectile properties");
	p_file->store_line("\tprojectile.global_position = caster.global_position");
	p_file->store_line("\tprojectile.damage = _get_ability_stat(data, \"damage\", level)");
	p_file->store_line("\tprojectile.speed = _get_ability_stat(data, \"speed\", level)");
	p_file->store_line("\tprojectile.lifetime = _get_ability_stat(data, \"lifetime\", level)");
	p_file->store_line("\t");
	p_file->store_line("\t# Set direction");
	p_file->store_line("\tvar direction = (target_pos - caster.global_position).normalized()");
	p_file->store_line("\tprojectile.set_direction(direction)");
	p_file->store_line("");
	p_file->store_line("func _cast_melee_ability(ability_id: String, data: Dictionary, level: int, caster: Node):");
	p_file->store_line("\t# Create melee attack area");
	p_file->store_line("\tvar attack_area = Area2D.new()");
	p_file->store_line("\tvar collision_shape = CollisionShape2D.new()");
	p_file->store_line("\tvar shape = RectangleShape2D.new()");
	p_file->store_line("\t");
	p_file->store_line("\tshape.size = Vector2(_get_ability_stat(data, \"range\", level), 50)");
	p_file->store_line("\tcollision_shape.shape = shape");
	p_file->store_line("\tattack_area.add_child(collision_shape)");
	p_file->store_line("\t");
	p_file->store_line("\t# Position attack area");
	p_file->store_line("\tget_tree().current_scene.add_child(attack_area)");
	p_file->store_line("\tattack_area.global_position = caster.global_position");
	p_file->store_line("\t");
	p_file->store_line("\t# Check for enemies in range");
	p_file->store_line("\tawait get_tree().process_frame");
	p_file->store_line("\tvar bodies = attack_area.get_overlapping_bodies()");
	p_file->store_line("\tvar damage = _get_ability_stat(data, \"damage\", level)");
	p_file->store_line("\t");
	p_file->store_line("\tfor body in bodies:");
	p_file->store_line("\t\tif body != caster and body.has_method(\"take_damage\"):");
	p_file->store_line("\t\t\tbody.take_damage(damage)");
	p_file->store_line("\t");
	p_file->store_line("\tattack_area.queue_free()");
	p_file->store_line("");
	p_file->store_line("func _cast_buff_ability(ability_id: String, data: Dictionary, level: int, caster: Node):");
	p_file->store_line("\tvar buff = {");
	p_file->store_line("\t\t\"id\": ability_id,");
	p_file->store_line("\t\t\"duration\": _get_ability_stat(data, \"duration\", level),");
	p_file->store_line("\t\t\"effects\": data.effects,");
	p_file->store_line("\t\t\"level\": level,");
	p_file->store_line("\t\t\"target\": caster");
	p_file->store_line("\t}");
	p_file->store_line("\t");
	p_file->store_line("\tactive_buffs.append(buff)");
	p_file->store_line("\t_apply_buff_effects(buff, true)");
	p_file->store_line("");
	p_file->store_line("func _cast_heal_ability(ability_id: String, data: Dictionary, level: int, caster: Node):");
	p_file->store_line("\tvar heal_amount = _get_ability_stat(data, \"heal_amount\", level)");
	p_file->store_line("\tif caster.has_method(\"heal\"):");
	p_file->store_line("\t\tcaster.heal(heal_amount)");
	p_file->store_line("\telif PlayerStats:");
	p_file->store_line("\t\tPlayerStats.heal(heal_amount)");
	p_file->store_line("");
	p_file->store_line("func learn_ability(ability_id: String) -> bool:");
	p_file->store_line("\tif not ability_database.has(ability_id):");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\tlearned_abilities[ability_id] = 1");
	p_file->store_line("\tability_learned.emit(ability_id)");
	p_file->store_line("\treturn true");
	p_file->store_line("");
	p_file->store_line("func upgrade_ability(ability_id: String) -> bool:");
	p_file->store_line("\tif not learned_abilities.has(ability_id):");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\tvar current_level = learned_abilities[ability_id]");
	p_file->store_line("\tvar max_level = ability_database[ability_id].get(\"max_level\", 5)");
	p_file->store_line("\t");
	p_file->store_line("\tif current_level >= max_level:");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\tlearned_abilities[ability_id] = current_level + 1");
	p_file->store_line("\tability_upgraded.emit(ability_id, current_level + 1)");
	p_file->store_line("\treturn true");
	p_file->store_line("");
	p_file->store_line("func start_cooldown(ability_id: String, duration: float):");
	p_file->store_line("\tability_cooldowns[ability_id] = duration");
	p_file->store_line("\tcooldown_started.emit(ability_id, duration)");
	p_file->store_line("");
	p_file->store_line("func is_on_cooldown(ability_id: String) -> bool:");
	p_file->store_line("\treturn ability_cooldowns.has(ability_id) and ability_cooldowns[ability_id] > 0");
	p_file->store_line("");
	p_file->store_line("func get_cooldown_remaining(ability_id: String) -> float:");
	p_file->store_line("\treturn ability_cooldowns.get(ability_id, 0.0)");
	p_file->store_line("");
	p_file->store_line("func _update_cooldowns(delta: float):");
	p_file->store_line("\tfor ability_id in ability_cooldowns.keys():");
	p_file->store_line("\t\tability_cooldowns[ability_id] -= delta");
	p_file->store_line("\t\tif ability_cooldowns[ability_id] <= 0:");
	p_file->store_line("\t\t\tability_cooldowns.erase(ability_id)");
	p_file->store_line("\t\t\tcooldown_finished.emit(ability_id)");
	p_file->store_line("");
	p_file->store_line("func _update_buffs(delta: float):");
	p_file->store_line("\tfor i in range(active_buffs.size() - 1, -1, -1):");
	p_file->store_line("\t\tvar buff = active_buffs[i]");
	p_file->store_line("\t\tbuff.duration -= delta");
	p_file->store_line("\t\t");
	p_file->store_line("\t\tif buff.duration <= 0:");
	p_file->store_line("\t\t\t_apply_buff_effects(buff, false)");
	p_file->store_line("\t\t\tactive_buffs.remove_at(i)");
	p_file->store_line("");
	p_file->store_line("func _apply_buff_effects(buff: Dictionary, apply: bool):");
	p_file->store_line("\tfor effect in buff.effects:");
	p_file->store_line("\t\tvar value = _get_ability_stat({\"effects\": buff.effects}, effect.stat, buff.level)");
	p_file->store_line("\t\tif not apply:");
	p_file->store_line("\t\t\tvalue = -value");
	p_file->store_line("\t\t");
	p_file->store_line("\t\tif PlayerStats and PlayerStats.has_method(\"modify_stat\"):");
	p_file->store_line("\t\t\tPlayerStats.modify_stat(effect.stat, value)");
	p_file->store_line("");
	p_file->store_line("func _get_ability_stat(ability_data: Dictionary, stat_name: String, level: int) -> float:");
	p_file->store_line("\tvar base_value = ability_data.get(stat_name, 0.0)");
	p_file->store_line("\tvar scaling = ability_data.get(stat_name + \"_scaling\", 0.0)");
	p_file->store_line("\treturn base_value + (scaling * (level - 1))");
	p_file->store_line("");
	p_file->store_line("func _load_ability_database():");
	p_file->store_line("\t# Load from JSON file or create defaults");
	p_file->store_line("\tvar file_path = \"res://data/abilities.json\"");
	p_file->store_line("\tvar file = FileAccess.open(file_path, FileAccess.READ)");
	p_file->store_line("\tif file:");
	p_file->store_line("\t\tvar json_text = file.get_as_text()");
	p_file->store_line("\t\tfile.close()");
	p_file->store_line("\t\tvar json = JSON.new()");
	p_file->store_line("\t\tvar parse_result = json.parse(json_text)");
	p_file->store_line("\t\tif parse_result == OK:");
	p_file->store_line("\t\t\tability_database = json.data");
	p_file->store_line("\telse:");
	p_file->store_line("\t\t_create_default_abilities()");
	p_file->store_line("");
	p_file->store_line("func _create_default_abilities():");
	p_file->store_line("\tability_database = {");
	p_file->store_line("\t\t\"fireball\": {");
	p_file->store_line("\t\t\t\"name\": \"Fireball\",");
	p_file->store_line("\t\t\t\"type\": \"projectile\",");
	p_file->store_line("\t\t\t\"damage\": 30.0,");
	p_file->store_line("\t\t\t\"damage_scaling\": 5.0,");
	p_file->store_line("\t\t\t\"mana_cost\": 20.0,");
	p_file->store_line("\t\t\t\"cooldown\": 2.0,");
	p_file->store_line("\t\t\t\"speed\": 300.0,");
	p_file->store_line("\t\t\t\"lifetime\": 3.0,");
	p_file->store_line("\t\t\t\"projectile_scene\": \"res://scenes/projectiles/Projectile.tscn\"");
	p_file->store_line("\t\t},");
	p_file->store_line("\t\t\"slash\": {");
	p_file->store_line("\t\t\t\"name\": \"Slash\",");
	p_file->store_line("\t\t\t\"type\": \"melee\",");
	p_file->store_line("\t\t\t\"damage\": 40.0,");
	p_file->store_line("\t\t\t\"damage_scaling\": 8.0,");
	p_file->store_line("\t\t\t\"mana_cost\": 10.0,");
	p_file->store_line("\t\t\t\"cooldown\": 1.5,");
	p_file->store_line("\t\t\t\"range\": 80.0");
	p_file->store_line("\t\t}");
	p_file->store_line("\t}");
	p_file->store_line("");
	p_file->store_line("func _setup_default_abilities():");
	p_file->store_line("\t# Give player some starting abilities");
	p_file->store_line("\tlearn_ability(\"fireball\")");
	p_file->store_line("\tlearn_ability(\"slash\")");
	p_file->store_line("\t");
	p_file->store_line("\t# Set up hotbar");
	p_file->store_line("\thotbar_abilities[0] = \"fireball\"");
	p_file->store_line("\thotbar_abilities[1] = \"slash\"");
}

void AbilitySystemModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "Projectile") {
		// Generate projectile scene
		p_file->store_line("[gd_scene load_steps=3 format=3 uid=\"uid://projectile_base\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/projectiles/Projectile.gd\" id=\"1_projectile_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CircleShape2D\" id=\"CircleShape2D_1\"]");
		p_file->store_line("radius = 8.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"Projectile\" type=\"Area2D\"]");
		p_file->store_line("script = ExtResource(\"1_projectile_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("modulate = Color(1, 0.5, 0, 1)");
		p_file->store_line("scale = Vector2(16, 16)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"CircleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Trail\" type=\"Line2D\" parent=\".\"]");
		p_file->store_line("width = 3.0");
		p_file->store_line("default_color = Color(1, 0.8, 0, 0.5)");
	} else if (p_scene_name == "Fireball") {
		// Generate fireball ability scene
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://fireball_ability\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"PackedScene\" uid=\"uid://projectile_base\" path=\"res://scenes/projectiles/Projectile.tscn\" id=\"1_projectile_base\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"Fireball\" instance=ExtResource(\"1_projectile_base\")]");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" parent=\".\" index=\"0\"]");
		p_file->store_line("modulate = Color(1, 0.3, 0, 1)");
		p_file->store_line("scale = Vector2(20, 20)");
	} else if (p_scene_name == "Slash") {
		// Generate slash ability scene
		p_file->store_line("[gd_scene load_steps=3 format=3 uid=\"uid://slash_ability\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/abilities/MeleeAbility.gd\" id=\"1_melee_ability_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"RectangleShape2D\" id=\"RectangleShape2D_1\"]");
		p_file->store_line("size = Vector2(80, 50)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Slash\" type=\"Area2D\"]");
		p_file->store_line("script = ExtResource(\"1_melee_ability_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"VisualEffect\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("modulate = Color(1, 1, 1, 0.7)");
		p_file->store_line("scale = Vector2(80, 50)");
	}
}
