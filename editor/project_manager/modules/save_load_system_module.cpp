#include "save_load_system_module.h"

void SaveLoadSystemModule::generate_script(Ref<FileAccess> p_file) {
	p_file->store_line("# SaveLoadSystem.gd");
	p_file->store_line("# Generated by Lupine Engine - Save/Load System");
	p_file->store_line("# Game state persistence with multiple save slots and auto-save");
	p_file->store_line("");
	p_file->store_line("extends Node");
	p_file->store_line("");
	p_file->store_line("# Signals");
	p_file->store_line("signal game_saved(slot: int, save_name: String)");
	p_file->store_line("signal game_loaded(slot: int, save_name: String)");
	p_file->store_line("signal save_failed(slot: int, error: String)");
	p_file->store_line("signal load_failed(slot: int, error: String)");
	p_file->store_line("signal auto_save_completed()");
	p_file->store_line("");
	p_file->store_line("# Save system settings");
	p_file->store_line("const MAX_SAVE_SLOTS = 10");
	p_file->store_line("const AUTO_SAVE_SLOT = -1");
	p_file->store_line("const QUICK_SAVE_SLOT = -2");
	p_file->store_line("const SAVE_FILE_EXTENSION = \".vnsave\"");
	p_file->store_line("const SAVE_DIRECTORY = \"user://saves/\"");
	p_file->store_line("");
	p_file->store_line("# Current game state");
	p_file->store_line("var current_save_data = {}");
	p_file->store_line("var auto_save_enabled = true");
	p_file->store_line("var auto_save_interval = 300.0  # 5 minutes");
	p_file->store_line("var auto_save_timer = 0.0");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\t# Create save directory if it doesn't exist");
	p_file->store_line("\tvar dir = DirAccess.open(\"user://\")");
	p_file->store_line("\tif not dir.dir_exists(\"saves\"):");
	p_file->store_line("\t\tdir.make_dir(\"saves\")");
	p_file->store_line("\t");
	p_file->store_line("\t# Connect to other systems for state tracking");
	p_file->store_line("\tif VNScriptParser:");
	p_file->store_line("\t\tVNScriptParser.dialogue_started.connect(_on_dialogue_started)");
	p_file->store_line("\t\tVNScriptParser.variable_changed.connect(_on_variable_changed)");
	p_file->store_line("\t");
	p_file->store_line("\tif CharacterPortraitSystem:");
	p_file->store_line("\t\tCharacterPortraitSystem.portrait_changed.connect(_on_portrait_changed)");
	p_file->store_line("\t");
	p_file->store_line("\tif BackgroundManager:");
	p_file->store_line("\t\tBackgroundManager.background_changed.connect(_on_background_changed)");
	p_file->store_line("\t");
	p_file->store_line("\tif AudioManager:");
	p_file->store_line("\t\tAudioManager.music_started.connect(_on_music_started)");
	p_file->store_line("\t");
	p_file->store_line("\tprint(\"Save/Load System initialized\")");
	p_file->store_line("");
	p_file->store_line("func _process(delta):");
	p_file->store_line("\t# Auto-save timer");
	p_file->store_line("\tif auto_save_enabled:");
	p_file->store_line("\t\tauto_save_timer += delta");
	p_file->store_line("\t\tif auto_save_timer >= auto_save_interval:");
	p_file->store_line("\t\t\tauto_save()");
	p_file->store_line("\t\t\tauto_save_timer = 0.0");
	p_file->store_line("");
	p_file->store_line("# Track game state changes");
	p_file->store_line("func _on_dialogue_started(character: String, text: String):");
	p_file->store_line("\tcurrent_save_data[\"current_dialogue\"] = {");
	p_file->store_line("\t\t\"character\": character,");
	p_file->store_line("\t\t\"text\": text,");
	p_file->store_line("\t\t\"timestamp\": Time.get_unix_time_from_system()");
	p_file->store_line("\t}");
	p_file->store_line("");
	p_file->store_line("func _on_variable_changed(var_name: String, value):");
	p_file->store_line("\tif not current_save_data.has(\"variables\"):");
	p_file->store_line("\t\tcurrent_save_data[\"variables\"] = {}");
	p_file->store_line("\tcurrent_save_data[\"variables\"][var_name] = value");
	p_file->store_line("");
	p_file->store_line("func _on_portrait_changed(position: String, character: String, emotion: String):");
	p_file->store_line("\tif not current_save_data.has(\"portraits\"):");
	p_file->store_line("\t\tcurrent_save_data[\"portraits\"] = {}");
	p_file->store_line("\tcurrent_save_data[\"portraits\"][position] = {");
	p_file->store_line("\t\t\"character\": character,");
	p_file->store_line("\t\t\"emotion\": emotion");
	p_file->store_line("\t}");
	p_file->store_line("");
	p_file->store_line("func _on_background_changed(background_name: String):");
	p_file->store_line("\tcurrent_save_data[\"background\"] = background_name");
	p_file->store_line("");
	p_file->store_line("func _on_music_started(track_name: String):");
	p_file->store_line("\tcurrent_save_data[\"music\"] = track_name");
	p_file->store_line("");
	p_file->store_line("# Save game to specific slot");
	p_file->store_line("func save_game(slot: int, save_name: String = \"\") -> bool:");
	p_file->store_line("\tif slot < AUTO_SAVE_SLOT or slot >= MAX_SAVE_SLOTS:");
	p_file->store_line("\t\tprint(\"Invalid save slot: \", slot)");
	p_file->store_line("\t\tsave_failed.emit(slot, \"Invalid save slot\")");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\t# Prepare save data");
	p_file->store_line("\tvar save_data = current_save_data.duplicate(true)");
	p_file->store_line("\tsave_data[\"save_name\"] = save_name if not save_name.is_empty() else \"Save \" + str(slot)");
	p_file->store_line("\tsave_data[\"save_time\"] = Time.get_datetime_string_from_system()");
	p_file->store_line("\tsave_data[\"save_timestamp\"] = Time.get_unix_time_from_system()");
	p_file->store_line("\tsave_data[\"game_version\"] = ProjectSettings.get_setting(\"application/config/version\", \"1.0\")");
	p_file->store_line("\t");
	p_file->store_line("\t# Get current script state");
	p_file->store_line("\tif VNScriptParser:");
	p_file->store_line("\t\tsave_data[\"script_state\"] = {");
	p_file->store_line("\t\t\t\"current_node\": VNScriptParser.current_node_id,");
	p_file->store_line("\t\t\t\"variables\": VNScriptParser.script_variables.duplicate()");
	p_file->store_line("\t\t}");
	p_file->store_line("\t");
	p_file->store_line("\t# Write save file");
	p_file->store_line("\tvar file_path = get_save_file_path(slot)");
	p_file->store_line("\tvar file = FileAccess.open(file_path, FileAccess.WRITE)");
	p_file->store_line("\tif not file:");
	p_file->store_line("\t\tprint(\"Failed to create save file: \", file_path)");
	p_file->store_line("\t\tsave_failed.emit(slot, \"Failed to create save file\")");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\tfile.store_string(JSON.stringify(save_data))");
	p_file->store_line("\tfile.close()");
	p_file->store_line("\t");
	p_file->store_line("\tprint(\"Game saved to slot \", slot, \": \", save_name)");
	p_file->store_line("\tgame_saved.emit(slot, save_name)");
	p_file->store_line("\treturn true");
	p_file->store_line("");
	p_file->store_line("# Load game from specific slot");
	p_file->store_line("func load_game(slot: int) -> bool:");
	p_file->store_line("\tif slot < AUTO_SAVE_SLOT or slot >= MAX_SAVE_SLOTS:");
	p_file->store_line("\t\tprint(\"Invalid save slot: \", slot)");
	p_file->store_line("\t\tload_failed.emit(slot, \"Invalid save slot\")");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\tvar file_path = get_save_file_path(slot)");
	p_file->store_line("\tif not FileAccess.file_exists(file_path):");
	p_file->store_line("\t\tprint(\"Save file not found: \", file_path)");
	p_file->store_line("\t\tload_failed.emit(slot, \"Save file not found\")");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\t# Read save file");
	p_file->store_line("\tvar file = FileAccess.open(file_path, FileAccess.READ)");
	p_file->store_line("\tif not file:");
	p_file->store_line("\t\tprint(\"Failed to open save file: \", file_path)");
	p_file->store_line("\t\tload_failed.emit(slot, \"Failed to open save file\")");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\tvar json_string = file.get_as_text()");
	p_file->store_line("\tfile.close()");
	p_file->store_line("\t");
	p_file->store_line("\t# Parse save data");
	p_file->store_line("\tvar json = JSON.new()");
	p_file->store_line("\tvar parse_result = json.parse(json_string)");
	p_file->store_line("\tif parse_result != OK:");
	p_file->store_line("\t\tprint(\"Failed to parse save file: \", file_path)");
	p_file->store_line("\t\tload_failed.emit(slot, \"Corrupted save file\")");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\tvar save_data = json.data");
	p_file->store_line("\t");
	p_file->store_line("\t# Restore game state");
	p_file->store_line("\trestore_game_state(save_data)");
	p_file->store_line("\t");
	p_file->store_line("\tvar save_name = save_data.get(\"save_name\", \"Unknown\")");
	p_file->store_line("\tprint(\"Game loaded from slot \", slot, \": \", save_name)");
	p_file->store_line("\tgame_loaded.emit(slot, save_name)");
	p_file->store_line("\treturn true");
	p_file->store_line("");
	p_file->store_line("# Restore game state from save data");
	p_file->store_line("func restore_game_state(save_data: Dictionary):");
	p_file->store_line("\t# Restore script state");
	p_file->store_line("\tif save_data.has(\"script_state\") and VNScriptParser:");
	p_file->store_line("\t\tvar script_state = save_data[\"script_state\"]");
	p_file->store_line("\t\tVNScriptParser.current_node_id = script_state.get(\"current_node\", \"\")");
	p_file->store_line("\t\tVNScriptParser.script_variables = script_state.get(\"variables\", {})");
	p_file->store_line("\t");
	p_file->store_line("\t# Restore background");
	p_file->store_line("\tif save_data.has(\"background\") and BackgroundManager:");
	p_file->store_line("\t\tBackgroundManager.set_background(save_data[\"background\"], \"none\")");
	p_file->store_line("\t");
	p_file->store_line("\t# Restore portraits");
	p_file->store_line("\tif save_data.has(\"portraits\") and CharacterPortraitSystem:");
	p_file->store_line("\t\tvar portraits = save_data[\"portraits\"]");
	p_file->store_line("\t\tfor position in portraits.keys():");
	p_file->store_line("\t\t\tvar portrait_data = portraits[position]");
	p_file->store_line("\t\t\tvar character_emotion = portrait_data[\"character\"]");
	p_file->store_line("\t\t\tif not portrait_data[\"emotion\"].is_empty():");
	p_file->store_line("\t\t\t\tcharacter_emotion += \"_\" + portrait_data[\"emotion\"]");
	p_file->store_line("\t\t\tCharacterPortraitSystem.set_portrait(position, character_emotion)");
	p_file->store_line("\t");
	p_file->store_line("\t# Restore music");
	p_file->store_line("\tif save_data.has(\"music\") and AudioManager:");
	p_file->store_line("\t\tAudioManager.play_music(save_data[\"music\"])");
	p_file->store_line("\t");
	p_file->store_line("\t# Update current save data");
	p_file->store_line("\tcurrent_save_data = save_data.duplicate(true)");
	p_file->store_line("");
	p_file->store_line("# Auto-save functionality");
	p_file->store_line("func auto_save():");
	p_file->store_line("\tif save_game(AUTO_SAVE_SLOT, \"Auto Save\"):");
	p_file->store_line("\t\tauto_save_completed.emit()");
	p_file->store_line("");
	p_file->store_line("# Quick save/load");
	p_file->store_line("func quick_save() -> bool:");
	p_file->store_line("\treturn save_game(QUICK_SAVE_SLOT, \"Quick Save\")");
	p_file->store_line("");
	p_file->store_line("func quick_load() -> bool:");
	p_file->store_line("\treturn load_game(QUICK_SAVE_SLOT)");
	p_file->store_line("");
	p_file->store_line("# Delete save file");
	p_file->store_line("func delete_save(slot: int) -> bool:");
	p_file->store_line("\tvar file_path = get_save_file_path(slot)");
	p_file->store_line("\tif FileAccess.file_exists(file_path):");
	p_file->store_line("\t\tvar dir = DirAccess.open(\"user://\")");
	p_file->store_line("\t\treturn dir.remove(file_path) == OK");
	p_file->store_line("\treturn false");
	p_file->store_line("");
	p_file->store_line("# Get save file information");
	p_file->store_line("func get_save_info(slot: int) -> Dictionary:");
	p_file->store_line("\tvar file_path = get_save_file_path(slot)");
	p_file->store_line("\tif not FileAccess.file_exists(file_path):");
	p_file->store_line("\t\treturn {}");
	p_file->store_line("\t");
	p_file->store_line("\tvar file = FileAccess.open(file_path, FileAccess.READ)");
	p_file->store_line("\tif not file:");
	p_file->store_line("\t\treturn {}");
	p_file->store_line("\t");
	p_file->store_line("\tvar json_string = file.get_as_text()");
	p_file->store_line("\tfile.close()");
	p_file->store_line("\t");
	p_file->store_line("\tvar json = JSON.new()");
	p_file->store_line("\tif json.parse(json_string) != OK:");
	p_file->store_line("\t\treturn {}");
	p_file->store_line("\t");
	p_file->store_line("\tvar save_data = json.data");
	p_file->store_line("\treturn {");
	p_file->store_line("\t\t\"save_name\": save_data.get(\"save_name\", \"Unknown\"),");
	p_file->store_line("\t\t\"save_time\": save_data.get(\"save_time\", \"\"),");
	p_file->store_line("\t\t\"save_timestamp\": save_data.get(\"save_timestamp\", 0),");
	p_file->store_line("\t\t\"game_version\": save_data.get(\"game_version\", \"Unknown\"),");
	p_file->store_line("\t\t\"current_dialogue\": save_data.get(\"current_dialogue\", {})");
	p_file->store_line("\t}");
	p_file->store_line("");
	p_file->store_line("# Get all save slots with information");
	p_file->store_line("func get_all_saves() -> Dictionary:");
	p_file->store_line("\tvar saves = {}");
	p_file->store_line("\t");
	p_file->store_line("\t# Regular save slots");
	p_file->store_line("\tfor i in range(MAX_SAVE_SLOTS):");
	p_file->store_line("\t\tvar info = get_save_info(i)");
	p_file->store_line("\t\tif not info.is_empty():");
	p_file->store_line("\t\t\tsaves[i] = info");
	p_file->store_line("\t");
	p_file->store_line("\t# Special saves");
	p_file->store_line("\tvar auto_save_info = get_save_info(AUTO_SAVE_SLOT)");
	p_file->store_line("\tif not auto_save_info.is_empty():");
	p_file->store_line("\t\tsaves[AUTO_SAVE_SLOT] = auto_save_info");
	p_file->store_line("\t");
	p_file->store_line("\tvar quick_save_info = get_save_info(QUICK_SAVE_SLOT)");
	p_file->store_line("\tif not quick_save_info.is_empty():");
	p_file->store_line("\t\tsaves[QUICK_SAVE_SLOT] = quick_save_info");
	p_file->store_line("\t");
	p_file->store_line("\treturn saves");
	p_file->store_line("");
	p_file->store_line("# Helper functions");
	p_file->store_line("func get_save_file_path(slot: int) -> String:");
	p_file->store_line("\tvar filename = \"\"");
	p_file->store_line("\tmatch slot:");
	p_file->store_line("\t\tAUTO_SAVE_SLOT:");
	p_file->store_line("\t\t\tfilename = \"autosave\"");
	p_file->store_line("\t\tQUICK_SAVE_SLOT:");
	p_file->store_line("\t\t\tfilename = \"quicksave\"");
	p_file->store_line("\t\t_:");
	p_file->store_line("\t\t\tfilename = \"save_\" + str(slot)");
	p_file->store_line("\t");
	p_file->store_line("\treturn SAVE_DIRECTORY + filename + SAVE_FILE_EXTENSION");
	p_file->store_line("");
	p_file->store_line("func save_exists(slot: int) -> bool:");
	p_file->store_line("\treturn FileAccess.file_exists(get_save_file_path(slot))");
	p_file->store_line("");
	p_file->store_line("# Settings");
	p_file->store_line("func set_auto_save_enabled(enabled: bool):");
	p_file->store_line("\tauto_save_enabled = enabled");
	p_file->store_line("\tauto_save_timer = 0.0");
	p_file->store_line("");
	p_file->store_line("func set_auto_save_interval(seconds: float):");
	p_file->store_line("\tauto_save_interval = seconds");
	p_file->store_line("\tauto_save_timer = 0.0");
}

void SaveLoadSystemModule::generate_file(Ref<FileAccess> p_file, const String &p_relative_path) {
	String filename = p_relative_path.get_file();

	if (filename == "SaveLoadMenu.gd") {
		// Generate the save/load menu UI script
		p_file->store_line("# SaveLoadMenu.gd");
		p_file->store_line("# Generated by Lupine Engine - Save/Load Menu UI Script");
		p_file->store_line("# Manages the save/load UI for the Save/Load System");
		p_file->store_line("");
		p_file->store_line("extends Control");
		p_file->store_line("");
		p_file->store_line("# UI references");
		p_file->store_line("@onready var slot_list = $Panel/VBoxContainer/SaveSlots/SlotList");
		p_file->store_line("@onready var quick_save_button = $Panel/VBoxContainer/ButtonContainer/QuickSave");
		p_file->store_line("@onready var quick_load_button = $Panel/VBoxContainer/ButtonContainer/QuickLoad");
		p_file->store_line("@onready var close_button = $Panel/VBoxContainer/ButtonContainer/Close");
		p_file->store_line("");
		p_file->store_line("# Save slot button scene (create a simple button for each slot)");
		p_file->store_line("var save_slot_buttons: Array = []");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Connect buttons");
		p_file->store_line("\tquick_save_button.pressed.connect(_on_quick_save_pressed)");
		p_file->store_line("\tquick_load_button.pressed.connect(_on_quick_load_pressed)");
		p_file->store_line("\tclose_button.pressed.connect(_on_close_pressed)");
		p_file->store_line("\t");
		p_file->store_line("\t# Hide initially");
		p_file->store_line("\tvisible = false");
		p_file->store_line("\t");
		p_file->store_line("\tprint(\"Save/Load Menu UI initialized\")");
		p_file->store_line("");
		p_file->store_line("# Show the save/load menu");
		p_file->store_line("func show_menu():");
		p_file->store_line("\tvisible = true");
		p_file->store_line("\trefresh_save_slots()");
		p_file->store_line("");
		p_file->store_line("# Hide the save/load menu");
		p_file->store_line("func hide_menu():");
		p_file->store_line("\tvisible = false");
		p_file->store_line("");
		p_file->store_line("# Refresh the save slot display");
		p_file->store_line("func refresh_save_slots():");
		p_file->store_line("\t# Clear existing buttons");
		p_file->store_line("\tclear_slot_buttons()");
		p_file->store_line("\t");
		p_file->store_line("\tif not SaveLoadSystem:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Get all saves");
		p_file->store_line("\tvar saves = SaveLoadSystem.get_all_saves()");
		p_file->store_line("\t");
		p_file->store_line("\t# Create buttons for regular save slots");
		p_file->store_line("\tfor i in range(SaveLoadSystem.MAX_SAVE_SLOTS):");
		p_file->store_line("\t\tvar button = create_save_slot_button(i, saves.get(i, {}))");
		p_file->store_line("\t\tsave_slot_buttons.append(button)");
		p_file->store_line("\t\tslot_list.add_child(button)");
		p_file->store_line("\t");
		p_file->store_line("\t# Add separator");
		p_file->store_line("\tvar separator = HSeparator.new()");
		p_file->store_line("\tslot_list.add_child(separator)");
		p_file->store_line("\t");
		p_file->store_line("\t# Add special save slots");
		p_file->store_line("\tif saves.has(SaveLoadSystem.AUTO_SAVE_SLOT):");
		p_file->store_line("\t\tvar auto_save_button = create_save_slot_button(SaveLoadSystem.AUTO_SAVE_SLOT, saves[SaveLoadSystem.AUTO_SAVE_SLOT])");
		p_file->store_line("\t\tsave_slot_buttons.append(auto_save_button)");
		p_file->store_line("\t\tslot_list.add_child(auto_save_button)");
		p_file->store_line("\t");
		p_file->store_line("\tif saves.has(SaveLoadSystem.QUICK_SAVE_SLOT):");
		p_file->store_line("\t\tvar quick_save_button = create_save_slot_button(SaveLoadSystem.QUICK_SAVE_SLOT, saves[SaveLoadSystem.QUICK_SAVE_SLOT])");
		p_file->store_line("\t\tsave_slot_buttons.append(quick_save_button)");
		p_file->store_line("\t\tslot_list.add_child(quick_save_button)");
		p_file->store_line("");
		p_file->store_line("# Create a save slot button");
		p_file->store_line("func create_save_slot_button(slot: int, save_info: Dictionary) -> Control:");
		p_file->store_line("\tvar container = HBoxContainer.new()");
		p_file->store_line("\tcontainer.size_flags_horizontal = Control.SIZE_EXPAND_FILL");
		p_file->store_line("\t");
		p_file->store_line("\t# Slot info");
		p_file->store_line("\tvar info_label = Label.new()");
		p_file->store_line("\tinfo_label.size_flags_horizontal = Control.SIZE_EXPAND_FILL");
		p_file->store_line("\t");
		p_file->store_line("\tif save_info.is_empty():");
		p_file->store_line("\t\t# Empty slot");
		p_file->store_line("\t\tvar slot_name = get_slot_name(slot)");
		p_file->store_line("\t\tinfo_label.text = slot_name + \" - Empty\"");
		p_file->store_line("\t\tinfo_label.modulate = Color.GRAY");
		p_file->store_line("\telse:");
		p_file->store_line("\t\t# Occupied slot");
		p_file->store_line("\t\tvar slot_name = get_slot_name(slot)");
		p_file->store_line("\t\tvar save_name = save_info.get(\"save_name\", \"Unknown\")");
		p_file->store_line("\t\tvar save_time = save_info.get(\"save_time\", \"\")");
		p_file->store_line("\t\tinfo_label.text = slot_name + \" - \" + save_name + \" (\" + save_time + \")\"");
		p_file->store_line("\t");
		p_file->store_line("\tcontainer.add_child(info_label)");
		p_file->store_line("\t");
		p_file->store_line("\t# Buttons");
		p_file->store_line("\tvar button_container = HBoxContainer.new()");
		p_file->store_line("\t");
		p_file->store_line("\t# Save button");
		p_file->store_line("\tvar save_button = Button.new()");
		p_file->store_line("\tsave_button.text = \"Save\"");
		p_file->store_line("\tsave_button.pressed.connect(_on_save_to_slot.bind(slot))");
		p_file->store_line("\tbutton_container.add_child(save_button)");
		p_file->store_line("\t");
		p_file->store_line("\t# Load button (only if slot has data)");
		p_file->store_line("\tif not save_info.is_empty():");
		p_file->store_line("\t\tvar load_button = Button.new()");
		p_file->store_line("\t\tload_button.text = \"Load\"");
		p_file->store_line("\t\tload_button.pressed.connect(_on_load_from_slot.bind(slot))");
		p_file->store_line("\t\tbutton_container.add_child(load_button)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\t# Delete button");
		p_file->store_line("\t\tvar delete_button = Button.new()");
		p_file->store_line("\t\tdelete_button.text = \"Delete\"");
		p_file->store_line("\t\tdelete_button.pressed.connect(_on_delete_slot.bind(slot))");
		p_file->store_line("\t\tbutton_container.add_child(delete_button)");
		p_file->store_line("\t");
		p_file->store_line("\tcontainer.add_child(button_container)");
		p_file->store_line("\treturn container");
		p_file->store_line("");
		p_file->store_line("# Get display name for slot");
		p_file->store_line("func get_slot_name(slot: int) -> String:");
		p_file->store_line("\tmatch slot:");
		p_file->store_line("\t\tSaveLoadSystem.AUTO_SAVE_SLOT:");
		p_file->store_line("\t\t\treturn \"Auto Save\"");
		p_file->store_line("\t\tSaveLoadSystem.QUICK_SAVE_SLOT:");
		p_file->store_line("\t\t\treturn \"Quick Save\"");
		p_file->store_line("\t\t_:");
		p_file->store_line("\t\t\treturn \"Slot \" + str(slot + 1)");
		p_file->store_line("");
		p_file->store_line("# Clear all slot buttons");
		p_file->store_line("func clear_slot_buttons():");
		p_file->store_line("\tfor button in save_slot_buttons:");
		p_file->store_line("\t\tif button and is_instance_valid(button):");
		p_file->store_line("\t\t\tbutton.queue_free()");
		p_file->store_line("\tsave_slot_buttons.clear()");
		p_file->store_line("\t");
		p_file->store_line("\tfor child in slot_list.get_children():");
		p_file->store_line("\t\tchild.queue_free()");
		p_file->store_line("");
		p_file->store_line("# Button handlers");
		p_file->store_line("func _on_quick_save_pressed():");
		p_file->store_line("\tif SaveLoadSystem:");
		p_file->store_line("\t\tSaveLoadSystem.quick_save()");
		p_file->store_line("\t\trefresh_save_slots()");
		p_file->store_line("");
		p_file->store_line("func _on_quick_load_pressed():");
		p_file->store_line("\tif SaveLoadSystem:");
		p_file->store_line("\t\tSaveLoadSystem.quick_load()");
		p_file->store_line("\t\thide_menu()");
		p_file->store_line("");
		p_file->store_line("func _on_close_pressed():");
		p_file->store_line("\thide_menu()");
		p_file->store_line("");
		p_file->store_line("func _on_save_to_slot(slot: int):");
		p_file->store_line("\tif SaveLoadSystem:");
		p_file->store_line("\t\tvar save_name = \"Save \" + str(slot + 1)");
		p_file->store_line("\t\tif slot == SaveLoadSystem.AUTO_SAVE_SLOT:");
		p_file->store_line("\t\t\tsave_name = \"Auto Save\"");
		p_file->store_line("\t\telif slot == SaveLoadSystem.QUICK_SAVE_SLOT:");
		p_file->store_line("\t\t\tsave_name = \"Quick Save\"");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tSaveLoadSystem.save_game(slot, save_name)");
		p_file->store_line("\t\trefresh_save_slots()");
		p_file->store_line("");
		p_file->store_line("func _on_load_from_slot(slot: int):");
		p_file->store_line("\tif SaveLoadSystem:");
		p_file->store_line("\t\tSaveLoadSystem.load_game(slot)");
		p_file->store_line("\t\thide_menu()");
		p_file->store_line("");
		p_file->store_line("func _on_delete_slot(slot: int):");
		p_file->store_line("\tif SaveLoadSystem:");
		p_file->store_line("\t\tSaveLoadSystem.delete_save(slot)");
		p_file->store_line("\t\trefresh_save_slots()");
		p_file->store_line("");
		p_file->store_line("# Handle ESC key to close menu");
		p_file->store_line("func _input(event):");
		p_file->store_line("\tif visible and event is InputEventKey and event.pressed:");
		p_file->store_line("\t\tif event.keycode == KEY_ESCAPE:");
		p_file->store_line("\t\t\thide_menu()");
		p_file->store_line("\t\t\tget_viewport().set_input_as_handled()");
	} else {
		// Use default file generation
		LupineModuleBase::generate_file(p_file, p_relative_path);
	}
}

void SaveLoadSystemModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://save_load_menu\"]");
	p_file->store_line("");
	p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/ui/SaveLoadMenu.gd\" id=\"1_save_load_script\"]");
	p_file->store_line("");
	p_file->store_line("[node name=\"SaveLoadMenu\" type=\"Control\"]");
	p_file->store_line("layout_mode = 3");
	p_file->store_line("anchors_preset = 15");
	p_file->store_line("anchor_right = 1.0");
	p_file->store_line("anchor_bottom = 1.0");
	p_file->store_line("script = ExtResource(\"1_save_load_script\")");
	p_file->store_line("");
	p_file->store_line("[node name=\"Background\" type=\"ColorRect\" parent=\".\"]");
	p_file->store_line("layout_mode = 1");
	p_file->store_line("anchors_preset = 15");
	p_file->store_line("anchor_right = 1.0");
	p_file->store_line("anchor_bottom = 1.0");
	p_file->store_line("color = Color(0, 0, 0, 0.8)");
	p_file->store_line("");
	p_file->store_line("[node name=\"Panel\" type=\"Panel\" parent=\".\"]");
	p_file->store_line("layout_mode = 1");
	p_file->store_line("anchors_preset = 8");
	p_file->store_line("anchor_left = 0.5");
	p_file->store_line("anchor_top = 0.5");
	p_file->store_line("anchor_right = 0.5");
	p_file->store_line("anchor_bottom = 0.5");
	p_file->store_line("offset_left = -300.0");
	p_file->store_line("offset_top = -200.0");
	p_file->store_line("offset_right = 300.0");
	p_file->store_line("offset_bottom = 200.0");
	p_file->store_line("");
	p_file->store_line("[node name=\"VBoxContainer\" type=\"VBoxContainer\" parent=\"Panel\"]");
	p_file->store_line("layout_mode = 1");
	p_file->store_line("anchors_preset = 15");
	p_file->store_line("anchor_right = 1.0");
	p_file->store_line("anchor_bottom = 1.0");
	p_file->store_line("offset_left = 10.0");
	p_file->store_line("offset_top = 10.0");
	p_file->store_line("offset_right = -10.0");
	p_file->store_line("offset_bottom = -10.0");
	p_file->store_line("");
	p_file->store_line("[node name=\"Title\" type=\"Label\" parent=\"Panel/VBoxContainer\"]");
	p_file->store_line("layout_mode = 2");
	p_file->store_line("text = \"Save/Load Game\"");
	p_file->store_line("horizontal_alignment = 1");
	p_file->store_line("");
	p_file->store_line("[node name=\"SaveSlots\" type=\"ScrollContainer\" parent=\"Panel/VBoxContainer\"]");
	p_file->store_line("layout_mode = 2");
	p_file->store_line("size_flags_vertical = 3");
	p_file->store_line("");
	p_file->store_line("[node name=\"SlotList\" type=\"VBoxContainer\" parent=\"Panel/VBoxContainer/SaveSlots\"]");
	p_file->store_line("layout_mode = 2");
	p_file->store_line("size_flags_horizontal = 3");
	p_file->store_line("");
	p_file->store_line("[node name=\"ButtonContainer\" type=\"HBoxContainer\" parent=\"Panel/VBoxContainer\"]");
	p_file->store_line("layout_mode = 2");
	p_file->store_line("");
	p_file->store_line("[node name=\"QuickSave\" type=\"Button\" parent=\"Panel/VBoxContainer/ButtonContainer\"]");
	p_file->store_line("layout_mode = 2");
	p_file->store_line("size_flags_horizontal = 3");
	p_file->store_line("text = \"Quick Save\"");
	p_file->store_line("");
	p_file->store_line("[node name=\"QuickLoad\" type=\"Button\" parent=\"Panel/VBoxContainer/ButtonContainer\"]");
	p_file->store_line("layout_mode = 2");
	p_file->store_line("size_flags_horizontal = 3");
	p_file->store_line("text = \"Quick Load\"");
	p_file->store_line("");
	p_file->store_line("[node name=\"Close\" type=\"Button\" parent=\"Panel/VBoxContainer/ButtonContainer\"]");
	p_file->store_line("layout_mode = 2");
	p_file->store_line("size_flags_horizontal = 3");
	p_file->store_line("text = \"Close\"");
}
