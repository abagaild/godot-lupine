#include "parallax_camera_module.h"

void ParallaxCameraModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();

	if (filename == "ParallaxCamera.gd") {
		p_file->store_line("# ParallaxCamera.gd");
		p_file->store_line("# Generated by Lupine Engine - Parallax Sidescroller Camera");
		p_file->store_line("# Enhanced camera with parallax background layers");
		p_file->store_line("");
		p_file->store_line("extends Camera2D");
		p_file->store_line("class_name ParallaxCamera");
		p_file->store_line("");
		p_file->store_line("# Camera settings");
		p_file->store_line("@export var follow_speed: float = 5.0");
		p_file->store_line("@export var lookahead_distance: float = 100.0");
		p_file->store_line("@export var lookahead_speed: float = 2.0");
		p_file->store_line("@export var deadzone_size: Vector2 = Vector2(50, 30)");
		p_file->store_line("@export var camera_bounds: Rect2 = Rect2()");
		p_file->store_line("@export var enable_screen_shake: bool = true");
		p_file->store_line("");
		p_file->store_line("# Target and state");
		p_file->store_line("var target: Node2D = null");
		p_file->store_line("var target_position: Vector2");
		p_file->store_line("var lookahead_offset: Vector2");
		p_file->store_line("var shake_intensity: float = 0.0");
		p_file->store_line("var shake_duration: float = 0.0");
		p_file->store_line("");
		p_file->store_line("# Parallax layers");
		p_file->store_line("var parallax_layers: Array[ParallaxLayer] = []");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Find player target");
		p_file->store_line("\tif not target:");
		p_file->store_line("\t\ttarget = get_tree().get_first_node_in_group(\"player\")");
		p_file->store_line("\t");
		p_file->store_line("\t# Collect parallax layers");
		p_file->store_line("\t_collect_parallax_layers()");
		p_file->store_line("\t");
		p_file->store_line("\t# Set initial position");
		p_file->store_line("\tif target:");
		p_file->store_line("\t\tglobal_position = target.global_position");
		p_file->store_line("\t\ttarget_position = target.global_position");
		p_file->store_line("");
		p_file->store_line("func _process(delta):");
		p_file->store_line("\tif not target:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Update target position with lookahead");
		p_file->store_line("\t_update_target_position(delta)");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply camera bounds");
		p_file->store_line("\t_apply_camera_bounds()");
		p_file->store_line("\t");
		p_file->store_line("\t# Handle screen shake");
		p_file->store_line("\t_update_screen_shake(delta)");
		p_file->store_line("\t");
		p_file->store_line("\t# Update camera position");
		p_file->store_line("\t_update_camera_position(delta)");
		p_file->store_line("\t");
		p_file->store_line("\t# Update parallax layers");
		p_file->store_line("\t_update_parallax_layers()");
		p_file->store_line("");
		p_file->store_line("func _update_target_position(delta: float):");
		p_file->store_line("\tvar player_velocity = Vector2.ZERO");
		p_file->store_line("\tif target.has_method(\"get_velocity\"):");
		p_file->store_line("\t\tplayer_velocity = target.velocity");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate lookahead based on player velocity");
		p_file->store_line("\tvar desired_lookahead = Vector2.ZERO");
		p_file->store_line("\tif abs(player_velocity.x) > 50:  # Only lookahead when moving fast enough");
		p_file->store_line("\t\tdesired_lookahead.x = sign(player_velocity.x) * lookahead_distance");
		p_file->store_line("\t");
		p_file->store_line("\t# Smooth lookahead transition");
		p_file->store_line("\tlookahead_offset = lookahead_offset.lerp(desired_lookahead, lookahead_speed * delta)");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate target position");
		p_file->store_line("\tvar desired_position = target.global_position + lookahead_offset");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply deadzone");
		p_file->store_line("\tvar distance_to_target = desired_position - target_position");
		p_file->store_line("\tif abs(distance_to_target.x) > deadzone_size.x:");
		p_file->store_line("\t\ttarget_position.x = desired_position.x - sign(distance_to_target.x) * deadzone_size.x");
		p_file->store_line("\tif abs(distance_to_target.y) > deadzone_size.y:");
		p_file->store_line("\t\ttarget_position.y = desired_position.y - sign(distance_to_target.y) * deadzone_size.y");
		p_file->store_line("");
		p_file->store_line("func _apply_camera_bounds():");
		p_file->store_line("\tif camera_bounds.size != Vector2.ZERO:");
		p_file->store_line("\t\tvar viewport_size = get_viewport().get_visible_rect().size / zoom");
		p_file->store_line("\t\tvar half_viewport = viewport_size * 0.5");
		p_file->store_line("\t\t");
		p_file->store_line("\t\ttarget_position.x = clamp(target_position.x, ");
		p_file->store_line("\t\t\tcamera_bounds.position.x + half_viewport.x,");
		p_file->store_line("\t\t\tcamera_bounds.position.x + camera_bounds.size.x - half_viewport.x)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\ttarget_position.y = clamp(target_position.y,");
		p_file->store_line("\t\t\tcamera_bounds.position.y + half_viewport.y,");
		p_file->store_line("\t\t\tcamera_bounds.position.y + camera_bounds.size.y - half_viewport.y)");
		p_file->store_line("");
		p_file->store_line("func _update_screen_shake(delta: float):");
		p_file->store_line("\tif shake_duration > 0:");
		p_file->store_line("\t\tshake_duration -= delta");
		p_file->store_line("\t\tif shake_duration <= 0:");
		p_file->store_line("\t\t\tshake_intensity = 0");
		p_file->store_line("");
		p_file->store_line("func _update_camera_position(delta: float):");
		p_file->store_line("\t# Smooth camera movement");
		p_file->store_line("\tglobal_position = global_position.lerp(target_position, follow_speed * delta)");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply screen shake");
		p_file->store_line("\tif shake_intensity > 0:");
		p_file->store_line("\t\tvar shake_offset = Vector2(");
		p_file->store_line("\t\t\trandf_range(-shake_intensity, shake_intensity),");
		p_file->store_line("\t\t\trandf_range(-shake_intensity, shake_intensity)");
		p_file->store_line("\t\t)");
		p_file->store_line("\t\toffset = shake_offset");
		p_file->store_line("\telse:");
		p_file->store_line("\t\toffset = Vector2.ZERO");
		p_file->store_line("");
		p_file->store_line("func _collect_parallax_layers():");
		p_file->store_line("\tparallax_layers.clear()");
		p_file->store_line("\tvar parallax_nodes = get_tree().get_nodes_in_group(\"parallax_layer\")");
		p_file->store_line("\tfor node in parallax_nodes:");
		p_file->store_line("\t\tif node is ParallaxLayer:");
		p_file->store_line("\t\t\tparallax_layers.append(node)");
		p_file->store_line("");
		p_file->store_line("func _update_parallax_layers():");
		p_file->store_line("\tfor layer in parallax_layers:");
		p_file->store_line("\t\tlayer.update_position(global_position)");
		p_file->store_line("");
		p_file->store_line("func shake_camera(intensity: float, duration: float):");
		p_file->store_line("\tif enable_screen_shake:");
		p_file->store_line("\t\tshake_intensity = intensity");
		p_file->store_line("\t\tshake_duration = duration");
		p_file->store_line("");
		p_file->store_line("func set_target(new_target: Node2D):");
		p_file->store_line("\ttarget = new_target");
		p_file->store_line("\tif target:");
		p_file->store_line("\t\ttarget_position = target.global_position");
		p_file->store_line("");
		p_file->store_line("func set_camera_bounds(bounds: Rect2):");
		p_file->store_line("\tcamera_bounds = bounds");
	} else if (filename == "ParallaxLayer.gd") {
		p_file->store_line("# ParallaxLayer.gd");
		p_file->store_line("# Generated by Lupine Engine - Parallax Background Layer");
		p_file->store_line("# Individual parallax layer for background elements");
		p_file->store_line("");
		p_file->store_line("extends Node2D");
		p_file->store_line("class_name ParallaxLayer");
		p_file->store_line("");
		p_file->store_line("# Parallax settings");
		p_file->store_line("@export var parallax_factor: Vector2 = Vector2(0.5, 0.5)");
		p_file->store_line("@export var auto_scroll: Vector2 = Vector2.ZERO");
		p_file->store_line("@export var repeat_texture: bool = false");
		p_file->store_line("@export var texture_size: Vector2 = Vector2.ZERO");
		p_file->store_line("");
		p_file->store_line("# Internal state");
		p_file->store_line("var initial_position: Vector2");
		p_file->store_line("var scroll_offset: Vector2 = Vector2.ZERO");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tadd_to_group(\"parallax_layer\")");
		p_file->store_line("\tinitial_position = global_position");
		p_file->store_line("\t");
		p_file->store_line("\t# Auto-detect texture size if not set");
		p_file->store_line("\tif texture_size == Vector2.ZERO:");
		p_file->store_line("\t\t_auto_detect_texture_size()");
		p_file->store_line("");
		p_file->store_line("func _process(delta):");
		p_file->store_line("\t# Handle auto-scroll");
		p_file->store_line("\tif auto_scroll != Vector2.ZERO:");
		p_file->store_line("\t\tscroll_offset += auto_scroll * delta");
		p_file->store_line("");
		p_file->store_line("func update_position(camera_position: Vector2):");
		p_file->store_line("\t# Calculate parallax offset");
		p_file->store_line("\tvar parallax_offset = camera_position * parallax_factor");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply position with parallax and auto-scroll");
		p_file->store_line("\tglobal_position = initial_position - parallax_offset + scroll_offset");
		p_file->store_line("\t");
		p_file->store_line("\t# Handle texture repeating");
		p_file->store_line("\tif repeat_texture and texture_size != Vector2.ZERO:");
		p_file->store_line("\t\t_handle_texture_repeat(camera_position)");
		p_file->store_line("");
		p_file->store_line("func _handle_texture_repeat(camera_position: Vector2):");
		p_file->store_line("\t# Wrap texture position for infinite scrolling");
		p_file->store_line("\tvar wrapped_x = fmod(global_position.x, texture_size.x)");
		p_file->store_line("\tvar wrapped_y = fmod(global_position.y, texture_size.y)");
		p_file->store_line("\t");
		p_file->store_line("\t# Ensure we have enough tiles visible");
		p_file->store_line("\tvar viewport_size = get_viewport().get_visible_rect().size");
		p_file->store_line("\tvar tiles_needed_x = ceil(viewport_size.x / texture_size.x) + 2");
		p_file->store_line("\tvar tiles_needed_y = ceil(viewport_size.y / texture_size.y) + 2");
		p_file->store_line("\t");
		p_file->store_line("\t# Position tiles to cover the viewport");
		p_file->store_line("\tvar start_x = camera_position.x - viewport_size.x * 0.5 - texture_size.x");
		p_file->store_line("\tvar start_y = camera_position.y - viewport_size.y * 0.5 - texture_size.y");
		p_file->store_line("\t");
		p_file->store_line("\tglobal_position.x = start_x + wrapped_x");
		p_file->store_line("\tglobal_position.y = start_y + wrapped_y");
		p_file->store_line("");
		p_file->store_line("func _auto_detect_texture_size():");
		p_file->store_line("\t# Try to detect texture size from child sprites");
		p_file->store_line("\tfor child in get_children():");
		p_file->store_line("\t\tif child is Sprite2D:");
		p_file->store_line("\t\t\tvar sprite = child as Sprite2D");
		p_file->store_line("\t\t\tif sprite.texture:");
		p_file->store_line("\t\t\t\ttexture_size = sprite.texture.get_size() * sprite.scale");
		p_file->store_line("\t\t\t\tbreak");
		p_file->store_line("");
		p_file->store_line("func set_parallax_factor(factor: Vector2):");
		p_file->store_line("\tparallax_factor = factor");
		p_file->store_line("");
		p_file->store_line("func set_auto_scroll(scroll: Vector2):");
		p_file->store_line("\tauto_scroll = scroll");
	}
}

void ParallaxCameraModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "ParallaxCamera") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://parallax_camera\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/camera/ParallaxCamera.gd\" id=\"1_parallax_camera_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"ParallaxCamera\" type=\"Camera2D\"]");
		p_file->store_line("script = ExtResource(\"1_parallax_camera_script\")");
		p_file->store_line("follow_speed = 5.0");
		p_file->store_line("lookahead_distance = 100.0");
		p_file->store_line("lookahead_speed = 2.0");
		p_file->store_line("deadzone_size = Vector2(50, 30)");
		p_file->store_line("enable_screen_shake = true");
	}
}
