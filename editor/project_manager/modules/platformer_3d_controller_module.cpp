#include "platformer_3d_controller_module.h"

void Platformer3DControllerModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();
	
	if (filename == "Player3D.gd") {
		p_file->store_line("# Player3D.gd");
		p_file->store_line("# Generated by Lupine Engine - 3D Platformer Controller");
		p_file->store_line("# Advanced 3D platformer with Mario 64-style movement");
		p_file->store_line("");
		p_file->store_line("extends CharacterBody3D");
		p_file->store_line("class_name Player3D");
		p_file->store_line("");
		p_file->store_line("# Movement constants");
		p_file->store_line("const SPEED = 5.0");
		p_file->store_line("const SPRINT_SPEED = 8.0");
		p_file->store_line("const JUMP_VELOCITY = 12.0");
		p_file->store_line("const WALL_JUMP_VELOCITY = 10.0");
		p_file->store_line("const LONG_JUMP_VELOCITY = Vector3(8.0, 8.0, 0.0)");
		p_file->store_line("const DIVE_VELOCITY = Vector3(10.0, -2.0, 0.0)");
		p_file->store_line("const GROUND_POUND_VELOCITY = -20.0");
		p_file->store_line("const SWIM_SPEED = 3.0");
		p_file->store_line("const CLIMB_SPEED = 3.0");
		p_file->store_line("");
		p_file->store_line("# Physics constants");
		p_file->store_line("const ACCELERATION = 10.0");
		p_file->store_line("const FRICTION = 15.0");
		p_file->store_line("const AIR_RESISTANCE = 2.0");
		p_file->store_line("const COYOTE_TIME = 0.1");
		p_file->store_line("const JUMP_BUFFER_TIME = 0.1");
		p_file->store_line("");
		p_file->store_line("# Get gravity from project settings");
		p_file->store_line("var gravity = ProjectSettings.get_setting(\"physics/3d/default_gravity\")");
		p_file->store_line("");
		p_file->store_line("# State management");
		p_file->store_line("enum MovementState {");
		p_file->store_line("\tIDLE, WALKING, RUNNING, JUMPING, FALLING, WALL_SLIDING,");
		p_file->store_line("\tLONG_JUMPING, DIVING, GROUND_POUNDING, SWIMMING, CLIMBING,");
		p_file->store_line("\tHANGING, SWINGING, HURT, DEAD");
		p_file->store_line("}");
		p_file->store_line("");
		p_file->store_line("var current_state: MovementState = MovementState.IDLE");
		p_file->store_line("var previous_state: MovementState = MovementState.IDLE");
		p_file->store_line("");
		p_file->store_line("# Movement variables");
		p_file->store_line("var input_vector: Vector3 = Vector3.ZERO");
		p_file->store_line("var move_direction: Vector3 = Vector3.ZERO");
		p_file->store_line("var last_floor_normal: Vector3 = Vector3.UP");
		p_file->store_line("var wall_normal: Vector3 = Vector3.ZERO");
		p_file->store_line("");
		p_file->store_line("# Timers");
		p_file->store_line("var coyote_timer: float = 0.0");
		p_file->store_line("var jump_buffer_timer: float = 0.0");
		p_file->store_line("var ground_pound_timer: float = 0.0");
		p_file->store_line("var dive_timer: float = 0.0");
		p_file->store_line("");
		p_file->store_line("# Special abilities");
		p_file->store_line("var can_wall_jump: bool = false");
		p_file->store_line("var can_triple_jump: bool = false");
		p_file->store_line("var jump_count: int = 0");
		p_file->store_line("var max_jumps: int = 3");
		p_file->store_line("");
		p_file->store_line("# Water and climbing");
		p_file->store_line("var is_in_water: bool = false");
		p_file->store_line("var water_surface_y: float = 0.0");
		p_file->store_line("var is_climbing: bool = false");
		p_file->store_line("var climb_surface: Node3D = null");
		p_file->store_line("");
		p_file->store_line("# Components");
		p_file->store_line("@onready var mesh: MeshInstance3D = $MeshInstance3D");
		p_file->store_line("@onready var collision: CollisionShape3D = $CollisionShape3D");
		p_file->store_line("@onready var camera_pivot: Node3D = $CameraPivot");
		p_file->store_line("@onready var camera: Camera3D = $CameraPivot/Camera3D");
		p_file->store_line("@onready var ground_check: RayCast3D = $GroundCheck");
		p_file->store_line("@onready var wall_check: RayCast3D = $WallCheck");
		p_file->store_line("@onready var water_detector: Area3D = $WaterDetector");
		p_file->store_line("@onready var abilities: PlayerAbilities3D = $PlayerAbilities3D");
		p_file->store_line("@onready var animator: PlayerAnimator3D = $PlayerAnimator3D");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tadd_to_group(\"player\")");
		p_file->store_line("\t_setup_water_detection()");
		p_file->store_line("\t_setup_camera()");
		p_file->store_line("");
		p_file->store_line("func _physics_process(delta):");
		p_file->store_line("\t_update_timers(delta)");
		p_file->store_line("\t_handle_input()");
		p_file->store_line("\t_update_movement_state()");
		p_file->store_line("\t_apply_movement(delta)");
		p_file->store_line("\t_update_camera(delta)");
		p_file->store_line("\tmove_and_slide()");
		p_file->store_line("\t_update_animator()");
		p_file->store_line("");
		p_file->store_line("func _handle_input():");
		p_file->store_line("\t# Get input from camera-relative perspective");
		p_file->store_line("\tvar input_dir = Input.get_vector(\"move_left\", \"move_right\", \"move_forward\", \"move_backward\")");
		p_file->store_line("\tvar camera_transform = camera.global_transform");
		p_file->store_line("\tvar camera_forward = -camera_transform.basis.z");
		p_file->store_line("\tvar camera_right = camera_transform.basis.x");
		p_file->store_line("\t");
		p_file->store_line("\t# Project camera directions onto horizontal plane");
		p_file->store_line("\tcamera_forward.y = 0");
		p_file->store_line("\tcamera_right.y = 0");
		p_file->store_line("\tcamera_forward = camera_forward.normalized()");
		p_file->store_line("\tcamera_right = camera_right.normalized()");
		p_file->store_line("\t");
		p_file->store_line("\tinput_vector = (camera_forward * input_dir.y + camera_right * input_dir.x)");
		p_file->store_line("\t");
		p_file->store_line("\t# Handle jump input");
		p_file->store_line("\tif Input.is_action_just_pressed(\"jump\"):");
		p_file->store_line("\t\tjump_buffer_timer = JUMP_BUFFER_TIME");
		p_file->store_line("\t");
		p_file->store_line("\t# Handle special moves");
		p_file->store_line("\tif Input.is_action_just_pressed(\"dive\") and not is_on_floor():");
		p_file->store_line("\t\t_start_dive()");
		p_file->store_line("\t");
		p_file->store_line("\tif Input.is_action_just_pressed(\"ground_pound\") and not is_on_floor():");
		p_file->store_line("\t\t_start_ground_pound()");
		p_file->store_line("");
		p_file->store_line("func _update_movement_state():");
		p_file->store_line("\tprevious_state = current_state");
		p_file->store_line("\t");
		p_file->store_line("\tmatch current_state:");
		p_file->store_line("\t\tMovementState.IDLE, MovementState.WALKING, MovementState.RUNNING:");
		p_file->store_line("\t\t\tif not is_on_floor():");
		p_file->store_line("\t\t\t\tcurrent_state = MovementState.FALLING");
		p_file->store_line("\t\t\telif input_vector.length() > 0.1:");
		p_file->store_line("\t\t\t\tif Input.is_action_pressed(\"sprint\"):");
		p_file->store_line("\t\t\t\t\tcurrent_state = MovementState.RUNNING");
		p_file->store_line("\t\t\t\telse:");
		p_file->store_line("\t\t\t\t\tcurrent_state = MovementState.WALKING");
		p_file->store_line("\t\t\telse:");
		p_file->store_line("\t\t\t\tcurrent_state = MovementState.IDLE");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tMovementState.JUMPING:");
		p_file->store_line("\t\t\tif velocity.y <= 0:");
		p_file->store_line("\t\t\t\tcurrent_state = MovementState.FALLING");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tMovementState.FALLING:");
		p_file->store_line("\t\t\tif is_on_floor():");
		p_file->store_line("\t\t\t\t_land()");
		p_file->store_line("\t\t\telif _check_wall_slide():");
		p_file->store_line("\t\t\t\tcurrent_state = MovementState.WALL_SLIDING");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tMovementState.WALL_SLIDING:");
		p_file->store_line("\t\t\tif is_on_floor() or not _check_wall_slide():");
		p_file->store_line("\t\t\t\tcurrent_state = MovementState.FALLING");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tMovementState.SWIMMING:");
		p_file->store_line("\t\t\tif not is_in_water:");
		p_file->store_line("\t\t\t\tcurrent_state = MovementState.FALLING");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tMovementState.CLIMBING:");
		p_file->store_line("\t\t\tif not is_climbing:");
		p_file->store_line("\t\t\t\tcurrent_state = MovementState.FALLING");
		p_file->store_line("");
		p_file->store_line("func _apply_movement(delta: float):");
		p_file->store_line("\tmatch current_state:");
		p_file->store_line("\t\tMovementState.IDLE, MovementState.WALKING, MovementState.RUNNING:");
		p_file->store_line("\t\t\t_apply_ground_movement(delta)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tMovementState.JUMPING, MovementState.FALLING:");
		p_file->store_line("\t\t\t_apply_air_movement(delta)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tMovementState.WALL_SLIDING:");
		p_file->store_line("\t\t\t_apply_wall_slide_movement(delta)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tMovementState.SWIMMING:");
		p_file->store_line("\t\t\t_apply_swimming_movement(delta)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tMovementState.CLIMBING:");
		p_file->store_line("\t\t\t_apply_climbing_movement(delta)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tMovementState.DIVING:");
		p_file->store_line("\t\t\t_apply_dive_movement(delta)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tMovementState.GROUND_POUNDING:");
		p_file->store_line("\t\t\t_apply_ground_pound_movement(delta)");
		p_file->store_line("\t");
		p_file->store_line("\t# Handle jump input");
		p_file->store_line("\tif jump_buffer_timer > 0:");
		p_file->store_line("\t\t_try_jump()");
	} else if (filename == "MovementState3D.gd") {
		p_file->store_line("# MovementState3D.gd");
		p_file->store_line("# Generated by Lupine Engine - 3D Movement State Manager");
		p_file->store_line("# Handles complex movement state transitions");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("class_name MovementState3D");
		p_file->store_line("");
		p_file->store_line("# State machine for complex movement");
		p_file->store_line("var player: Player3D");
		p_file->store_line("var current_state_name: String = \"idle\"");
		p_file->store_line("var state_time: float = 0.0");
		p_file->store_line("");
		p_file->store_line("# State data");
		p_file->store_line("var states: Dictionary = {}");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tplayer = get_parent() as Player3D");
		p_file->store_line("\t_setup_states()");
		p_file->store_line("");
		p_file->store_line("func _setup_states():");
		p_file->store_line("\tstates = {");
		p_file->store_line("\t\t\"idle\": {");
		p_file->store_line("\t\t\t\"enter\": _enter_idle,");
		p_file->store_line("\t\t\t\"update\": _update_idle,");
		p_file->store_line("\t\t\t\"exit\": _exit_idle");
		p_file->store_line("\t\t},");
		p_file->store_line("\t\t\"walking\": {");
		p_file->store_line("\t\t\t\"enter\": _enter_walking,");
		p_file->store_line("\t\t\t\"update\": _update_walking,");
		p_file->store_line("\t\t\t\"exit\": _exit_walking");
		p_file->store_line("\t\t},");
		p_file->store_line("\t\t\"running\": {");
		p_file->store_line("\t\t\t\"enter\": _enter_running,");
		p_file->store_line("\t\t\t\"update\": _update_running,");
		p_file->store_line("\t\t\t\"exit\": _exit_running");
		p_file->store_line("\t\t}");
		p_file->store_line("\t}");
		p_file->store_line("");
		p_file->store_line("func change_state(new_state: String):");
		p_file->store_line("\tif states.has(current_state_name) and states[current_state_name].has(\"exit\"):");
		p_file->store_line("\t\tstates[current_state_name].exit.call()");
		p_file->store_line("\t");
		p_file->store_line("\tcurrent_state_name = new_state");
		p_file->store_line("\tstate_time = 0.0");
		p_file->store_line("\t");
		p_file->store_line("\tif states.has(current_state_name) and states[current_state_name].has(\"enter\"):");
		p_file->store_line("\t\tstates[current_state_name].enter.call()");
		p_file->store_line("");
		p_file->store_line("func update_state(delta: float):");
		p_file->store_line("\tstate_time += delta");
		p_file->store_line("\t");
		p_file->store_line("\tif states.has(current_state_name) and states[current_state_name].has(\"update\"):");
		p_file->store_line("\t\tstates[current_state_name].update.call(delta)");
		p_file->store_line("");
		p_file->store_line("# State implementations");
		p_file->store_line("func _enter_idle():");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("func _update_idle(delta: float):");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("func _exit_idle():");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("func _enter_walking():");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("func _update_walking(delta: float):");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("func _exit_walking():");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("func _enter_running():");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("func _update_running(delta: float):");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("func _exit_running():");
		p_file->store_line("\tpass");
	}
}

void Platformer3DControllerModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "Player3D") {
		p_file->store_line("[gd_scene load_steps=6 format=3 uid=\"uid://player_3d\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/player/Player3D.gd\" id=\"1_player_script\"]");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/player/PlayerAbilities3D.gd\" id=\"2_abilities_script\"]");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/player/PlayerAnimator3D.gd\" id=\"3_animator_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CapsuleShape3D\" id=\"CapsuleShape3D_1\"]");
		p_file->store_line("radius = 0.5");
		p_file->store_line("height = 2.0");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CapsuleMesh\" id=\"CapsuleMesh_1\"]");
		p_file->store_line("radius = 0.5");
		p_file->store_line("height = 2.0");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"SphereShape3D\" id=\"SphereShape3D_1\"]");
		p_file->store_line("radius = 0.6");
		p_file->store_line("");
		p_file->store_line("[node name=\"Player3D\" type=\"CharacterBody3D\"]");
		p_file->store_line("script = ExtResource(\"1_player_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"MeshInstance3D\" type=\"MeshInstance3D\" parent=\".\"]");
		p_file->store_line("mesh = SubResource(\"CapsuleMesh_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape3D\" type=\"CollisionShape3D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"CapsuleShape3D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"CameraPivot\" type=\"Node3D\" parent=\".\"]");
		p_file->store_line("transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.5, 0)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Camera3D\" type=\"Camera3D\" parent=\"CameraPivot\"]");
		p_file->store_line("transform = Transform3D(1, 0, 0, 0, 0.866025, 0.5, 0, -0.5, 0.866025, 0, 2, 5)");
		p_file->store_line("");
		p_file->store_line("[node name=\"GroundCheck\" type=\"RayCast3D\" parent=\".\"]");
		p_file->store_line("target_position = Vector3(0, -1.1, 0)");
		p_file->store_line("");
		p_file->store_line("[node name=\"WallCheck\" type=\"RayCast3D\" parent=\".\"]");
		p_file->store_line("target_position = Vector3(0, 0, -0.6)");
		p_file->store_line("");
		p_file->store_line("[node name=\"WaterDetector\" type=\"Area3D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"WaterShape\" type=\"CollisionShape3D\" parent=\"WaterDetector\"]");
		p_file->store_line("shape = SubResource(\"SphereShape3D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"PlayerAbilities3D\" type=\"Node\" parent=\".\"]");
		p_file->store_line("script = ExtResource(\"2_abilities_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"PlayerAnimator3D\" type=\"Node\" parent=\".\"]");
		p_file->store_line("script = ExtResource(\"3_animator_script\")");
	}
}
