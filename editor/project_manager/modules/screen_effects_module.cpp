#include "screen_effects_module.h"

void ScreenEffectsModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();
	
	if (filename == "ScreenEffects.gd") {
		p_file->store_line("# ScreenEffects.gd");
		p_file->store_line("# Generated by Lupine Engine - Screen Effects Manager");
		p_file->store_line("# System for managing screen-wide visual effects");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Screen overlay");
		p_file->store_line("var screen_overlay: Control = null");
		p_file->store_line("");
		p_file->store_line("# Effect settings");
		p_file->store_line("var damage_flash_color: Color = Color.RED");
		p_file->store_line("var damage_flash_duration: float = 0.2");
		p_file->store_line("var fade_duration: float = 1.0");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t_setup_screen_overlay()");
		p_file->store_line("");
		p_file->store_line("func _setup_screen_overlay():");
		p_file->store_line("\t# Create screen overlay");
		p_file->store_line("\tvar overlay_scene = preload(\"res://scenes/effects/ScreenOverlay.tscn\")");
		p_file->store_line("\tscreen_overlay = overlay_scene.instantiate()");
		p_file->store_line("\tget_tree().current_scene.add_child(screen_overlay)");
		p_file->store_line("");
		p_file->store_line("func damage_flash(intensity: float = 1.0, duration: float = -1.0):");
		p_file->store_line("\tif not screen_overlay:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tvar flash_duration = duration if duration > 0 else damage_flash_duration");
		p_file->store_line("\tvar flash_color = damage_flash_color");
		p_file->store_line("\tflash_color.a = intensity * 0.3");
		p_file->store_line("\t");
		p_file->store_line("\tif screen_overlay.has_method(\"flash_effect\"):");
		p_file->store_line("\t\tscreen_overlay.flash_effect(flash_color, flash_duration)");
		p_file->store_line("");
		p_file->store_line("func fade_to_black(duration: float = -1.0) -> Signal:");
		p_file->store_line("\tif not screen_overlay:");
		p_file->store_line("\t\treturn Signal()");
		p_file->store_line("\t");
		p_file->store_line("\tvar fade_time = duration if duration > 0 else fade_duration");
		p_file->store_line("\t");
		p_file->store_line("\tif screen_overlay.has_method(\"fade_to_color\"):");
		p_file->store_line("\t\treturn screen_overlay.fade_to_color(Color.BLACK, fade_time)");
		p_file->store_line("\t");
		p_file->store_line("\treturn Signal()");
		p_file->store_line("");
		p_file->store_line("func fade_from_black(duration: float = -1.0) -> Signal:");
		p_file->store_line("\tif not screen_overlay:");
		p_file->store_line("\t\treturn Signal()");
		p_file->store_line("\t");
		p_file->store_line("\tvar fade_time = duration if duration > 0 else fade_duration");
		p_file->store_line("\t");
		p_file->store_line("\tif screen_overlay.has_method(\"fade_from_color\"):");
		p_file->store_line("\t\treturn screen_overlay.fade_from_color(Color.BLACK, fade_time)");
		p_file->store_line("\t");
		p_file->store_line("\treturn Signal()");
		p_file->store_line("");
		p_file->store_line("func fade_to_white(duration: float = -1.0) -> Signal:");
		p_file->store_line("\tif not screen_overlay:");
		p_file->store_line("\t\treturn Signal()");
		p_file->store_line("\t");
		p_file->store_line("\tvar fade_time = duration if duration > 0 else fade_duration");
		p_file->store_line("\t");
		p_file->store_line("\tif screen_overlay.has_method(\"fade_to_color\"):");
		p_file->store_line("\t\treturn screen_overlay.fade_to_color(Color.WHITE, fade_time)");
		p_file->store_line("\t");
		p_file->store_line("\treturn Signal()");
		p_file->store_line("");
		p_file->store_line("func fade_from_white(duration: float = -1.0) -> Signal:");
		p_file->store_line("\tif not screen_overlay:");
		p_file->store_line("\t\treturn Signal()");
		p_file->store_line("\t");
		p_file->store_line("\tvar fade_time = duration if duration > 0 else fade_duration");
		p_file->store_line("\t");
		p_file->store_line("\tif screen_overlay.has_method(\"fade_from_color\"):");
		p_file->store_line("\t\treturn screen_overlay.fade_from_color(Color.WHITE, fade_time)");
		p_file->store_line("\t");
		p_file->store_line("\treturn Signal()");
		p_file->store_line("");
		p_file->store_line("func enable_crt_filter(enable: bool = true):");
		p_file->store_line("\tif screen_overlay and screen_overlay.has_method(\"set_crt_filter\"):");
		p_file->store_line("\t\tscreen_overlay.set_crt_filter(enable)");
		p_file->store_line("");
		p_file->store_line("func screen_shake(intensity: float, duration: float):");
		p_file->store_line("\t# Get camera and shake it");
		p_file->store_line("\tvar camera = get_tree().get_first_node_in_group(\"camera\")");
		p_file->store_line("\tif camera and camera.has_method(\"shake_camera\"):");
		p_file->store_line("\t\tcamera.shake_camera(intensity, duration)");
		p_file->store_line("");
		p_file->store_line("func vignette_effect(intensity: float, duration: float = 1.0):");
		p_file->store_line("\tif screen_overlay and screen_overlay.has_method(\"vignette_effect\"):");
		p_file->store_line("\t\tscreen_overlay.vignette_effect(intensity, duration)");
		p_file->store_line("");
		p_file->store_line("func chromatic_aberration(intensity: float, duration: float = 1.0):");
		p_file->store_line("\tif screen_overlay and screen_overlay.has_method(\"chromatic_aberration\"):");
		p_file->store_line("\t\tscreen_overlay.chromatic_aberration(intensity, duration)");
	} else if (filename == "ScreenOverlay.gd") {
		p_file->store_line("# ScreenOverlay.gd");
		p_file->store_line("# Generated by Lupine Engine - Screen Overlay");
		p_file->store_line("# Handles screen-wide visual effects and overlays");
		p_file->store_line("");
		p_file->store_line("extends Control");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal fade_completed()");
		p_file->store_line("");
		p_file->store_line("# Components");
		p_file->store_line("@onready var color_overlay: ColorRect = $ColorOverlay");
		p_file->store_line("@onready var flash_overlay: ColorRect = $FlashOverlay");
		p_file->store_line("@onready var vignette_overlay: ColorRect = $VignetteOverlay");
		p_file->store_line("");
		p_file->store_line("# CRT filter shader");
		p_file->store_line("var crt_shader: Shader");
		p_file->store_line("var crt_material: ShaderMaterial");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Setup initial state");
		p_file->store_line("\tcolor_overlay.color = Color.TRANSPARENT");
		p_file->store_line("\tflash_overlay.color = Color.TRANSPARENT");
		p_file->store_line("\tvignette_overlay.color = Color.TRANSPARENT");
		p_file->store_line("\t");
		p_file->store_line("\t# Load CRT shader");
		p_file->store_line("\t_setup_crt_shader()");
		p_file->store_line("");
		p_file->store_line("func flash_effect(color: Color, duration: float):");
		p_file->store_line("\tflash_overlay.color = color");
		p_file->store_line("\t");
		p_file->store_line("\tvar tween = create_tween()");
		p_file->store_line("\ttween.tween_property(flash_overlay, \"color:a\", 0.0, duration)");
		p_file->store_line("");
		p_file->store_line("func fade_to_color(color: Color, duration: float) -> Signal:");
		p_file->store_line("\tcolor_overlay.color = Color(color.r, color.g, color.b, 0.0)");
		p_file->store_line("\t");
		p_file->store_line("\tvar tween = create_tween()");
		p_file->store_line("\ttween.tween_property(color_overlay, \"color:a\", color.a if color.a > 0 else 1.0, duration)");
		p_file->store_line("\ttween.tween_callback(fade_completed.emit)");
		p_file->store_line("\t");
		p_file->store_line("\treturn fade_completed");
		p_file->store_line("");
		p_file->store_line("func fade_from_color(color: Color, duration: float) -> Signal:");
		p_file->store_line("\tcolor_overlay.color = color");
		p_file->store_line("\t");
		p_file->store_line("\tvar tween = create_tween()");
		p_file->store_line("\ttween.tween_property(color_overlay, \"color:a\", 0.0, duration)");
		p_file->store_line("\ttween.tween_callback(fade_completed.emit)");
		p_file->store_line("\t");
		p_file->store_line("\treturn fade_completed");
		p_file->store_line("");
		p_file->store_line("func vignette_effect(intensity: float, duration: float):");
		p_file->store_line("\tvar vignette_color = Color.BLACK");
		p_file->store_line("\tvignette_color.a = intensity");
		p_file->store_line("\t");
		p_file->store_line("\tvar tween = create_tween()");
		p_file->store_line("\ttween.tween_property(vignette_overlay, \"color\", vignette_color, duration * 0.5)");
		p_file->store_line("\ttween.tween_property(vignette_overlay, \"color\", Color.TRANSPARENT, duration * 0.5)");
		p_file->store_line("");
		p_file->store_line("func set_crt_filter(enable: bool):");
		p_file->store_line("\tif enable and crt_material:");
		p_file->store_line("\t\tmaterial = crt_material");
		p_file->store_line("\telse:");
		p_file->store_line("\t\tmaterial = null");
		p_file->store_line("");
		p_file->store_line("func _setup_crt_shader():");
		p_file->store_line("\t# Create a simple CRT shader");
		p_file->store_line("\tcrt_shader = Shader.new()");
		p_file->store_line("\tcrt_shader.code = \"\"\"");
		p_file->store_line("shader_type canvas_item;");
		p_file->store_line("");
		p_file->store_line("uniform float scanline_intensity : hint_range(0.0, 1.0) = 0.1;");
		p_file->store_line("uniform float curvature : hint_range(0.0, 0.1) = 0.02;");
		p_file->store_line("");
		p_file->store_line("void fragment() {");
		p_file->store_line("\tvec2 uv = SCREEN_UV;");
		p_file->store_line("\t");
		p_file->store_line("\t// Apply curvature");
		p_file->store_line("\tuv = uv * 2.0 - 1.0;");
		p_file->store_line("\tuv *= 1.0 + curvature * length(uv);");
		p_file->store_line("\tuv = uv * 0.5 + 0.5;");
		p_file->store_line("\t");
		p_file->store_line("\t// Sample texture");
		p_file->store_line("\tvec4 color = texture(SCREEN_TEXTURE, uv);");
		p_file->store_line("\t");
		p_file->store_line("\t// Add scanlines");
		p_file->store_line("\tfloat scanline = sin(uv.y * 800.0) * scanline_intensity;");
		p_file->store_line("\tcolor.rgb -= scanline;");
		p_file->store_line("\t");
		p_file->store_line("\tCOLOR = color;");
		p_file->store_line("}");
		p_file->store_line("\"\"\";");
		p_file->store_line("\t");
		p_file->store_line("\tcrt_material = ShaderMaterial.new()");
		p_file->store_line("\tcrt_material.shader = crt_shader");
	}
}

void ScreenEffectsModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "ScreenOverlay") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://screen_overlay\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/effects/ScreenOverlay.gd\" id=\"1_overlay_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"ScreenOverlay\" type=\"Control\"]");
		p_file->store_line("layout_mode = 3");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("mouse_filter = 2");
		p_file->store_line("script = ExtResource(\"1_overlay_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"ColorOverlay\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("mouse_filter = 2");
		p_file->store_line("color = Color(0, 0, 0, 0)");
		p_file->store_line("");
		p_file->store_line("[node name=\"FlashOverlay\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("mouse_filter = 2");
		p_file->store_line("color = Color(1, 0, 0, 0)");
		p_file->store_line("");
		p_file->store_line("[node name=\"VignetteOverlay\" type=\"ColorRect\" parent=\".\"]");
		p_file->store_line("layout_mode = 1");
		p_file->store_line("anchors_preset = 15");
		p_file->store_line("anchor_right = 1.0");
		p_file->store_line("anchor_bottom = 1.0");
		p_file->store_line("mouse_filter = 2");
		p_file->store_line("color = Color(0, 0, 0, 0)");
	}
}
