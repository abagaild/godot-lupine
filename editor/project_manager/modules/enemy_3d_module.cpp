#include "enemy_3d_module.h"

void Enemy3DModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();
	
	if (filename == "Enemy3D.gd") {
		p_file->store_line("# Enemy3D.gd");
		p_file->store_line("# Generated by Lupine Engine - 3D Enemy Base Class");
		p_file->store_line("# Base class for all 3D enemies");
		p_file->store_line("");
		p_file->store_line("extends CharacterBody3D");
		p_file->store_line("class_name Enemy3D");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal enemy_died(enemy: Enemy3D)");
		p_file->store_line("signal player_detected(player: Node3D)");
		p_file->store_line("signal player_lost()");
		p_file->store_line("signal attack_performed()");
		p_file->store_line("");
		p_file->store_line("# Enemy properties");
		p_file->store_line("@export var enemy_name: String = \"Enemy\"");
		p_file->store_line("@export var max_health: float = 100.0");
		p_file->store_line("@export var move_speed: float = 3.0");
		p_file->store_line("@export var attack_damage: float = 25.0");
		p_file->store_line("@export var detection_range: float = 10.0");
		p_file->store_line("@export var attack_range: float = 2.0");
		p_file->store_line("@export var patrol_range: float = 5.0");
		p_file->store_line("");
		p_file->store_line("# Behavior settings");
		p_file->store_line("@export var can_jump: bool = false");
		p_file->store_line("@export var can_fly: bool = false");
		p_file->store_line("@export var is_aggressive: bool = true");
		p_file->store_line("@export var respawn_time: float = 0.0  # 0 = no respawn");
		p_file->store_line("");
		p_file->store_line("# State management");
		p_file->store_line("enum EnemyState { IDLE, PATROL, CHASE, ATTACK, HURT, DEAD, STUNNED }");
		p_file->store_line("var current_state: EnemyState = EnemyState.IDLE");
		p_file->store_line("var previous_state: EnemyState = EnemyState.IDLE");
		p_file->store_line("");
		p_file->store_line("# Current stats");
		p_file->store_line("var current_health: float");
		p_file->store_line("var is_alive: bool = true");
		p_file->store_line("var is_stunned: bool = false");
		p_file->store_line("");
		p_file->store_line("# AI and movement");
		p_file->store_line("var target_player: Node3D = null");
		p_file->store_line("var initial_position: Vector3");
		p_file->store_line("var patrol_target: Vector3");
		p_file->store_line("var last_known_player_position: Vector3");
		p_file->store_line("");
		p_file->store_line("# Timers");
		p_file->store_line("var attack_cooldown: float = 1.0");
		p_file->store_line("var attack_timer: float = 0.0");
		p_file->store_line("var stun_timer: float = 0.0");
		p_file->store_line("var hurt_timer: float = 0.0");
		p_file->store_line("");
		p_file->store_line("# Physics");
		p_file->store_line("var gravity = ProjectSettings.get_setting(\"physics/3d/default_gravity\")");
		p_file->store_line("");
		p_file->store_line("# Components");
		p_file->store_line("@onready var mesh: MeshInstance3D = $MeshInstance3D");
		p_file->store_line("@onready var collision: CollisionShape3D = $CollisionShape3D");
		p_file->store_line("@onready var detection_area: Area3D = $DetectionArea");
		p_file->store_line("@onready var attack_area: Area3D = $AttackArea");
		p_file->store_line("@onready var ai_controller: EnemyAI3D = $EnemyAI3D");
		p_file->store_line("@onready var health_bar: ProgressBar = $HealthBar");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tcurrent_health = max_health");
		p_file->store_line("\tinitial_position = global_position");
		p_file->store_line("\tpatrol_target = global_position");
		p_file->store_line("\t");
		p_file->store_line("\t# Setup detection area");
		p_file->store_line("\tif detection_area:");
		p_file->store_line("\t\tdetection_area.body_entered.connect(_on_player_detected)");
		p_file->store_line("\t\tdetection_area.body_exited.connect(_on_player_lost)");
		p_file->store_line("\t\t_setup_detection_area()");
		p_file->store_line("\t");
		p_file->store_line("\t# Setup attack area");
		p_file->store_line("\tif attack_area:");
		p_file->store_line("\t\tattack_area.body_entered.connect(_on_attack_range_entered)");
		p_file->store_line("\t\tattack_area.body_exited.connect(_on_attack_range_exited)");
		p_file->store_line("\t\t_setup_attack_area()");
		p_file->store_line("\t");
		p_file->store_line("\t# Setup health bar");
		p_file->store_line("\tif health_bar:");
		p_file->store_line("\t\thealth_bar.max_value = max_health");
		p_file->store_line("\t\thealth_bar.value = current_health");
		p_file->store_line("\t");
		p_file->store_line("\tadd_to_group(\"enemies\")");
		p_file->store_line("");
		p_file->store_line("func _physics_process(delta):");
		p_file->store_line("\tif not is_alive:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t_update_timers(delta)");
		p_file->store_line("\t_update_state_machine(delta)");
		p_file->store_line("\t_apply_movement(delta)");
		p_file->store_line("\tmove_and_slide()");
		p_file->store_line("");
		p_file->store_line("func _update_timers(delta: float):");
		p_file->store_line("\tattack_timer -= delta");
		p_file->store_line("\tstun_timer -= delta");
		p_file->store_line("\thurt_timer -= delta");
		p_file->store_line("\t");
		p_file->store_line("\tif stun_timer <= 0 and is_stunned:");
		p_file->store_line("\t\tis_stunned = false");
		p_file->store_line("\t\tchange_state(EnemyState.IDLE)");
		p_file->store_line("");
		p_file->store_line("func _update_state_machine(delta: float):");
		p_file->store_line("\tif is_stunned:");
		p_file->store_line("\t\tcurrent_state = EnemyState.STUNNED");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tmatch current_state:");
		p_file->store_line("\t\tEnemyState.IDLE:");
		p_file->store_line("\t\t\t_update_idle_state(delta)");
		p_file->store_line("\t\tEnemyState.PATROL:");
		p_file->store_line("\t\t\t_update_patrol_state(delta)");
		p_file->store_line("\t\tEnemyState.CHASE:");
		p_file->store_line("\t\t\t_update_chase_state(delta)");
		p_file->store_line("\t\tEnemyState.ATTACK:");
		p_file->store_line("\t\t\t_update_attack_state(delta)");
		p_file->store_line("\t\tEnemyState.HURT:");
		p_file->store_line("\t\t\t_update_hurt_state(delta)");
		p_file->store_line("");
		p_file->store_line("func _apply_movement(delta: float):");
		p_file->store_line("\t# Apply gravity");
		p_file->store_line("\tif not is_on_floor() and not can_fly:");
		p_file->store_line("\t\tvelocity.y -= gravity * delta");
		p_file->store_line("");
		p_file->store_line("func take_damage(damage: float, knockback: Vector3 = Vector3.ZERO):");
		p_file->store_line("\tif not is_alive:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tcurrent_health -= damage");
		p_file->store_line("\t");
		p_file->store_line("\t# Update health bar");
		p_file->store_line("\tif health_bar:");
		p_file->store_line("\t\thealth_bar.value = current_health");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply knockback");
		p_file->store_line("\tif knockback != Vector3.ZERO:");
		p_file->store_line("\t\tvelocity += knockback");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if dead");
		p_file->store_line("\tif current_health <= 0:");
		p_file->store_line("\t\tdie()");
		p_file->store_line("\telse:");
		p_file->store_line("\t\t# Enter hurt state");
		p_file->store_line("\t\tchange_state(EnemyState.HURT)");
		p_file->store_line("\t\thurt_timer = 0.5");
		p_file->store_line("");
		p_file->store_line("func die():");
		p_file->store_line("\tif not is_alive:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tis_alive = false");
		p_file->store_line("\tcurrent_state = EnemyState.DEAD");
		p_file->store_line("\t");
		p_file->store_line("\t# Disable collision");
		p_file->store_line("\tcollision_layer = 0");
		p_file->store_line("\tcollision_mask = 0");
		p_file->store_line("\t");
		p_file->store_line("\t# Drop loot");
		p_file->store_line("\t_drop_loot()");
		p_file->store_line("\t");
		p_file->store_line("\t# Emit death signal");
		p_file->store_line("\tenemy_died.emit(self)");
		p_file->store_line("\t");
		p_file->store_line("\t# Handle respawn or removal");
		p_file->store_line("\tif respawn_time > 0:");
		p_file->store_line("\t\tget_tree().create_timer(respawn_time).timeout.connect(_respawn)");
		p_file->store_line("\telse:");
		p_file->store_line("\t\tget_tree().create_timer(2.0).timeout.connect(queue_free)");
		p_file->store_line("");
		p_file->store_line("func stun(duration: float):");
		p_file->store_line("\tis_stunned = true");
		p_file->store_line("\tstun_timer = duration");
		p_file->store_line("\tchange_state(EnemyState.STUNNED)");
		p_file->store_line("");
		p_file->store_line("func change_state(new_state: EnemyState):");
		p_file->store_line("\tprevious_state = current_state");
		p_file->store_line("\tcurrent_state = new_state");
		p_file->store_line("\t_on_state_changed(previous_state, current_state)");
		p_file->store_line("");
		p_file->store_line("func _update_idle_state(delta: float):");
		p_file->store_line("\t# Look for player or start patrolling");
		p_file->store_line("\tif target_player and is_aggressive:");
		p_file->store_line("\t\tchange_state(EnemyState.CHASE)");
		p_file->store_line("\telif patrol_range > 0:");
		p_file->store_line("\t\tchange_state(EnemyState.PATROL)");
		p_file->store_line("");
		p_file->store_line("func _update_patrol_state(delta: float):");
		p_file->store_line("\t# Move towards patrol target");
		p_file->store_line("\tvar distance_to_target = global_position.distance_to(patrol_target)");
		p_file->store_line("\t");
		p_file->store_line("\tif distance_to_target < 1.0:");
		p_file->store_line("\t\t# Choose new patrol target");
		p_file->store_line("\t\t_choose_new_patrol_target()");
		p_file->store_line("\t");
		p_file->store_line("\t# Move towards target");
		p_file->store_line("\tvar direction = (patrol_target - global_position).normalized()");
		p_file->store_line("\tvelocity.x = direction.x * move_speed");
		p_file->store_line("\tvelocity.z = direction.z * move_speed");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for player");
		p_file->store_line("\tif target_player and is_aggressive:");
		p_file->store_line("\t\tchange_state(EnemyState.CHASE)");
		p_file->store_line("");
		p_file->store_line("func _update_chase_state(delta: float):");
		p_file->store_line("\tif not target_player:");
		p_file->store_line("\t\tchange_state(EnemyState.IDLE)");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Move towards player");
		p_file->store_line("\tvar direction = (target_player.global_position - global_position).normalized()");
		p_file->store_line("\tvelocity.x = direction.x * move_speed * 1.5  # Chase faster");
		p_file->store_line("\tvelocity.z = direction.z * move_speed * 1.5");
		p_file->store_line("\t");
		p_file->store_line("\t# Check attack range");
		p_file->store_line("\tvar distance_to_player = global_position.distance_to(target_player.global_position)");
		p_file->store_line("\tif distance_to_player <= attack_range:");
		p_file->store_line("\t\tchange_state(EnemyState.ATTACK)");
		p_file->store_line("");
		p_file->store_line("func _update_attack_state(delta: float):");
		p_file->store_line("\tif attack_timer <= 0:");
		p_file->store_line("\t\t_perform_attack()");
		p_file->store_line("\t\tattack_timer = attack_cooldown");
		p_file->store_line("\t\tchange_state(EnemyState.CHASE)");
		p_file->store_line("");
		p_file->store_line("func _update_hurt_state(delta: float):");
		p_file->store_line("\tif hurt_timer <= 0:");
		p_file->store_line("\t\tchange_state(EnemyState.CHASE if target_player else EnemyState.IDLE)");
		p_file->store_line("");
		p_file->store_line("# Override these in derived classes");
		p_file->store_line("func _perform_attack():");
		p_file->store_line("\tattack_performed.emit()");
		p_file->store_line("");
		p_file->store_line("func _drop_loot():");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("func _on_state_changed(old_state: EnemyState, new_state: EnemyState):");
		p_file->store_line("\tpass");
	} else if (filename == "Goomba3D.gd") {
		p_file->store_line("# Goomba3D.gd");
		p_file->store_line("# Generated by Lupine Engine - 3D Goomba Enemy");
		p_file->store_line("# Simple walking enemy that can be jumped on");
		p_file->store_line("");
		p_file->store_line("extends Enemy3D");
		p_file->store_line("");
		p_file->store_line("# Goomba-specific properties");
		p_file->store_line("@export var can_be_stomped: bool = true");
		p_file->store_line("@export var stomp_damage: float = 50.0");
		p_file->store_line("@export var walk_direction: Vector3 = Vector3.RIGHT");
		p_file->store_line("");
		p_file->store_line("# Components");
		p_file->store_line("@onready var stomp_detector: Area3D = $StompDetector");
		p_file->store_line("@onready var wall_detector: RayCast3D = $WallDetector");
		p_file->store_line("@onready var edge_detector: RayCast3D = $EdgeDetector");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tsuper._ready()");
		p_file->store_line("\t");
		p_file->store_line("\t# Goomba-specific setup");
		p_file->store_line("\tenemy_name = \"Goomba\"");
		p_file->store_line("\tmax_health = 25.0");
		p_file->store_line("\tcurrent_health = max_health");
		p_file->store_line("\tmove_speed = 2.0");
		p_file->store_line("\tattack_damage = 15.0");
		p_file->store_line("\t");
		p_file->store_line("\t# Setup stomp detection");
		p_file->store_line("\tif stomp_detector:");
		p_file->store_line("\t\tstomp_detector.body_entered.connect(_on_stomped)");
		p_file->store_line("\t");
		p_file->store_line("\t# Start walking");
		p_file->store_line("\tchange_state(EnemyState.PATROL)");
		p_file->store_line("");
		p_file->store_line("func _physics_process(delta):");
		p_file->store_line("\tsuper._physics_process(delta)");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for walls and edges while patrolling");
		p_file->store_line("\tif current_state == EnemyState.PATROL:");
		p_file->store_line("\t\t_check_obstacles()");
		p_file->store_line("");
		p_file->store_line("func _update_patrol_state(delta: float):");
		p_file->store_line("\t# Simple back-and-forth movement");
		p_file->store_line("\tvelocity.x = walk_direction.x * move_speed");
		p_file->store_line("\tvelocity.z = walk_direction.z * move_speed");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for player");
		p_file->store_line("\tif target_player and is_aggressive:");
		p_file->store_line("\t\tchange_state(EnemyState.CHASE)");
		p_file->store_line("");
		p_file->store_line("func _check_obstacles():");
		p_file->store_line("\t# Check for walls");
		p_file->store_line("\tif wall_detector and wall_detector.is_colliding():");
		p_file->store_line("\t\t_turn_around()");
		p_file->store_line("\t");
		p_file->store_line("\t# Check for edges");
		p_file->store_line("\tif edge_detector and not edge_detector.is_colliding():");
		p_file->store_line("\t\t_turn_around()");
		p_file->store_line("");
		p_file->store_line("func _turn_around():");
		p_file->store_line("\twalk_direction = -walk_direction");
		p_file->store_line("\t");
		p_file->store_line("\t# Update detector directions");
		p_file->store_line("\tif wall_detector:");
		p_file->store_line("\t\twall_detector.target_position = walk_direction * 1.5");
		p_file->store_line("\t");
		p_file->store_line("\tif edge_detector:");
		p_file->store_line("\t\tedge_detector.position = Vector3(walk_direction.x * 0.5, -0.5, walk_direction.z * 0.5)");
		p_file->store_line("");
		p_file->store_line("func _on_stomped(body: Node3D):");
		p_file->store_line("\tif not can_be_stomped or not is_alive:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tif body.is_in_group(\"player\"):");
		p_file->store_line("\t\t# Check if player is above");
		p_file->store_line("\t\tif body.global_position.y > global_position.y + 0.5:");
		p_file->store_line("\t\t\t# Player stomped on Goomba");
		p_file->store_line("\t\t\ttake_damage(stomp_damage)");
		p_file->store_line("\t\t\t");
		p_file->store_line("\t\t\t# Give player a bounce");
		p_file->store_line("\t\t\tif body.has_method(\"apply_bounce\"):");
		p_file->store_line("\t\t\t\tbody.apply_bounce(Vector3(0, 8, 0))");
		p_file->store_line("");
		p_file->store_line("func _perform_attack():");
		p_file->store_line("\tsuper._perform_attack()");
		p_file->store_line("\t");
		p_file->store_line("\t# Simple contact damage");
		p_file->store_line("\tif target_player and target_player.has_method(\"take_damage\"):");
		p_file->store_line("\t\ttarget_player.take_damage(attack_damage)");
		p_file->store_line("");
		p_file->store_line("func _drop_loot():");
		p_file->store_line("\t# Drop coins or items");
		p_file->store_line("\tif InventorySystem:");
		p_file->store_line("\t\tInventorySystem.add_item(\"coin\", randi_range(1, 3))");
	}
}

void Enemy3DModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "Goomba3D") {
		p_file->store_line("[gd_scene load_steps=7 format=3 uid=\"uid://goomba_3d\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/enemies/Goomba3D.gd\" id=\"1_goomba_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CapsuleShape3D\" id=\"CapsuleShape3D_1\"]");
		p_file->store_line("radius = 0.5");
		p_file->store_line("height = 1.0");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CapsuleMesh\" id=\"CapsuleMesh_1\"]");
		p_file->store_line("radius = 0.5");
		p_file->store_line("height = 1.0");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"SphereShape3D\" id=\"SphereShape3D_1\"]");
		p_file->store_line("radius = 5.0");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"BoxShape3D\" id=\"BoxShape3D_1\"]");
		p_file->store_line("size = Vector3(1.5, 1.5, 1.5)");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"BoxShape3D\" id=\"BoxShape3D_2\"]");
		p_file->store_line("size = Vector3(1, 0.5, 1)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Goomba3D\" type=\"CharacterBody3D\"]");
		p_file->store_line("script = ExtResource(\"1_goomba_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"MeshInstance3D\" type=\"MeshInstance3D\" parent=\".\"]");
		p_file->store_line("mesh = SubResource(\"CapsuleMesh_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape3D\" type=\"CollisionShape3D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"CapsuleShape3D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"DetectionArea\" type=\"Area3D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"DetectionShape\" type=\"CollisionShape3D\" parent=\"DetectionArea\"]");
		p_file->store_line("shape = SubResource(\"SphereShape3D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"AttackArea\" type=\"Area3D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"AttackShape\" type=\"CollisionShape3D\" parent=\"AttackArea\"]");
		p_file->store_line("shape = SubResource(\"BoxShape3D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"StompDetector\" type=\"Area3D\" parent=\".\"]");
		p_file->store_line("transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)");
		p_file->store_line("");
		p_file->store_line("[node name=\"StompShape\" type=\"CollisionShape3D\" parent=\"StompDetector\"]");
		p_file->store_line("shape = SubResource(\"BoxShape3D_2\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"WallDetector\" type=\"RayCast3D\" parent=\".\"]");
		p_file->store_line("target_position = Vector3(1.5, 0, 0)");
		p_file->store_line("");
		p_file->store_line("[node name=\"EdgeDetector\" type=\"RayCast3D\" parent=\".\"]");
		p_file->store_line("position = Vector3(0.5, -0.5, 0)");
		p_file->store_line("target_position = Vector3(0, -1, 0)");
		p_file->store_line("");
		p_file->store_line("[node name=\"HealthBar\" type=\"ProgressBar\" parent=\".\"]");
		p_file->store_line("offset_left = -25.0");
		p_file->store_line("offset_top = -80.0");
		p_file->store_line("offset_right = 25.0");
		p_file->store_line("offset_bottom = -60.0");
	}
}
