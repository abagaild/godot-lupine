#include "level_progression_module.h"

void LevelProgressionModule::generate_script(Ref<FileAccess> p_file) {
	p_file->store_line("# LevelManager.gd");
	p_file->store_line("# Generated by Lupine Engine - Level Progression System");
	p_file->store_line("# Manages level progression, save/load, and game state");
	p_file->store_line("");
	p_file->store_line("extends Node");
	p_file->store_line("");
	p_file->store_line("# Signals");
	p_file->store_line("signal level_changed(old_level: String, new_level: String)");
	p_file->store_line("signal checkpoint_reached(checkpoint_id: String)");
	p_file->store_line("signal game_saved(save_slot: int)");
	p_file->store_line("signal game_loaded(save_slot: int)");
	p_file->store_line("signal area_discovered(area_name: String)");
	p_file->store_line("");
	p_file->store_line("# Current game state");
	p_file->store_line("var current_level: String = \"\"");
	p_file->store_line("var current_checkpoint: String = \"\"");
	p_file->store_line("var player_spawn_position: Vector2 = Vector2.ZERO");
	p_file->store_line("var discovered_areas: Array[String] = []");
	p_file->store_line("var completed_levels: Array[String] = []");
	p_file->store_line("");
	p_file->store_line("# Save data");
	p_file->store_line("var save_slots: int = 3");
	p_file->store_line("var current_save_slot: int = 0");
	p_file->store_line("var auto_save_enabled: bool = true");
	p_file->store_line("var auto_save_interval: float = 300.0  # 5 minutes");
	p_file->store_line("var auto_save_timer: float = 0.0");
	p_file->store_line("");
	p_file->store_line("# Level data");
	p_file->store_line("var level_data: Dictionary = {}");
	p_file->store_line("var transition_data: Dictionary = {}");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\t_load_level_data()");
	p_file->store_line("\t_setup_save_directory()");
	p_file->store_line("");
	p_file->store_line("func _process(delta):");
	p_file->store_line("\tif auto_save_enabled:");
	p_file->store_line("\t\tauto_save_timer += delta");
	p_file->store_line("\t\tif auto_save_timer >= auto_save_interval:");
	p_file->store_line("\t\t\tauto_save_timer = 0.0");
	p_file->store_line("\t\t\tauto_save()");
	p_file->store_line("");
	p_file->store_line("func change_level(level_path: String, spawn_point: String = \"\"):");
	p_file->store_line("\tvar old_level = current_level");
	p_file->store_line("\tcurrent_level = level_path");
	p_file->store_line("\t");
	p_file->store_line("\t# Load the new level");
	p_file->store_line("\tvar level_scene = load(level_path)");
	p_file->store_line("\tif not level_scene:");
	p_file->store_line("\t\tprint(\"Failed to load level: \", level_path)");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Change scene");
	p_file->store_line("\tget_tree().change_scene_to_packed(level_scene)");
	p_file->store_line("\t");
	p_file->store_line("\t# Wait for scene to load");
	p_file->store_line("\tawait get_tree().process_frame");
	p_file->store_line("\t");
	p_file->store_line("\t# Position player at spawn point");
	p_file->store_line("\tif spawn_point != \"\":");
	p_file->store_line("\t\t_move_player_to_spawn_point(spawn_point)");
	p_file->store_line("\t");
	p_file->store_line("\t# Mark area as discovered");
	p_file->store_line("\tvar level_name = level_path.get_file().get_basename()");
	p_file->store_line("\tif not discovered_areas.has(level_name):");
	p_file->store_line("\t\tdiscovered_areas.append(level_name)");
	p_file->store_line("\t\tarea_discovered.emit(level_name)");
	p_file->store_line("\t");
	p_file->store_line("\tlevel_changed.emit(old_level, current_level)");
	p_file->store_line("");
	p_file->store_line("func set_checkpoint(checkpoint_id: String, position: Vector2):");
	p_file->store_line("\tcurrent_checkpoint = checkpoint_id");
	p_file->store_line("\tplayer_spawn_position = position");
	p_file->store_line("\tcheckpoint_reached.emit(checkpoint_id)");
	p_file->store_line("\t");
	p_file->store_line("\t# Auto-save at checkpoint");
	p_file->store_line("\tif auto_save_enabled:");
	p_file->store_line("\t\tauto_save()");
	p_file->store_line("");
	p_file->store_line("func respawn_player():");
	p_file->store_line("\t# Find player and move to last checkpoint");
	p_file->store_line("\tvar player = get_tree().get_first_node_in_group(\"player\")");
	p_file->store_line("\tif player:");
	p_file->store_line("\t\tplayer.global_position = player_spawn_position");
	p_file->store_line("\t\t");
	p_file->store_line("\t\t# Reset player state");
	p_file->store_line("\t\tif player.has_method(\"respawn\"):");
	p_file->store_line("\t\t\tplayer.respawn()");
	p_file->store_line("\t\telif PlayerStats:");
	p_file->store_line("\t\t\tPlayerStats.current_health = PlayerStats.max_health");
	p_file->store_line("");
	p_file->store_line("func save_game(slot: int = -1) -> bool:");
	p_file->store_line("\tif slot == -1:");
	p_file->store_line("\t\tslot = current_save_slot");
	p_file->store_line("\t");
	p_file->store_line("\tvar save_data = _gather_save_data()");
	p_file->store_line("\tvar save_path = \"user://save_slot_\" + str(slot) + \".save\"");
	p_file->store_line("\t");
	p_file->store_line("\tvar file = FileAccess.open(save_path, FileAccess.WRITE)");
	p_file->store_line("\tif not file:");
	p_file->store_line("\t\tprint(\"Failed to create save file: \", save_path)");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\tfile.store_string(JSON.stringify(save_data))");
	p_file->store_line("\tfile.close()");
	p_file->store_line("\t");
	p_file->store_line("\tgame_saved.emit(slot)");
	p_file->store_line("\treturn true");
	p_file->store_line("");
	p_file->store_line("func load_game(slot: int) -> bool:");
	p_file->store_line("\tvar save_path = \"user://save_slot_\" + str(slot) + \".save\"");
	p_file->store_line("\t");
	p_file->store_line("\tif not FileAccess.file_exists(save_path):");
	p_file->store_line("\t\tprint(\"Save file does not exist: \", save_path)");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\tvar file = FileAccess.open(save_path, FileAccess.READ)");
	p_file->store_line("\tif not file:");
	p_file->store_line("\t\tprint(\"Failed to open save file: \", save_path)");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\tvar json_text = file.get_as_text()");
	p_file->store_line("\tfile.close()");
	p_file->store_line("\t");
	p_file->store_line("\tvar json = JSON.new()");
	p_file->store_line("\tvar parse_result = json.parse(json_text)");
	p_file->store_line("\tif parse_result != OK:");
	p_file->store_line("\t\tprint(\"Failed to parse save file\")");
	p_file->store_line("\t\treturn false");
	p_file->store_line("\t");
	p_file->store_line("\tvar save_data = json.data");
	p_file->store_line("\t_apply_save_data(save_data)");
	p_file->store_line("\t");
	p_file->store_line("\tcurrent_save_slot = slot");
	p_file->store_line("\tgame_loaded.emit(slot)");
	p_file->store_line("\treturn true");
	p_file->store_line("");
	p_file->store_line("func auto_save():");
	p_file->store_line("\tsave_game(current_save_slot)");
	p_file->store_line("");
	p_file->store_line("func _gather_save_data() -> Dictionary:");
	p_file->store_line("\tvar save_data = {");
	p_file->store_line("\t\t\"timestamp\": Time.get_unix_time_from_system(),");
	p_file->store_line("\t\t\"level_manager\": {");
	p_file->store_line("\t\t\t\"current_level\": current_level,");
	p_file->store_line("\t\t\t\"current_checkpoint\": current_checkpoint,");
	p_file->store_line("\t\t\t\"player_spawn_position\": {");
	p_file->store_line("\t\t\t\t\"x\": player_spawn_position.x,");
	p_file->store_line("\t\t\t\t\"y\": player_spawn_position.y");
	p_file->store_line("\t\t\t},");
	p_file->store_line("\t\t\t\"discovered_areas\": discovered_areas,");
	p_file->store_line("\t\t\t\"completed_levels\": completed_levels");
	p_file->store_line("\t\t}");
	p_file->store_line("\t}");
	p_file->store_line("\t");
	p_file->store_line("\t# Gather data from other systems");
	p_file->store_line("\tif PlayerStats:");
	p_file->store_line("\t\tsave_data[\"player_stats\"] = PlayerStats.get_save_data()");
	p_file->store_line("\t");
	p_file->store_line("\tif InventorySystem:");
	p_file->store_line("\t\tsave_data[\"inventory\"] = InventorySystem.get_inventory_data()");
	p_file->store_line("\t");
	p_file->store_line("\tif AbilitySystem:");
	p_file->store_line("\t\tsave_data[\"abilities\"] = AbilitySystem.get_save_data()");
	p_file->store_line("\t");
	p_file->store_line("\treturn save_data");
	p_file->store_line("");
	p_file->store_line("func _apply_save_data(save_data: Dictionary):");
	p_file->store_line("\t# Apply level manager data");
	p_file->store_line("\tif save_data.has(\"level_manager\"):");
	p_file->store_line("\t\tvar lm_data = save_data.level_manager");
	p_file->store_line("\t\tcurrent_level = lm_data.get(\"current_level\", \"\")");
	p_file->store_line("\t\tcurrent_checkpoint = lm_data.get(\"current_checkpoint\", \"\")");
	p_file->store_line("\t\t");
	p_file->store_line("\t\tif lm_data.has(\"player_spawn_position\"):");
	p_file->store_line("\t\t\tvar pos = lm_data.player_spawn_position");
	p_file->store_line("\t\t\tplayer_spawn_position = Vector2(pos.x, pos.y)");
	p_file->store_line("\t\t");
	p_file->store_line("\t\tdiscovered_areas = lm_data.get(\"discovered_areas\", [])");
	p_file->store_line("\t\tcompleted_levels = lm_data.get(\"completed_levels\", [])");
	p_file->store_line("\t");
	p_file->store_line("\t# Apply data to other systems");
	p_file->store_line("\tif save_data.has(\"player_stats\") and PlayerStats:");
	p_file->store_line("\t\tPlayerStats.load_save_data(save_data.player_stats)");
	p_file->store_line("\t");
	p_file->store_line("\tif save_data.has(\"inventory\") and InventorySystem:");
	p_file->store_line("\t\tInventorySystem.load_inventory_data(save_data.inventory)");
	p_file->store_line("\t");
	p_file->store_line("\tif save_data.has(\"abilities\") and AbilitySystem:");
	p_file->store_line("\t\tAbilitySystem.load_save_data(save_data.abilities)");
	p_file->store_line("\t");
	p_file->store_line("\t# Load the saved level");
	p_file->store_line("\tif current_level != \"\":");
	p_file->store_line("\t\tchange_level(current_level)");
	p_file->store_line("");
	p_file->store_line("func _move_player_to_spawn_point(spawn_point: String):");
	p_file->store_line("\tvar spawn_nodes = get_tree().get_nodes_in_group(\"spawn_points\")");
	p_file->store_line("\tfor node in spawn_nodes:");
	p_file->store_line("\t\tif node.name == spawn_point:");
	p_file->store_line("\t\t\tvar player = get_tree().get_first_node_in_group(\"player\")");
	p_file->store_line("\t\t\tif player:");
	p_file->store_line("\t\t\t\tplayer.global_position = node.global_position");
	p_file->store_line("\t\t\t\tplayer_spawn_position = node.global_position");
	p_file->store_line("\t\t\tbreak");
	p_file->store_line("");
	p_file->store_line("func _setup_save_directory():");
	p_file->store_line("\t# Ensure save directory exists");
	p_file->store_line("\tvar dir = DirAccess.open(\"user://\")");
	p_file->store_line("\tif not dir:");
	p_file->store_line("\t\tprint(\"Failed to access user directory\")");
	p_file->store_line("");
	p_file->store_line("func _load_level_data():");
	p_file->store_line("\t# Load level configuration");
	p_file->store_line("\tvar file_path = \"res://data/levels.json\"");
	p_file->store_line("\tvar file = FileAccess.open(file_path, FileAccess.READ)");
	p_file->store_line("\tif file:");
	p_file->store_line("\t\tvar json_text = file.get_as_text()");
	p_file->store_line("\t\tfile.close()");
	p_file->store_line("\t\tvar json = JSON.new()");
	p_file->store_line("\t\tvar parse_result = json.parse(json_text)");
	p_file->store_line("\t\tif parse_result == OK:");
	p_file->store_line("\t\t\tlevel_data = json.data");
	p_file->store_line("");
	p_file->store_line("func get_save_info(slot: int) -> Dictionary:");
	p_file->store_line("\tvar save_path = \"user://save_slot_\" + str(slot) + \".save\"");
	p_file->store_line("\t");
	p_file->store_line("\tif not FileAccess.file_exists(save_path):");
	p_file->store_line("\t\treturn {}");
	p_file->store_line("\t");
	p_file->store_line("\tvar file = FileAccess.open(save_path, FileAccess.READ)");
	p_file->store_line("\tif not file:");
	p_file->store_line("\t\treturn {}");
	p_file->store_line("\t");
	p_file->store_line("\tvar json_text = file.get_as_text()");
	p_file->store_line("\tfile.close()");
	p_file->store_line("\t");
	p_file->store_line("\tvar json = JSON.new()");
	p_file->store_line("\tvar parse_result = json.parse(json_text)");
	p_file->store_line("\tif parse_result != OK:");
	p_file->store_line("\t\treturn {}");
	p_file->store_line("\t");
	p_file->store_line("\tvar save_data = json.data");
	p_file->store_line("\treturn {");
	p_file->store_line("\t\t\"timestamp\": save_data.get(\"timestamp\", 0),");
	p_file->store_line("\t\t\"level\": save_data.get(\"level_manager\", {}).get(\"current_level\", \"\"),");
	p_file->store_line("\t\t\"player_level\": save_data.get(\"player_stats\", {}).get(\"level\", 1)");
	p_file->store_line("\t}");
	p_file->store_line("");
	p_file->store_line("func complete_level(level_name: String):");
	p_file->store_line("\tif not completed_levels.has(level_name):");
	p_file->store_line("\t\tcompleted_levels.append(level_name)");
	p_file->store_line("");
	p_file->store_line("func is_level_completed(level_name: String) -> bool:");
	p_file->store_line("\treturn completed_levels.has(level_name)");
	p_file->store_line("");
	p_file->store_line("func is_area_discovered(area_name: String) -> bool:");
	p_file->store_line("\treturn discovered_areas.has(area_name)");
}

void LevelProgressionModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "Checkpoint") {
		// Generate checkpoint scene
		p_file->store_line("[gd_scene load_steps=3 format=3 uid=\"uid://checkpoint\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/world/Checkpoint.gd\" id=\"1_checkpoint_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"RectangleShape2D\" id=\"RectangleShape2D_1\"]");
		p_file->store_line("size = Vector2(40, 60)");
		p_file->store_line("");
		p_file->store_line("[node name=\"Checkpoint\" type=\"Area2D\"]");
		p_file->store_line("script = ExtResource(\"1_checkpoint_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("modulate = Color(0.5, 1, 0.5, 1)");
		p_file->store_line("scale = Vector2(40, 60)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"ActivationEffect\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("modulate = Color(1, 1, 1, 0)");
		p_file->store_line("scale = Vector2(60, 60)");
		p_file->store_line("");
		p_file->store_line("[node name=\"AudioStreamPlayer2D\" type=\"AudioStreamPlayer2D\" parent=\".\"]");
	} else if (p_scene_name == "AreaTransition") {
		// Generate area transition scene
		p_file->store_line("[gd_scene load_steps=3 format=3 uid=\"uid://area_transition\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/world/AreaTransition.gd\" id=\"1_area_transition_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"RectangleShape2D\" id=\"RectangleShape2D_1\"]");
		p_file->store_line("size = Vector2(50, 100)");
		p_file->store_line("");
		p_file->store_line("[node name=\"AreaTransition\" type=\"Area2D\"]");
		p_file->store_line("script = ExtResource(\"1_area_transition_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"VisualIndicator\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("modulate = Color(1, 1, 1, 0.3)");
		p_file->store_line("scale = Vector2(50, 100)");
		p_file->store_line("");
		p_file->store_line("[node name=\"TransitionPrompt\" type=\"Label\" parent=\".\"]");
		p_file->store_line("offset_left = -30.0");
		p_file->store_line("offset_top = -70.0");
		p_file->store_line("offset_right = 30.0");
		p_file->store_line("offset_bottom = -50.0");
		p_file->store_line("text = \"Press E\"");
		p_file->store_line("horizontal_alignment = 1");
		p_file->store_line("visible = false");
	} else if (p_scene_name == "LevelExit") {
		// Generate level exit scene
		p_file->store_line("[gd_scene load_steps=3 format=3 uid=\"uid://level_exit\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/world/LevelExit.gd\" id=\"1_level_exit_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"RectangleShape2D\" id=\"RectangleShape2D_1\"]");
		p_file->store_line("size = Vector2(60, 80)");
		p_file->store_line("");
		p_file->store_line("[node name=\"LevelExit\" type=\"Area2D\"]");
		p_file->store_line("script = ExtResource(\"1_level_exit_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("modulate = Color(1, 1, 0.5, 1)");
		p_file->store_line("scale = Vector2(60, 80)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"RectangleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"ExitPrompt\" type=\"Label\" parent=\".\"]");
		p_file->store_line("offset_left = -40.0");
		p_file->store_line("offset_top = -60.0");
		p_file->store_line("offset_right = 40.0");
		p_file->store_line("offset_bottom = -40.0");
		p_file->store_line("text = \"Level Complete!\"");
		p_file->store_line("horizontal_alignment = 1");
	}
}
