#include "audio_manager_module.h"

void AudioManagerModule::generate_script(Ref<FileAccess> p_file) {
	p_file->store_line("# AudioManager.gd");
	p_file->store_line("# Generated by Lupine Engine - Audio Manager");
	p_file->store_line("# Manages music and sound effects with crossfading and automatic asset discovery");
	p_file->store_line("");
	p_file->store_line("extends Node");
	p_file->store_line("");
	p_file->store_line("# Signals");
	p_file->store_line("signal music_started(track_name: String)");
	p_file->store_line("signal music_stopped()");
	p_file->store_line("signal music_crossfaded(from_track: String, to_track: String)");
	p_file->store_line("signal sound_played(sound_name: String)");
	p_file->store_line("");
	p_file->store_line("# Audio players");
	p_file->store_line("var music_player_1: AudioStreamPlayer");
	p_file->store_line("var music_player_2: AudioStreamPlayer");
	p_file->store_line("var sound_player: AudioStreamPlayer");
	p_file->store_line("");
	p_file->store_line("# Current state");
	p_file->store_line("var current_music_track: String = \"\"");
	p_file->store_line("var current_music_player: AudioStreamPlayer");
	p_file->store_line("var is_crossfading: bool = false");
	p_file->store_line("");
	p_file->store_line("# Asset cache");
	p_file->store_line("var music_cache = {}");
	p_file->store_line("var sound_cache = {}");
	p_file->store_line("var music_path = \"assets/music\"");
	p_file->store_line("var sound_path = \"assets/soundEffects\"");
	p_file->store_line("");
	p_file->store_line("# Audio settings");
	p_file->store_line("var music_volume: float = 0.8");
	p_file->store_line("var sound_volume: float = 1.0");
	p_file->store_line("var crossfade_duration: float = 1.0");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\t# Create audio players");
	p_file->store_line("\tmusic_player_1 = AudioStreamPlayer.new()");
	p_file->store_line("\tmusic_player_2 = AudioStreamPlayer.new()");
	p_file->store_line("\tsound_player = AudioStreamPlayer.new()");
	p_file->store_line("\t");
	p_file->store_line("\tadd_child(music_player_1)");
	p_file->store_line("\tadd_child(music_player_2)");
	p_file->store_line("\tadd_child(sound_player)");
	p_file->store_line("\t");
	p_file->store_line("\t# Set initial volumes");
	p_file->store_line("\tmusic_player_1.volume_db = linear_to_db(music_volume)");
	p_file->store_line("\tmusic_player_2.volume_db = linear_to_db(music_volume)");
	p_file->store_line("\tsound_player.volume_db = linear_to_db(sound_volume)");
	p_file->store_line("\t");
	p_file->store_line("\t# Set current player");
	p_file->store_line("\tcurrent_music_player = music_player_1");
	p_file->store_line("\t");
	p_file->store_line("\t# Connect to VN Script Parser commands");
	p_file->store_line("\tif VNScriptParser:");
	p_file->store_line("\t\tVNScriptParser.command_executed.connect(_on_command_executed)");
	p_file->store_line("\t");
	p_file->store_line("\t# Scan for available audio files");
	p_file->store_line("\tscan_audio_files()");
	p_file->store_line("\t");
	p_file->store_line("\tprint(\"Audio Manager initialized\")");
	p_file->store_line("");
	p_file->store_line("# Handle commands from script parser");
	p_file->store_line("func _on_command_executed(command: String, args: Array):");
	p_file->store_line("\tmatch command:");
	p_file->store_line("\t\t\"playMusic\":");
	p_file->store_line("\t\t\tif args.size() > 0:");
	p_file->store_line("\t\t\t\tplay_music(args[0])");
	p_file->store_line("\t\t\"stopMusic\":");
	p_file->store_line("\t\t\tvar force_stop = false");
	p_file->store_line("\t\t\tif args.size() > 0 and args[0].to_lower() == \"force\":");
	p_file->store_line("\t\t\t\tforce_stop = true");
	p_file->store_line("\t\t\tstop_music(force_stop)");
	p_file->store_line("\t\t\"crossMusic\":");
	p_file->store_line("\t\t\tif args.size() > 0:");
	p_file->store_line("\t\t\t\tcrossfade_music(args[0])");
	p_file->store_line("\t\t\"playSound\":");
	p_file->store_line("\t\t\tif args.size() > 0:");
	p_file->store_line("\t\t\t\tplay_sound(args[0])");
	p_file->store_line("");
	p_file->store_line("# Play music with looping");
	p_file->store_line("func play_music(track_name: String, loop: bool = true):");
	p_file->store_line("\tif is_crossfading:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Find audio stream");
	p_file->store_line("\tvar stream = find_music_stream(track_name)");
	p_file->store_line("\tif not stream:");
	p_file->store_line("\t\tprint(\"Music track not found: \", track_name)");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Stop current music");
	p_file->store_line("\tstop_music(true)");
	p_file->store_line("\t");
	p_file->store_line("\t# Set up new track");
	p_file->store_line("\tcurrent_music_track = track_name");
	p_file->store_line("\tcurrent_music_player.stream = stream");
	p_file->store_line("\t");
	p_file->store_line("\t# Configure looping");
	p_file->store_line("\tif stream is AudioStreamOggVorbis:");
	p_file->store_line("\t\tstream.loop = loop");
	p_file->store_line("\telif stream is AudioStreamMP3:");
	p_file->store_line("\t\tstream.loop = loop");
	p_file->store_line("\telif stream is AudioStreamWAV:");
	p_file->store_line("\t\tstream.loop_mode = AudioStreamWAV.LOOP_FORWARD if loop else AudioStreamWAV.LOOP_DISABLED");
	p_file->store_line("\t");
	p_file->store_line("\t# Start playing");
	p_file->store_line("\tcurrent_music_player.play()");
	p_file->store_line("\tmusic_started.emit(track_name)");
	p_file->store_line("");
	p_file->store_line("# Stop music with optional fade out");
	p_file->store_line("func stop_music(force: bool = false):");
	p_file->store_line("\tif current_music_player.playing:");
	p_file->store_line("\t\tif force:");
	p_file->store_line("\t\t\tcurrent_music_player.stop()");
	p_file->store_line("\t\telse:");
	p_file->store_line("\t\t\t# Fade out");
	p_file->store_line("\t\t\tvar tween = create_tween()");
	p_file->store_line("\t\t\ttween.tween_method(set_music_volume, music_volume, 0.0, crossfade_duration / 2)");
	p_file->store_line("\t\t\ttween.tween_callback(func(): ");
	p_file->store_line("\t\t\t\tcurrent_music_player.stop()");
	p_file->store_line("\t\t\t\tset_music_volume(music_volume)");
	p_file->store_line("\t\t\t)");
	p_file->store_line("\t");
	p_file->store_line("\tcurrent_music_track = \"\"");
	p_file->store_line("\tmusic_stopped.emit()");
	p_file->store_line("");
	p_file->store_line("# Crossfade between music tracks");
	p_file->store_line("func crossfade_music(new_track: String):");
	p_file->store_line("\tif is_crossfading:");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\t# Find new audio stream");
	p_file->store_line("\tvar new_stream = find_music_stream(new_track)");
	p_file->store_line("\tif not new_stream:");
	p_file->store_line("\t\tprint(\"Music track not found for crossfade: \", new_track)");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tis_crossfading = true");
	p_file->store_line("\tvar old_track = current_music_track");
	p_file->store_line("\t");
	p_file->store_line("\t# Get the other player for crossfading");
	p_file->store_line("\tvar new_player = music_player_2 if current_music_player == music_player_1 else music_player_1");
	p_file->store_line("\tvar old_player = current_music_player");
	p_file->store_line("\t");
	p_file->store_line("\t# Set up new track");
	p_file->store_line("\tnew_player.stream = new_stream");
	p_file->store_line("\tnew_player.volume_db = linear_to_db(0.0)  # Start silent");
	p_file->store_line("\t");
	p_file->store_line("\t# Configure looping for new track");
	p_file->store_line("\tif new_stream is AudioStreamOggVorbis:");
	p_file->store_line("\t\tnew_stream.loop = true");
	p_file->store_line("\telif new_stream is AudioStreamMP3:");
	p_file->store_line("\t\tnew_stream.loop = true");
	p_file->store_line("\telif new_stream is AudioStreamWAV:");
	p_file->store_line("\t\tnew_stream.loop_mode = AudioStreamWAV.LOOP_FORWARD");
	p_file->store_line("\t");
	p_file->store_line("\t# Start new track");
	p_file->store_line("\tnew_player.play()");
	p_file->store_line("\t");
	p_file->store_line("\t# Crossfade");
	p_file->store_line("\tvar tween = create_tween()");
	p_file->store_line("\ttween.set_parallel(true)");
	p_file->store_line("\t");
	p_file->store_line("\t# Fade out old track");
	p_file->store_line("\ttween.tween_method(func(vol): old_player.volume_db = linear_to_db(vol), music_volume, 0.0, crossfade_duration)");
	p_file->store_line("\t");
	p_file->store_line("\t# Fade in new track");
	p_file->store_line("\ttween.tween_method(func(vol): new_player.volume_db = linear_to_db(vol), 0.0, music_volume, crossfade_duration)");
	p_file->store_line("\t");
	p_file->store_line("\t# Cleanup after crossfade");
	p_file->store_line("\ttween.tween_callback(func():");
	p_file->store_line("\t\told_player.stop()");
	p_file->store_line("\t\tcurrent_music_player = new_player");
	p_file->store_line("\t\tcurrent_music_track = new_track");
	p_file->store_line("\t\tis_crossfading = false");
	p_file->store_line("\t\tmusic_crossfaded.emit(old_track, new_track)");
	p_file->store_line("\t)");
	p_file->store_line("");
	p_file->store_line("# Play sound effect");
	p_file->store_line("func play_sound(sound_name: String):");
	p_file->store_line("\tvar stream = find_sound_stream(sound_name)");
	p_file->store_line("\tif not stream:");
	p_file->store_line("\t\tprint(\"Sound effect not found: \", sound_name)");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tsound_player.stream = stream");
	p_file->store_line("\tsound_player.play()");
	p_file->store_line("\tsound_played.emit(sound_name)");
	p_file->store_line("");
	p_file->store_line("# Find music stream");
	p_file->store_line("func find_music_stream(track_name: String) -> AudioStream:");
	p_file->store_line("\t# Check cache first");
	p_file->store_line("\tif music_cache.has(track_name):");
	p_file->store_line("\t\treturn music_cache[track_name]");
	p_file->store_line("\t");
	p_file->store_line("\t# Try to load as direct path");
	p_file->store_line("\tif FileAccess.file_exists(track_name):");
	p_file->store_line("\t\tvar stream = load(track_name) as AudioStream");
	p_file->store_line("\t\tif stream:");
	p_file->store_line("\t\t\tmusic_cache[track_name] = stream");
	p_file->store_line("\t\t\treturn stream");
	p_file->store_line("\t");
	p_file->store_line("\t# Try common extensions");
	p_file->store_line("\tvar extensions = [\".mp3\", \".wav\", \".ogg\"]");
	p_file->store_line("\tfor ext in extensions:");
	p_file->store_line("\t\tvar full_path = music_path + \"/\" + track_name + ext");
	p_file->store_line("\t\tif FileAccess.file_exists(full_path):");
	p_file->store_line("\t\t\tvar stream = load(full_path) as AudioStream");
	p_file->store_line("\t\t\tif stream:");
	p_file->store_line("\t\t\t\tmusic_cache[track_name] = stream");
	p_file->store_line("\t\t\t\treturn stream");
	p_file->store_line("\t");
	p_file->store_line("\treturn null");
	p_file->store_line("");
	p_file->store_line("# Find sound stream");
	p_file->store_line("func find_sound_stream(sound_name: String) -> AudioStream:");
	p_file->store_line("\t# Check cache first");
	p_file->store_line("\tif sound_cache.has(sound_name):");
	p_file->store_line("\t\treturn sound_cache[sound_name]");
	p_file->store_line("\t");
	p_file->store_line("\t# Try to load as direct path");
	p_file->store_line("\tif FileAccess.file_exists(sound_name):");
	p_file->store_line("\t\tvar stream = load(sound_name) as AudioStream");
	p_file->store_line("\t\tif stream:");
	p_file->store_line("\t\t\tsound_cache[sound_name] = stream");
	p_file->store_line("\t\t\treturn stream");
	p_file->store_line("\t");
	p_file->store_line("\t# Try common extensions");
	p_file->store_line("\tvar extensions = [\".wav\", \".mp3\", \".ogg\"]");
	p_file->store_line("\tfor ext in extensions:");
	p_file->store_line("\t\tvar full_path = sound_path + \"/\" + sound_name + ext");
	p_file->store_line("\t\tif FileAccess.file_exists(full_path):");
	p_file->store_line("\t\t\tvar stream = load(full_path) as AudioStream");
	p_file->store_line("\t\t\tif stream:");
	p_file->store_line("\t\t\t\tsound_cache[sound_name] = stream");
	p_file->store_line("\t\t\t\treturn stream");
	p_file->store_line("\t");
	p_file->store_line("\treturn null");
	p_file->store_line("");
	p_file->store_line("# Scan audio directories");
	p_file->store_line("func scan_audio_files():");
	p_file->store_line("\tmusic_cache.clear()");
	p_file->store_line("\tsound_cache.clear()");
	p_file->store_line("\t");
	p_file->store_line("\t# Scan music");
	p_file->store_line("\tscan_audio_directory(music_path, music_cache, \"music\")");
	p_file->store_line("\t");
	p_file->store_line("\t# Scan sound effects");
	p_file->store_line("\tscan_audio_directory(sound_path, sound_cache, \"sound effects\")");
	p_file->store_line("");
	p_file->store_line("# Scan a specific audio directory");
	p_file->store_line("func scan_audio_directory(dir_path: String, cache: Dictionary, type_name: String):");
	p_file->store_line("\tvar dir = DirAccess.open(dir_path)");
	p_file->store_line("\tif not dir:");
	p_file->store_line("\t\tprint(\"Audio directory not found: \", dir_path)");
	p_file->store_line("\t\treturn");
	p_file->store_line("\t");
	p_file->store_line("\tdir.list_dir_begin()");
	p_file->store_line("\tvar file_name = dir.get_next()");
	p_file->store_line("\t");
	p_file->store_line("\twhile file_name != \"\":");
	p_file->store_line("\t\tif not dir.current_is_dir() and is_audio_file(file_name):");
	p_file->store_line("\t\t\tvar full_path = dir_path + \"/\" + file_name");
	p_file->store_line("\t\t\tvar stream = load(full_path) as AudioStream");
	p_file->store_line("\t\t\tif stream:");
	p_file->store_line("\t\t\t\tvar key = file_name.get_basename()");
	p_file->store_line("\t\t\t\tcache[key] = stream");
	p_file->store_line("\t\t\t\tprint(\"Cached \", type_name, \": \", key)");
	p_file->store_line("\t\t");
	p_file->store_line("\t\tfile_name = dir.get_next()");
	p_file->store_line("\t");
	p_file->store_line("\tdir.list_dir_end()");
	p_file->store_line("\tprint(\"Scanned \", cache.size(), \" \", type_name, \" files\")");
	p_file->store_line("");
	p_file->store_line("# Check if file is an audio file");
	p_file->store_line("func is_audio_file(filename: String) -> bool:");
	p_file->store_line("\tvar ext = filename.get_extension().to_lower()");
	p_file->store_line("\treturn ext in [\"mp3\", \"wav\", \"ogg\"]");
	p_file->store_line("");
	p_file->store_line("# Volume control helpers");
	p_file->store_line("func set_music_volume(volume: float):");
	p_file->store_line("\tmusic_volume = volume");
	p_file->store_line("\tif current_music_player:");
	p_file->store_line("\t\tcurrent_music_player.volume_db = linear_to_db(volume)");
	p_file->store_line("");
	p_file->store_line("func set_sound_volume(volume: float):");
	p_file->store_line("\tsound_volume = volume");
	p_file->store_line("\tsound_player.volume_db = linear_to_db(volume)");
	p_file->store_line("");
	p_file->store_line("# Get current state");
	p_file->store_line("func get_current_music_track() -> String:");
	p_file->store_line("\treturn current_music_track");
	p_file->store_line("");
	p_file->store_line("func is_music_playing() -> bool:");
	p_file->store_line("\treturn current_music_player.playing");
}

void AudioManagerModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	// This module doesn't generate scenes, only scripts
	p_file->store_line("# AudioManager scene - not used");
}
