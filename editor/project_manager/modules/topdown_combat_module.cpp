#include "topdown_combat_module.h"

void TopdownCombatModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();

	if (filename == "TopdownCombatManager.gd") {
		p_file->store_line("# TopdownCombatManager.gd");
		p_file->store_line("# Generated by Lupine Engine - Topdown Combat Manager");
		p_file->store_line("# Central combat system coordinator");
		p_file->store_line("");
		p_file->store_line("extends Node");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal damage_dealt(attacker: Node, target: Node, damage: float)");
		p_file->store_line("signal entity_died(entity: Node)");
		p_file->store_line("signal status_effect_applied(target: Node, effect: String)");
		p_file->store_line("");
		p_file->store_line("# Combat settings");
		p_file->store_line("@export var damage_number_scene: PackedScene");
		p_file->store_line("@export var hit_effect_scene: PackedScene");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Load default scenes");
		p_file->store_line("\tif not damage_number_scene:");
		p_file->store_line("\t\tdamage_number_scene = preload(\"res://scenes/combat/DamageNumber.tscn\")");
		p_file->store_line("\tif not hit_effect_scene:");
		p_file->store_line("\t\thit_effect_scene = preload(\"res://scenes/combat/HitEffect.tscn\")");
		p_file->store_line("");
		p_file->store_line("func deal_damage(attacker: Node, target: Node, base_damage: float, damage_type: String = \"physical\", knockback: Vector2 = Vector2.ZERO):");
		p_file->store_line("\tif not target or not target.has_method(\"take_damage\"):");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate final damage");
		p_file->store_line("\tvar final_damage = _calculate_damage(attacker, target, base_damage, damage_type)");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply damage");
		p_file->store_line("\ttarget.take_damage(final_damage, knockback)");
		p_file->store_line("\t");
		p_file->store_line("\t# Show visual feedback");
		p_file->store_line("\t_show_damage_number(target.global_position, final_damage, damage_type)");
		p_file->store_line("\t_show_hit_effect(target.global_position)");
		p_file->store_line("\t");
		p_file->store_line("\t# Emit signal");
		p_file->store_line("\tdamage_dealt.emit(attacker, target, final_damage)");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if target died");
		p_file->store_line("\tif target.has_method(\"is_dead\") and target.is_dead:");
		p_file->store_line("\t\tentity_died.emit(target)");
		p_file->store_line("");
		p_file->store_line("func create_projectile(scene: PackedScene, start_pos: Vector2, direction: Vector2, speed: float, damage: float, attacker: Node = null) -> Node:");
		p_file->store_line("\tvar projectile = scene.instantiate()");
		p_file->store_line("\tget_tree().current_scene.add_child(projectile)");
		p_file->store_line("\tprojectile.global_position = start_pos");
		p_file->store_line("\t");
		p_file->store_line("\tif projectile.has_method(\"setup\"):");
		p_file->store_line("\t\tprojectile.setup(direction, speed, damage, attacker)");
		p_file->store_line("\t");
		p_file->store_line("\treturn projectile");
		p_file->store_line("");
		p_file->store_line("func create_area_attack(scene: PackedScene, center_pos: Vector2, radius: float, damage: float, attacker: Node = null) -> Node:");
		p_file->store_line("\tvar area_attack = scene.instantiate()");
		p_file->store_line("\tget_tree().current_scene.add_child(area_attack)");
		p_file->store_line("\tarea_attack.global_position = center_pos");
		p_file->store_line("\t");
		p_file->store_line("\tif area_attack.has_method(\"setup\"):");
		p_file->store_line("\t\tarea_attack.setup(radius, damage, attacker)");
		p_file->store_line("\t");
		p_file->store_line("\treturn area_attack");
		p_file->store_line("");
		p_file->store_line("func apply_status_effect(target: Node, effect_name: String, duration: float, strength: float = 1.0):");
		p_file->store_line("\tif not target or not target.has_method(\"add_status_effect\"):");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\ttarget.add_status_effect(effect_name, duration, strength)");
		p_file->store_line("\tstatus_effect_applied.emit(target, effect_name)");
		p_file->store_line("");
		p_file->store_line("func _calculate_damage(attacker: Node, target: Node, base_damage: float, damage_type: String) -> float:");
		p_file->store_line("\tvar final_damage = base_damage");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply attacker bonuses");
		p_file->store_line("\tif attacker and attacker.has_method(\"get_damage_multiplier\"):");
		p_file->store_line("\t\tfinal_damage *= attacker.get_damage_multiplier(damage_type)");
		p_file->store_line("\t");
		p_file->store_line("\t# Apply target resistances");
		p_file->store_line("\tif target and target.has_method(\"get_damage_resistance\"):");
		p_file->store_line("\t\tfinal_damage *= (1.0 - target.get_damage_resistance(damage_type))");
		p_file->store_line("\t");
		p_file->store_line("\t# Add some randomness");
		p_file->store_line("\tfinal_damage *= randf_range(0.9, 1.1)");
		p_file->store_line("\t");
		p_file->store_line("\treturn max(1.0, final_damage)");
		p_file->store_line("");
		p_file->store_line("func _show_damage_number(position: Vector2, damage: float, damage_type: String):");
		p_file->store_line("\tif damage_number_scene:");
		p_file->store_line("\t\tvar damage_number = damage_number_scene.instantiate()");
		p_file->store_line("\t\tget_tree().current_scene.add_child(damage_number)");
		p_file->store_line("\t\tdamage_number.global_position = position");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tif damage_number.has_method(\"setup\"):");
		p_file->store_line("\t\t\tdamage_number.setup(damage, damage_type)");
		p_file->store_line("");
		p_file->store_line("func _show_hit_effect(position: Vector2):");
		p_file->store_line("\tif hit_effect_scene:");
		p_file->store_line("\t\tvar hit_effect = hit_effect_scene.instantiate()");
		p_file->store_line("\t\tget_tree().current_scene.add_child(hit_effect)");
		p_file->store_line("\t\thit_effect.global_position = position");
	} else if (filename == "Projectile.gd") {
		p_file->store_line("# Projectile.gd");
		p_file->store_line("# Generated by Lupine Engine - Combat Projectile");
		p_file->store_line("# Base projectile for ranged attacks");
		p_file->store_line("");
		p_file->store_line("extends Area2D");
		p_file->store_line("class_name Projectile");
		p_file->store_line("");
		p_file->store_line("# Projectile settings");
		p_file->store_line("@export var speed: float = 400.0");
		p_file->store_line("@export var damage: float = 20.0");
		p_file->store_line("@export var lifetime: float = 5.0");
		p_file->store_line("@export var pierce_count: int = 0");
		p_file->store_line("@export var knockback_force: float = 100.0");
		p_file->store_line("");
		p_file->store_line("# State");
		p_file->store_line("var direction: Vector2 = Vector2.RIGHT");
		p_file->store_line("var attacker: Node = null");
		p_file->store_line("var targets_hit: Array[Node] = []");
		p_file->store_line("var lifetime_timer: float = 0.0");
		p_file->store_line("");
		p_file->store_line("# Components");
		p_file->store_line("@onready var sprite: Sprite2D = $Sprite2D");
		p_file->store_line("@onready var collision: CollisionShape2D = $CollisionShape2D");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tbody_entered.connect(_on_body_entered)");
		p_file->store_line("\tlifetime_timer = lifetime");
		p_file->store_line("");
		p_file->store_line("func _physics_process(delta: float):");
		p_file->store_line("\t# Move projectile");
		p_file->store_line("\tglobal_position += direction * speed * delta");
		p_file->store_line("\t");
		p_file->store_line("\t# Update lifetime");
		p_file->store_line("\tlifetime_timer -= delta");
		p_file->store_line("\tif lifetime_timer <= 0:");
		p_file->store_line("\t\t_destroy()");
		p_file->store_line("");
		p_file->store_line("func setup(new_direction: Vector2, new_speed: float, new_damage: float, new_attacker: Node = null):");
		p_file->store_line("\tdirection = new_direction.normalized()");
		p_file->store_line("\tspeed = new_speed");
		p_file->store_line("\tdamage = new_damage");
		p_file->store_line("\tattacker = new_attacker");
		p_file->store_line("\t");
		p_file->store_line("\t# Rotate sprite to face direction");
		p_file->store_line("\tif sprite:");
		p_file->store_line("\t\tsprite.rotation = direction.angle()");
		p_file->store_line("");
		p_file->store_line("func _on_body_entered(body: Node):");
		p_file->store_line("\t# Don't hit the attacker");
		p_file->store_line("\tif body == attacker:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Don't hit the same target twice");
		p_file->store_line("\tif targets_hit.has(body):");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if target can take damage");
		p_file->store_line("\tif body.has_method(\"take_damage\"):");
		p_file->store_line("\t\ttargets_hit.append(body)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\t# Calculate knockback");
		p_file->store_line("\t\tvar knockback = direction * knockback_force");
		p_file->store_line("\t\t");
		p_file->store_line("\t\t# Deal damage through combat manager");
		p_file->store_line("\t\tif CombatManager:");
		p_file->store_line("\t\t\tCombatManager.deal_damage(attacker, body, damage, \"projectile\", knockback)");
		p_file->store_line("\t\telse:");
		p_file->store_line("\t\t\tbody.take_damage(damage, knockback)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\t# Check if should be destroyed");
		p_file->store_line("\t\tif pierce_count <= 0 or targets_hit.size() > pierce_count:");
		p_file->store_line("\t\t\t_destroy()");
		p_file->store_line("");
		p_file->store_line("func _destroy():");
		p_file->store_line("\tqueue_free()");
	}
}

void TopdownCombatModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "Projectile") {
		p_file->store_line("[gd_scene load_steps=3 format=3 uid=\"uid://projectile\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/combat/Projectile.gd\" id=\"1_projectile_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"CircleShape2D\" id=\"CircleShape2D_1\"]");
		p_file->store_line("radius = 4.0");
		p_file->store_line("");
		p_file->store_line("[node name=\"Projectile\" type=\"Area2D\"]");
		p_file->store_line("script = ExtResource(\"1_projectile_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape2D\" type=\"CollisionShape2D\" parent=\".\"]");
		p_file->store_line("shape = SubResource(\"CircleShape2D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("modulate = Color(1, 0.8, 0.2, 1)");
		p_file->store_line("scale = Vector2(8, 8)");
	} else if (p_scene_name == "DamageNumber") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://damage_number\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/combat/DamageNumber.gd\" id=\"1_damage_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"DamageNumber\" type=\"Label\"]");
		p_file->store_line("script = ExtResource(\"1_damage_script\")");
		p_file->store_line("text = \"10\"");
		p_file->store_line("horizontal_alignment = 1");
		p_file->store_line("vertical_alignment = 1");
	} else if (p_scene_name == "HitEffect") {
		p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://hit_effect\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/combat/HitEffect.gd\" id=\"1_hit_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"HitEffect\" type=\"Node2D\"]");
		p_file->store_line("script = ExtResource(\"1_hit_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Sprite2D\" type=\"Sprite2D\" parent=\".\"]");
		p_file->store_line("modulate = Color(1, 0.2, 0.2, 0.8)");
		p_file->store_line("scale = Vector2(16, 16)");
	}
}
