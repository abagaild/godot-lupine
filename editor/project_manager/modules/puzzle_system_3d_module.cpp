#include "puzzle_system_3d_module.h"

void PuzzleSystem3DModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();
	
	if (filename == "PuzzleBase3D.gd") {
		p_file->store_line("# PuzzleBase3D.gd");
		p_file->store_line("# Generated by Lupine Engine - 3D Puzzle Base Class");
		p_file->store_line("# Base class for all 3D puzzle elements");
		p_file->store_line("");
		p_file->store_line("extends Node3D");
		p_file->store_line("class_name PuzzleBase3D");
		p_file->store_line("");
		p_file->store_line("# Signals");
		p_file->store_line("signal puzzle_activated()");
		p_file->store_line("signal puzzle_deactivated()");
		p_file->store_line("signal puzzle_completed()");
		p_file->store_line("signal state_changed(new_state: String)");
		p_file->store_line("");
		p_file->store_line("# Puzzle properties");
		p_file->store_line("@export var puzzle_id: String = \"\"");
		p_file->store_line("@export var is_persistent: bool = true");
		p_file->store_line("@export var activation_conditions: Array[Dictionary] = []");
		p_file->store_line("@export var completion_actions: Array[Dictionary] = []");
		p_file->store_line("");
		p_file->store_line("# State management");
		p_file->store_line("enum PuzzleState { INACTIVE, ACTIVE, COMPLETED, LOCKED }");
		p_file->store_line("var current_state: PuzzleState = PuzzleState.INACTIVE");
		p_file->store_line("var is_solved: bool = false");
		p_file->store_line("");
		p_file->store_line("# Connected puzzles");
		p_file->store_line("var connected_puzzles: Array[PuzzleBase3D] = []");
		p_file->store_line("var required_puzzles: Array[String] = []");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\t# Check if puzzle was already completed");
		p_file->store_line("\tif is_persistent and WorldState3D.is_puzzle_completed(puzzle_id):");
		p_file->store_line("\t\tcurrent_state = PuzzleState.COMPLETED");
		p_file->store_line("\t\tis_solved = true");
		p_file->store_line("\t\t_apply_completed_state()");
		p_file->store_line("\t");
		p_file->store_line("\t# Connect to world state changes");
		p_file->store_line("\tWorldState3D.puzzle_completed.connect(_on_puzzle_completed)");
		p_file->store_line("");
		p_file->store_line("func activate():");
		p_file->store_line("\tif current_state == PuzzleState.COMPLETED:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Check activation conditions");
		p_file->store_line("\tif not _check_activation_conditions():");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tcurrent_state = PuzzleState.ACTIVE");
		p_file->store_line("\tpuzzle_activated.emit()");
		p_file->store_line("\tstate_changed.emit(\"active\")");
		p_file->store_line("\t_on_activated()");
		p_file->store_line("");
		p_file->store_line("func deactivate():");
		p_file->store_line("\tif current_state != PuzzleState.ACTIVE:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tcurrent_state = PuzzleState.INACTIVE");
		p_file->store_line("\tpuzzle_deactivated.emit()");
		p_file->store_line("\tstate_changed.emit(\"inactive\")");
		p_file->store_line("\t_on_deactivated()");
		p_file->store_line("");
		p_file->store_line("func complete():");
		p_file->store_line("\tif is_solved:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tis_solved = true");
		p_file->store_line("\tcurrent_state = PuzzleState.COMPLETED");
		p_file->store_line("\t");
		p_file->store_line("\t# Mark as completed in world state");
		p_file->store_line("\tif is_persistent:");
		p_file->store_line("\t\tWorldState3D.complete_puzzle(puzzle_id)");
		p_file->store_line("\t");
		p_file->store_line("\tpuzzle_completed.emit()");
		p_file->store_line("\tstate_changed.emit(\"completed\")");
		p_file->store_line("\t");
		p_file->store_line("\t# Execute completion actions");
		p_file->store_line("\t_execute_completion_actions()");
		p_file->store_line("\t_on_completed()");
		p_file->store_line("");
		p_file->store_line("func reset():");
		p_file->store_line("\tif is_persistent and WorldState3D.is_puzzle_completed(puzzle_id):");
		p_file->store_line("\t\treturn  # Don't reset persistent completed puzzles");
		p_file->store_line("\t");
		p_file->store_line("\tis_solved = false");
		p_file->store_line("\tcurrent_state = PuzzleState.INACTIVE");
		p_file->store_line("\tstate_changed.emit(\"reset\")");
		p_file->store_line("\t_on_reset()");
		p_file->store_line("");
		p_file->store_line("func connect_puzzle(puzzle: PuzzleBase3D):");
		p_file->store_line("\tif not connected_puzzles.has(puzzle):");
		p_file->store_line("\t\tconnected_puzzles.append(puzzle)");
		p_file->store_line("\t\tpuzzle.puzzle_completed.connect(_on_connected_puzzle_completed)");
		p_file->store_line("");
		p_file->store_line("func _check_activation_conditions() -> bool:");
		p_file->store_line("\t# Check world state conditions");
		p_file->store_line("\tfor condition in activation_conditions:");
		p_file->store_line("\t\tif not WorldState3D.check_condition(condition):");
		p_file->store_line("\t\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Check required puzzles");
		p_file->store_line("\tfor required_id in required_puzzles:");
		p_file->store_line("\t\tif not WorldState3D.is_puzzle_completed(required_id):");
		p_file->store_line("\t\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\treturn true");
		p_file->store_line("");
		p_file->store_line("func _execute_completion_actions():");
		p_file->store_line("\tfor action in completion_actions:");
		p_file->store_line("\t\t_execute_action(action)");
		p_file->store_line("");
		p_file->store_line("func _execute_action(action: Dictionary):");
		p_file->store_line("\tmatch action.type:");
		p_file->store_line("\t\t\"set_variable\":");
		p_file->store_line("\t\t\tWorldState3D.set_variable(action.variable, action.value)");
		p_file->store_line("\t\t\"unlock_door\":");
		p_file->store_line("\t\t\t_unlock_door(action.door_id)");
		p_file->store_line("\t\t\"spawn_item\":");
		p_file->store_line("\t\t\t_spawn_item(action.item_id, action.position)");
		p_file->store_line("\t\t\"activate_platform\":");
		p_file->store_line("\t\t\t_activate_platform(action.platform_id)");
		p_file->store_line("");
		p_file->store_line("func _unlock_door(door_id: String):");
		p_file->store_line("\tvar doors = get_tree().get_nodes_in_group(\"doors\")");
		p_file->store_line("\tfor door in doors:");
		p_file->store_line("\t\tif door.has_method(\"get_door_id\") and door.get_door_id() == door_id:");
		p_file->store_line("\t\t\tdoor.unlock()");
		p_file->store_line("");
		p_file->store_line("func _spawn_item(item_id: String, position: Vector3):");
		p_file->store_line("\t# Spawn collectible item");
		p_file->store_line("\tpass  # Implement based on your item system");
		p_file->store_line("");
		p_file->store_line("func _activate_platform(platform_id: String):");
		p_file->store_line("\tvar platforms = get_tree().get_nodes_in_group(\"platforms\")");
		p_file->store_line("\tfor platform in platforms:");
		p_file->store_line("\t\tif platform.has_method(\"get_platform_id\") and platform.get_platform_id() == platform_id:");
		p_file->store_line("\t\t\tplatform.activate()");
		p_file->store_line("");
		p_file->store_line("func _on_connected_puzzle_completed():");
		p_file->store_line("\t# Check if all connected puzzles are completed");
		p_file->store_line("\tvar all_completed = true");
		p_file->store_line("\tfor puzzle in connected_puzzles:");
		p_file->store_line("\t\tif not puzzle.is_solved:");
		p_file->store_line("\t\t\tall_completed = false");
		p_file->store_line("\t\t\tbreak");
		p_file->store_line("\t");
		p_file->store_line("\tif all_completed:");
		p_file->store_line("\t\tcomplete()");
		p_file->store_line("");
		p_file->store_line("func _on_puzzle_completed(puzzle_id: String):");
		p_file->store_line("\t# React to other puzzles being completed");
		p_file->store_line("\tif required_puzzles.has(puzzle_id):");
		p_file->store_line("\t\t_check_activation_conditions()");
		p_file->store_line("");
		p_file->store_line("# Override these in derived classes");
		p_file->store_line("func _on_activated():");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("func _on_deactivated():");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("func _on_completed():");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("func _on_reset():");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("func _apply_completed_state():");
		p_file->store_line("\tpass");
	} else if (filename == "SwitchPuzzle3D.gd") {
		p_file->store_line("# SwitchPuzzle3D.gd");
		p_file->store_line("# Generated by Lupine Engine - 3D Switch Puzzle");
		p_file->store_line("# Interactive switch that can be activated by player or objects");
		p_file->store_line("");
		p_file->store_line("extends PuzzleBase3D");
		p_file->store_line("");
		p_file->store_line("# Switch properties");
		p_file->store_line("@export var switch_type: String = \"lever\"  # lever, button, crystal");
		p_file->store_line("@export var requires_item: String = \"\"");
		p_file->store_line("@export var activation_time: float = 0.0  # 0 = instant, >0 = timed");
		p_file->store_line("@export var auto_reset: bool = false");
		p_file->store_line("@export var reset_delay: float = 3.0");
		p_file->store_line("");
		p_file->store_line("# Components");
		p_file->store_line("@onready var mesh: MeshInstance3D = $MeshInstance3D");
		p_file->store_line("@onready var interaction_area: Area3D = $InteractionArea");
		p_file->store_line("@onready var animation_player: AnimationPlayer = $AnimationPlayer");
		p_file->store_line("@onready var audio_player: AudioStreamPlayer3D = $AudioStreamPlayer3D");
		p_file->store_line("");
		p_file->store_line("# State");
		p_file->store_line("var is_activated: bool = false");
		p_file->store_line("var activation_timer: float = 0.0");
		p_file->store_line("var reset_timer: float = 0.0");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tsuper._ready()");
		p_file->store_line("\tinteraction_area.body_entered.connect(_on_interaction_area_entered)");
		p_file->store_line("\tinteraction_area.body_exited.connect(_on_interaction_area_exited)");
		p_file->store_line("\tadd_to_group(\"switches\")");
		p_file->store_line("");
		p_file->store_line("func _process(delta):");
		p_file->store_line("\tif activation_time > 0 and is_activated:");
		p_file->store_line("\t\tactivation_timer += delta");
		p_file->store_line("\t\tif activation_timer >= activation_time:");
		p_file->store_line("\t\t\tcomplete()");
		p_file->store_line("\t");
		p_file->store_line("\tif auto_reset and is_solved:");
		p_file->store_line("\t\treset_timer += delta");
		p_file->store_line("\t\tif reset_timer >= reset_delay:");
		p_file->store_line("\t\t\treset()");
		p_file->store_line("");
		p_file->store_line("func _input(event):");
		p_file->store_line("\tif event.is_action_pressed(\"interact\") and _can_interact():");
		p_file->store_line("\t\t_interact()");
		p_file->store_line("");
		p_file->store_line("func _on_interaction_area_entered(body: Node3D):");
		p_file->store_line("\tif body.is_in_group(\"player\"):");
		p_file->store_line("\t\t_show_interaction_prompt()");
		p_file->store_line("");
		p_file->store_line("func _on_interaction_area_exited(body: Node3D):");
		p_file->store_line("\tif body.is_in_group(\"player\"):");
		p_file->store_line("\t\t_hide_interaction_prompt()");
		p_file->store_line("");
		p_file->store_line("func _can_interact() -> bool:");
		p_file->store_line("\tif current_state == PuzzleState.COMPLETED:");
		p_file->store_line("\t\treturn false");
		p_file->store_line("\t");
		p_file->store_line("\t# Check if player is in interaction area");
		p_file->store_line("\tvar bodies = interaction_area.get_overlapping_bodies()");
		p_file->store_line("\tfor body in bodies:");
		p_file->store_line("\t\tif body.is_in_group(\"player\"):");
		p_file->store_line("\t\t\t# Check if player has required item");
		p_file->store_line("\t\t\tif requires_item != \"\" and InventorySystem:");
		p_file->store_line("\t\t\t\treturn InventorySystem.has_item(requires_item)");
		p_file->store_line("\t\t\treturn true");
		p_file->store_line("\treturn false");
		p_file->store_line("");
		p_file->store_line("func _interact():");
		p_file->store_line("\tif is_activated:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tis_activated = true");
		p_file->store_line("\tactivation_timer = 0.0");
		p_file->store_line("\t");
		p_file->store_line("\t# Use required item");
		p_file->store_line("\tif requires_item != \"\" and InventorySystem:");
		p_file->store_line("\t\tInventorySystem.remove_item(requires_item, 1)");
		p_file->store_line("\t");
		p_file->store_line("\t# Play activation animation and sound");
		p_file->store_line("\tif animation_player:");
		p_file->store_line("\t\tanimation_player.play(\"activate\")");
		p_file->store_line("\t");
		p_file->store_line("\tif audio_player:");
		p_file->store_line("\t\taudio_player.play()");
		p_file->store_line("\t");
		p_file->store_line("\t# Immediate activation or timed");
		p_file->store_line("\tif activation_time <= 0:");
		p_file->store_line("\t\tcomplete()");
		p_file->store_line("\telse:");
		p_file->store_line("\t\tactivate()");
		p_file->store_line("");
		p_file->store_line("func _on_completed():");
		p_file->store_line("\tif animation_player:");
		p_file->store_line("\t\tanimation_player.play(\"completed\")");
		p_file->store_line("");
		p_file->store_line("func _on_reset():");
		p_file->store_line("\tis_activated = false");
		p_file->store_line("\tactivation_timer = 0.0");
		p_file->store_line("\treset_timer = 0.0");
		p_file->store_line("\t");
		p_file->store_line("\tif animation_player:");
		p_file->store_line("\t\tanimation_player.play(\"reset\")");
		p_file->store_line("");
		p_file->store_line("func _show_interaction_prompt():");
		p_file->store_line("\t# Show UI prompt");
		p_file->store_line("\tpass");
		p_file->store_line("");
		p_file->store_line("func _hide_interaction_prompt():");
		p_file->store_line("\t# Hide UI prompt");
		p_file->store_line("\tpass");
	}
}

void PuzzleSystem3DModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "SwitchPuzzle3D") {
		p_file->store_line("[gd_scene load_steps=5 format=3 uid=\"uid://switch_puzzle_3d\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/puzzles/SwitchPuzzle3D.gd\" id=\"1_switch_script\"]");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"BoxMesh\" id=\"BoxMesh_1\"]");
		p_file->store_line("size = Vector3(1, 2, 0.5)");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"BoxShape3D\" id=\"BoxShape3D_1\"]");
		p_file->store_line("size = Vector3(1, 2, 0.5)");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"SphereShape3D\" id=\"SphereShape3D_1\"]");
		p_file->store_line("radius = 1.5");
		p_file->store_line("");
		p_file->store_line("[sub_resource type=\"Animation\" id=\"Animation_1\"]");
		p_file->store_line("resource_name = \"activate\"");
		p_file->store_line("length = 0.5");
		p_file->store_line("");
		p_file->store_line("[node name=\"SwitchPuzzle3D\" type=\"Node3D\"]");
		p_file->store_line("script = ExtResource(\"1_switch_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"MeshInstance3D\" type=\"MeshInstance3D\" parent=\".\"]");
		p_file->store_line("mesh = SubResource(\"BoxMesh_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"StaticBody3D\" type=\"StaticBody3D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionShape3D\" type=\"CollisionShape3D\" parent=\"StaticBody3D\"]");
		p_file->store_line("shape = SubResource(\"BoxShape3D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"InteractionArea\" type=\"Area3D\" parent=\".\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"InteractionShape\" type=\"CollisionShape3D\" parent=\"InteractionArea\"]");
		p_file->store_line("shape = SubResource(\"SphereShape3D_1\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"AnimationPlayer\" type=\"AnimationPlayer\" parent=\".\"]");
		p_file->store_line("libraries = {");
		p_file->store_line("\"default\": SubResource(\"Animation_1\")");
		p_file->store_line("}");
		p_file->store_line("");
		p_file->store_line("[node name=\"AudioStreamPlayer3D\" type=\"AudioStreamPlayer3D\" parent=\".\"]");
	}
}
