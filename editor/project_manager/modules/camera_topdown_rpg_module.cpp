#include "camera_topdown_rpg_module.h"

void CameraTopdownRPGModule::generate_script(Ref<FileAccess> p_file) {
	p_file->store_line("# CameraTopdownRPG.gd");
	p_file->store_line("# Generated by Lupine Engine - Top-down RPG Camera Controller");
	p_file->store_line("# Smooth following camera with zoom controls for top-down RPG games");
	p_file->store_line("");
	p_file->store_line("extends Camera2D");
	p_file->store_line("class_name CameraTopdownRPG");
	p_file->store_line("");
	p_file->store_line("# Camera settings");
	p_file->store_line("@export var follow_speed: float = 5.0");
	p_file->store_line("@export var zoom_speed: float = 2.0");
	p_file->store_line("@export var min_zoom: float = 0.5");
	p_file->store_line("@export var max_zoom: float = 3.0");
	p_file->store_line("@export var default_zoom: float = 1.0");
	p_file->store_line("@export var zoom_step: float = 0.1");
	p_file->store_line("@export var smooth_zoom: bool = true");
	p_file->store_line("@export var enable_screen_shake: bool = true");
	p_file->store_line("");
	p_file->store_line("# Offset and boundaries");
	p_file->store_line("@export var camera_offset: Vector2 = Vector2.ZERO");
	p_file->store_line("@export var use_boundaries: bool = false");
	p_file->store_line("@export var boundary_rect: Rect2 = Rect2(-1000, -1000, 2000, 2000)");
	p_file->store_line("");
	p_file->store_line("# Target and state");
	p_file->store_line("var target: Node2D");
	p_file->store_line("var target_zoom: float");
	p_file->store_line("var shake_intensity: float = 0.0");
	p_file->store_line("var shake_duration: float = 0.0");
	p_file->store_line("var shake_timer: float = 0.0");
	p_file->store_line("var original_position: Vector2");
	p_file->store_line("");
	p_file->store_line("# Signals");
	p_file->store_line("signal zoom_changed(new_zoom: float)");
	p_file->store_line("signal target_changed(new_target: Node2D)");
	p_file->store_line("");
	p_file->store_line("func _ready():");
	p_file->store_line("\ttarget_zoom = default_zoom");
	p_file->store_line("\tzoom = Vector2(target_zoom, target_zoom)");
	p_file->store_line("\toriginal_position = global_position");
	p_file->store_line("\t");
	p_file->store_line("\t# Make this camera current");
	p_file->store_line("\tmake_current()");
	p_file->store_line("");
	p_file->store_line("func _process(delta: float):");
	p_file->store_line("\t# Handle zoom input");
	p_file->store_line("\t_handle_zoom_input(delta)");
	p_file->store_line("\t");
	p_file->store_line("\t# Follow target");
	p_file->store_line("\tif target:");
	p_file->store_line("\t\t_follow_target(delta)");
	p_file->store_line("\t");
	p_file->store_line("\t# Handle screen shake");
	p_file->store_line("\tif shake_timer > 0:");
	p_file->store_line("\t\t_handle_screen_shake(delta)");
	p_file->store_line("");
	p_file->store_line("func _handle_zoom_input(delta: float):");
	p_file->store_line("\tvar zoom_input = 0.0");
	p_file->store_line("\t");
	p_file->store_line("\t# Mouse wheel zoom");
	p_file->store_line("\tif Input.is_action_just_pressed(\"zoom_in\"):");
	p_file->store_line("\t\tzoom_input += zoom_step");
	p_file->store_line("\telif Input.is_action_just_pressed(\"zoom_out\"):");
	p_file->store_line("\t\tzoom_input -= zoom_step");
	p_file->store_line("\t");
	p_file->store_line("\t# Keyboard zoom (+ and -)");
	p_file->store_line("\tif Input.is_action_pressed(\"ui_plus\"):");
	p_file->store_line("\t\tzoom_input += zoom_step * delta * 2");
	p_file->store_line("\telif Input.is_action_pressed(\"ui_minus\"):");
	p_file->store_line("\t\tzoom_input -= zoom_step * delta * 2");
	p_file->store_line("\t");
	p_file->store_line("\t# Reset zoom");
	p_file->store_line("\tif Input.is_action_just_pressed(\"reset_zoom\"):");
	p_file->store_line("\t\ttarget_zoom = default_zoom");
	p_file->store_line("\t");
	p_file->store_line("\t# Apply zoom");
	p_file->store_line("\tif zoom_input != 0.0:");
	p_file->store_line("\t\ttarget_zoom = clamp(target_zoom + zoom_input, min_zoom, max_zoom)");
	p_file->store_line("\t\tzoom_changed.emit(target_zoom)");
	p_file->store_line("\t");
	p_file->store_line("\t# Smooth zoom interpolation");
	p_file->store_line("\tif smooth_zoom:");
	p_file->store_line("\t\tvar current_zoom_value = zoom.x");
	p_file->store_line("\t\tvar new_zoom_value = lerp(current_zoom_value, target_zoom, zoom_speed * delta)");
	p_file->store_line("\t\tzoom = Vector2(new_zoom_value, new_zoom_value)");
	p_file->store_line("\telse:");
	p_file->store_line("\t\tzoom = Vector2(target_zoom, target_zoom)");
	p_file->store_line("");
	p_file->store_line("func _follow_target(delta: float):");
	p_file->store_line("\tvar target_position = target.global_position + camera_offset");
	p_file->store_line("\t");
	p_file->store_line("\t# Apply boundaries if enabled");
	p_file->store_line("\tif use_boundaries:");
	p_file->store_line("\t\ttarget_position.x = clamp(target_position.x, boundary_rect.position.x, boundary_rect.position.x + boundary_rect.size.x)");
	p_file->store_line("\t\ttarget_position.y = clamp(target_position.y, boundary_rect.position.y, boundary_rect.position.y + boundary_rect.size.y)");
	p_file->store_line("\t");
	p_file->store_line("\t# Smooth follow");
	p_file->store_line("\tglobal_position = global_position.lerp(target_position, follow_speed * delta)");
	p_file->store_line("");
	p_file->store_line("func _handle_screen_shake(delta: float):");
	p_file->store_line("\tshake_timer -= delta");
	p_file->store_line("\t");
	p_file->store_line("\tif shake_timer <= 0:");
	p_file->store_line("\t\t# End shake");
	p_file->store_line("\t\tshake_intensity = 0.0");
	p_file->store_line("\t\toffset = Vector2.ZERO");
	p_file->store_line("\telse:");
	p_file->store_line("\t\t# Apply shake");
	p_file->store_line("\t\tvar shake_amount = shake_intensity * (shake_timer / shake_duration)");
	p_file->store_line("\t\toffset = Vector2(");
	p_file->store_line("\t\t\trandf_range(-shake_amount, shake_amount),");
	p_file->store_line("\t\t\trandf_range(-shake_amount, shake_amount)");
	p_file->store_line("\t\t)");
	p_file->store_line("");
	p_file->store_line("# Public methods");
	p_file->store_line("func set_target(new_target: Node2D):");
	p_file->store_line("\ttarget = new_target");
	p_file->store_line("\ttarget_changed.emit(new_target)");
	p_file->store_line("");
	p_file->store_line("func set_zoom_level(new_zoom: float):");
	p_file->store_line("\ttarget_zoom = clamp(new_zoom, min_zoom, max_zoom)");
	p_file->store_line("\tzoom_changed.emit(target_zoom)");
	p_file->store_line("");
	p_file->store_line("func start_screen_shake(intensity: float, duration: float):");
	p_file->store_line("\tif enable_screen_shake:");
	p_file->store_line("\t\tshake_intensity = intensity");
	p_file->store_line("\t\tshake_duration = duration");
	p_file->store_line("\t\tshake_timer = duration");
	p_file->store_line("");
	p_file->store_line("func stop_screen_shake():");
	p_file->store_line("\tshake_timer = 0.0");
	p_file->store_line("\tshake_intensity = 0.0");
	p_file->store_line("\toffset = Vector2.ZERO");
	p_file->store_line("");
	p_file->store_line("func get_current_zoom() -> float:");
	p_file->store_line("\treturn zoom.x");
	p_file->store_line("");
	p_file->store_line("func reset_to_default():");
	p_file->store_line("\ttarget_zoom = default_zoom");
	p_file->store_line("\tstop_screen_shake()");
	p_file->store_line("\tglobal_position = original_position");
}

void CameraTopdownRPGModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	p_file->store_line("[gd_scene load_steps=2 format=3 uid=\"uid://camera_topdown_rpg\"]");
	p_file->store_line("");
	p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/CameraTopdownRPG.gd\" id=\"1_camera_script\"]");
	p_file->store_line("");
	p_file->store_line("[node name=\"" + p_scene_name + "\" type=\"Camera2D\"]");
	p_file->store_line("script = ExtResource(\"1_camera_script\")");
	p_file->store_line("zoom = Vector2(1, 1)");
	p_file->store_line("process_callback = 1");
	p_file->store_line("enabled = true");
}
