#include "camera_3d_module.h"

void Camera3DModule::generate_script(Ref<FileAccess> p_file) {
	String filename = p_file->get_path().get_file();
	
	if (filename == "Camera3DController.gd") {
		p_file->store_line("# Camera3DController.gd");
		p_file->store_line("# Generated by Lupine Engine - 3D Camera Controller");
		p_file->store_line("# Advanced 3D camera with Mario 64-style controls");
		p_file->store_line("");
		p_file->store_line("extends Node3D");
		p_file->store_line("class_name Camera3DController");
		p_file->store_line("");
		p_file->store_line("# Camera modes");
		p_file->store_line("enum CameraMode {");
		p_file->store_line("\tFREE_LOOK,      # Player can rotate camera freely");
		p_file->store_line("\tFOLLOW,         # Camera follows behind player");
		p_file->store_line("\tLOCKED,         # Camera locked to specific angle");
		p_file->store_line("\tCINEMATIC,      # Cutscene camera");
		p_file->store_line("\tFIXED,          # Fixed position camera");
		p_file->store_line("\tSIDE_SCROLL     # 2.5D side-scrolling");
		p_file->store_line("}");
		p_file->store_line("");
		p_file->store_line("# Camera settings");
		p_file->store_line("@export var camera_mode: CameraMode = CameraMode.FREE_LOOK");
		p_file->store_line("@export var follow_speed: float = 5.0");
		p_file->store_line("@export var rotation_speed: float = 2.0");
		p_file->store_line("@export var zoom_speed: float = 5.0");
		p_file->store_line("@export var min_distance: float = 2.0");
		p_file->store_line("@export var max_distance: float = 10.0");
		p_file->store_line("@export var default_distance: float = 5.0");
		p_file->store_line("@export var height_offset: float = 2.0");
		p_file->store_line("@export var collision_margin: float = 0.2");
		p_file->store_line("");
		p_file->store_line("# Mouse sensitivity");
		p_file->store_line("@export var mouse_sensitivity: float = 0.003");
		p_file->store_line("@export var invert_y: bool = false");
		p_file->store_line("");
		p_file->store_line("# Camera constraints");
		p_file->store_line("@export var min_pitch: float = -80.0");
		p_file->store_line("@export var max_pitch: float = 80.0");
		p_file->store_line("@export var auto_rotate_speed: float = 1.0");
		p_file->store_line("@export var auto_rotate_delay: float = 3.0");
		p_file->store_line("");
		p_file->store_line("# Target and state");
		p_file->store_line("var target: Node3D = null");
		p_file->store_line("var camera: Camera3D");
		p_file->store_line("var current_distance: float");
		p_file->store_line("var target_distance: float");
		p_file->store_line("var pitch: float = 0.0");
		p_file->store_line("var yaw: float = 0.0");
		p_file->store_line("var auto_rotate_timer: float = 0.0");
		p_file->store_line("");
		p_file->store_line("# Collision detection");
		p_file->store_line("@onready var collision_ray: RayCast3D = $CollisionRay");
		p_file->store_line("@onready var cinematic_controller: CinematicCamera3D = $CinematicController");
		p_file->store_line("");
		p_file->store_line("# Camera zones and triggers");
		p_file->store_line("var current_camera_zone: CameraZone3D = null");
		p_file->store_line("var transition_time: float = 0.0");
		p_file->store_line("var is_transitioning: bool = false");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tcamera = get_child(0) as Camera3D");
		p_file->store_line("\tcurrent_distance = default_distance");
		p_file->store_line("\ttarget_distance = default_distance");
		p_file->store_line("\t");
		p_file->store_line("\t# Find player target");
		p_file->store_line("\tif not target:");
		p_file->store_line("\t\ttarget = get_tree().get_first_node_in_group(\"player\")");
		p_file->store_line("\t");
		p_file->store_line("\t# Setup collision detection");
		p_file->store_line("\tif collision_ray:");
		p_file->store_line("\t\tcollision_ray.collision_mask = 1  # World geometry");
		p_file->store_line("\t");
		p_file->store_line("\tadd_to_group(\"camera\")");
		p_file->store_line("");
		p_file->store_line("func _input(event):");
		p_file->store_line("\tif camera_mode == CameraMode.CINEMATIC:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Handle mouse look");
		p_file->store_line("\tif event is InputEventMouseMotion and Input.mouse_mode == Input.MOUSE_MODE_CAPTURED:");
		p_file->store_line("\t\t_handle_mouse_look(event)");
		p_file->store_line("\t");
		p_file->store_line("\t# Handle camera controls");
		p_file->store_line("\tif event.is_action_pressed(\"camera_reset\"):");
		p_file->store_line("\t\t_reset_camera_behind_player()");
		p_file->store_line("\t");
		p_file->store_line("\tif event.is_action_pressed(\"camera_lock\"):");
		p_file->store_line("\t\t_toggle_camera_lock()");
		p_file->store_line("");
		p_file->store_line("func _process(delta):");
		p_file->store_line("\tif not target or camera_mode == CameraMode.CINEMATIC:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t_update_camera_mode(delta)");
		p_file->store_line("\t_handle_zoom_input(delta)");
		p_file->store_line("\t_update_camera_position(delta)");
		p_file->store_line("\t_handle_collision()");
		p_file->store_line("\t_update_auto_rotate(delta)");
		p_file->store_line("");
		p_file->store_line("func _handle_mouse_look(event: InputEventMouseMotion):");
		p_file->store_line("\tif camera_mode in [CameraMode.FREE_LOOK, CameraMode.FOLLOW]:");
		p_file->store_line("\t\tyaw -= event.relative.x * mouse_sensitivity");
		p_file->store_line("\t\tpitch -= event.relative.y * mouse_sensitivity * (1 if not invert_y else -1)");
		p_file->store_line("\t\tpitch = clamp(pitch, deg_to_rad(min_pitch), deg_to_rad(max_pitch))");
		p_file->store_line("\t\t");
		p_file->store_line("\t\t# Reset auto-rotate timer");
		p_file->store_line("\t\tauto_rotate_timer = 0.0");
		p_file->store_line("");
		p_file->store_line("func _update_camera_mode(delta: float):");
		p_file->store_line("\tmatch camera_mode:");
		p_file->store_line("\t\tCameraMode.FREE_LOOK:");
		p_file->store_line("\t\t\t_update_free_look_camera(delta)");
		p_file->store_line("\t\tCameraMode.FOLLOW:");
		p_file->store_line("\t\t\t_update_follow_camera(delta)");
		p_file->store_line("\t\tCameraMode.LOCKED:");
		p_file->store_line("\t\t\t_update_locked_camera(delta)");
		p_file->store_line("\t\tCameraMode.FIXED:");
		p_file->store_line("\t\t\t_update_fixed_camera(delta)");
		p_file->store_line("\t\tCameraMode.SIDE_SCROLL:");
		p_file->store_line("\t\t\t_update_side_scroll_camera(delta)");
		p_file->store_line("");
		p_file->store_line("func _update_free_look_camera(delta: float):");
		p_file->store_line("\t# Full 360-degree camera control");
		p_file->store_line("\tvar target_position = target.global_position + Vector3.UP * height_offset");
		p_file->store_line("\t");
		p_file->store_line("\t# Calculate camera position based on spherical coordinates");
		p_file->store_line("\tvar camera_offset = Vector3(");
		p_file->store_line("\t\tsin(yaw) * cos(pitch),");
		p_file->store_line("\t\tsin(pitch),");
		p_file->store_line("\t\tcos(yaw) * cos(pitch)");
		p_file->store_line("\t) * current_distance");
		p_file->store_line("\t");
		p_file->store_line("\tglobal_position = global_position.lerp(target_position + camera_offset, follow_speed * delta)");
		p_file->store_line("\tcamera.look_at(target_position, Vector3.UP)");
		p_file->store_line("");
		p_file->store_line("func _update_follow_camera(delta: float):");
		p_file->store_line("\t# Camera follows behind player with some freedom");
		p_file->store_line("\tvar target_position = target.global_position + Vector3.UP * height_offset");
		p_file->store_line("\tvar player_forward = -target.global_transform.basis.z");
		p_file->store_line("\t");
		p_file->store_line("\t# Blend between player direction and current yaw");
		p_file->store_line("\tvar target_yaw = atan2(player_forward.x, player_forward.z)");
		p_file->store_line("\tyaw = lerp_angle(yaw, target_yaw, auto_rotate_speed * delta)");
		p_file->store_line("\t");
		p_file->store_line("\tvar camera_offset = Vector3(");
		p_file->store_line("\t\tsin(yaw) * cos(pitch),");
		p_file->store_line("\t\tsin(pitch),");
		p_file->store_line("\t\tcos(yaw) * cos(pitch)");
		p_file->store_line("\t) * current_distance");
		p_file->store_line("\t");
		p_file->store_line("\tglobal_position = global_position.lerp(target_position + camera_offset, follow_speed * delta)");
		p_file->store_line("\tcamera.look_at(target_position, Vector3.UP)");
		p_file->store_line("");
		p_file->store_line("func _handle_zoom_input(delta: float):");
		p_file->store_line("\t# Handle zoom with mouse wheel or controller");
		p_file->store_line("\tvar zoom_input = Input.get_axis(\"camera_zoom_in\", \"camera_zoom_out\")");
		p_file->store_line("\tif zoom_input != 0:");
		p_file->store_line("\t\ttarget_distance = clamp(target_distance + zoom_input * zoom_speed * delta, min_distance, max_distance)");
		p_file->store_line("\t");
		p_file->store_line("\t# Smooth zoom transition");
		p_file->store_line("\tcurrent_distance = lerp(current_distance, target_distance, zoom_speed * delta)");
		p_file->store_line("");
		p_file->store_line("func _handle_collision():");
		p_file->store_line("\tif not collision_ray:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t# Cast ray from target to camera position");
		p_file->store_line("\tvar target_pos = target.global_position + Vector3.UP * height_offset");
		p_file->store_line("\tvar camera_pos = global_position");
		p_file->store_line("\tvar direction = (camera_pos - target_pos).normalized()");
		p_file->store_line("\tvar distance = target_pos.distance_to(camera_pos)");
		p_file->store_line("\t");
		p_file->store_line("\tcollision_ray.global_position = target_pos");
		p_file->store_line("\tcollision_ray.target_position = direction * distance");
		p_file->store_line("\tcollision_ray.force_raycast_update()");
		p_file->store_line("\t");
		p_file->store_line("\tif collision_ray.is_colliding():");
		p_file->store_line("\t\tvar collision_point = collision_ray.get_collision_point()");
		p_file->store_line("\t\tvar safe_distance = target_pos.distance_to(collision_point) - collision_margin");
		p_file->store_line("\t\tif safe_distance < current_distance:");
		p_file->store_line("\t\t\tglobal_position = target_pos + direction * safe_distance");
		p_file->store_line("");
		p_file->store_line("func set_camera_mode(new_mode: CameraMode):");
		p_file->store_line("\tcamera_mode = new_mode");
		p_file->store_line("");
		p_file->store_line("func start_cinematic(cinematic_data: Dictionary):");
		p_file->store_line("\tcamera_mode = CameraMode.CINEMATIC");
		p_file->store_line("\tif cinematic_controller:");
		p_file->store_line("\t\tcinematic_controller.start_cinematic(cinematic_data)");
		p_file->store_line("");
		p_file->store_line("func end_cinematic():");
		p_file->store_line("\tcamera_mode = CameraMode.FREE_LOOK");
		p_file->store_line("\tif cinematic_controller:");
		p_file->store_line("\t\tcinematic_controller.end_cinematic()");
	} else if (filename == "CinematicCamera3D.gd") {
		p_file->store_line("# CinematicCamera3D.gd");
		p_file->store_line("# Generated by Lupine Engine - Cinematic Camera Controller");
		p_file->store_line("# Handles cutscenes and scripted camera movements");
		p_file->store_line("");
		p_file->store_line("extends Node3D");
		p_file->store_line("class_name CinematicCamera3D");
		p_file->store_line("");
		p_file->store_line("# Cinematic types");
		p_file->store_line("enum CinematicType {");
		p_file->store_line("\tPAN,           # Pan from point A to B");
		p_file->store_line("\tORBIT,         # Orbit around a target");
		p_file->store_line("\tFOLLOW_PATH,   # Follow a predefined path");
		p_file->store_line("\tLOOK_AT,       # Look at specific targets");
		p_file->store_line("\tSHAKE,         # Camera shake effect");
		p_file->store_line("\tZOOM           # Zoom in/out effect");
		p_file->store_line("}");
		p_file->store_line("");
		p_file->store_line("# Current cinematic state");
		p_file->store_line("var is_active: bool = false");
		p_file->store_line("var current_cinematic: Dictionary = {}");
		p_file->store_line("var cinematic_time: float = 0.0");
		p_file->store_line("var cinematic_duration: float = 0.0");
		p_file->store_line("");
		p_file->store_line("# Camera reference");
		p_file->store_line("var camera_controller: Camera3DController");
		p_file->store_line("var camera: Camera3D");
		p_file->store_line("");
		p_file->store_line("# Cinematic data");
		p_file->store_line("var start_position: Vector3");
		p_file->store_line("var end_position: Vector3");
		p_file->store_line("var start_rotation: Vector3");
		p_file->store_line("var end_rotation: Vector3");
		p_file->store_line("var look_target: Node3D");
		p_file->store_line("");
		p_file->store_line("func _ready():");
		p_file->store_line("\tcamera_controller = get_parent() as Camera3DController");
		p_file->store_line("\tcamera = camera_controller.camera");
		p_file->store_line("");
		p_file->store_line("func _process(delta):");
		p_file->store_line("\tif not is_active:");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\tcinematic_time += delta");
		p_file->store_line("\tvar progress = cinematic_time / cinematic_duration");
		p_file->store_line("\t");
		p_file->store_line("\tif progress >= 1.0:");
		p_file->store_line("\t\tend_cinematic()");
		p_file->store_line("\t\treturn");
		p_file->store_line("\t");
		p_file->store_line("\t_update_cinematic(progress)");
		p_file->store_line("");
		p_file->store_line("func start_cinematic(cinematic_data: Dictionary):");
		p_file->store_line("\tcurrent_cinematic = cinematic_data");
		p_file->store_line("\tis_active = true");
		p_file->store_line("\tcinematic_time = 0.0");
		p_file->store_line("\tcinematic_duration = cinematic_data.get(\"duration\", 3.0)");
		p_file->store_line("\t");
		p_file->store_line("\t# Store initial camera state");
		p_file->store_line("\tstart_position = camera_controller.global_position");
		p_file->store_line("\tstart_rotation = camera_controller.rotation");
		p_file->store_line("\t");
		p_file->store_line("\t# Setup cinematic based on type");
		p_file->store_line("\tvar cinematic_type = cinematic_data.get(\"type\", CinematicType.PAN)");
		p_file->store_line("\tmatch cinematic_type:");
		p_file->store_line("\t\tCinematicType.PAN:");
		p_file->store_line("\t\t\t_setup_pan_cinematic(cinematic_data)");
		p_file->store_line("\t\tCinematicType.ORBIT:");
		p_file->store_line("\t\t\t_setup_orbit_cinematic(cinematic_data)");
		p_file->store_line("\t\tCinematicType.LOOK_AT:");
		p_file->store_line("\t\t\t_setup_look_at_cinematic(cinematic_data)");
		p_file->store_line("");
		p_file->store_line("func end_cinematic():");
		p_file->store_line("\tis_active = false");
		p_file->store_line("\tcurrent_cinematic.clear()");
		p_file->store_line("\t");
		p_file->store_line("\t# Emit completion signal");
		p_file->store_line("\tif current_cinematic.has(\"on_complete\"):");
		p_file->store_line("\t\tcurrent_cinematic.on_complete.call()");
		p_file->store_line("");
		p_file->store_line("func _update_cinematic(progress: float):");
		p_file->store_line("\tvar cinematic_type = current_cinematic.get(\"type\", CinematicType.PAN)");
		p_file->store_line("\tvar eased_progress = _ease_in_out(progress)");
		p_file->store_line("\t");
		p_file->store_line("\tmatch cinematic_type:");
		p_file->store_line("\t\tCinematicType.PAN:");
		p_file->store_line("\t\t\t_update_pan_cinematic(eased_progress)");
		p_file->store_line("\t\tCinematicType.ORBIT:");
		p_file->store_line("\t\t\t_update_orbit_cinematic(eased_progress)");
		p_file->store_line("\t\tCinematicType.LOOK_AT:");
		p_file->store_line("\t\t\t_update_look_at_cinematic(eased_progress)");
		p_file->store_line("");
		p_file->store_line("func _ease_in_out(t: float) -> float:");
		p_file->store_line("\treturn t * t * (3.0 - 2.0 * t)");
		p_file->store_line("");
		p_file->store_line("func _setup_pan_cinematic(data: Dictionary):");
		p_file->store_line("\tend_position = data.get(\"end_position\", start_position)");
		p_file->store_line("\tend_rotation = data.get(\"end_rotation\", start_rotation)");
		p_file->store_line("");
		p_file->store_line("func _update_pan_cinematic(progress: float):");
		p_file->store_line("\tcamera_controller.global_position = start_position.lerp(end_position, progress)");
		p_file->store_line("\tcamera_controller.rotation = start_rotation.lerp(end_rotation, progress)");
		p_file->store_line("");
		p_file->store_line("func _setup_orbit_cinematic(data: Dictionary):");
		p_file->store_line("\tlook_target = data.get(\"target\", null)");
		p_file->store_line("");
		p_file->store_line("func _update_orbit_cinematic(progress: float):");
		p_file->store_line("\tif look_target:");
		p_file->store_line("\t\tvar orbit_radius = current_cinematic.get(\"radius\", 5.0)");
		p_file->store_line("\t\tvar orbit_speed = current_cinematic.get(\"speed\", 1.0)");
		p_file->store_line("\t\tvar angle = progress * TAU * orbit_speed");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tvar orbit_position = look_target.global_position + Vector3(");
		p_file->store_line("\t\t\tsin(angle) * orbit_radius,");
		p_file->store_line("\t\t\t2.0,");
		p_file->store_line("\t\t\tcos(angle) * orbit_radius");
		p_file->store_line("\t\t)");
		p_file->store_line("\t\t");
		p_file->store_line("\t\tcamera_controller.global_position = orbit_position");
		p_file->store_line("\t\tcamera.look_at(look_target.global_position, Vector3.UP)");
		p_file->store_line("");
		p_file->store_line("func _setup_look_at_cinematic(data: Dictionary):");
		p_file->store_line("\tlook_target = data.get(\"target\", null)");
		p_file->store_line("");
		p_file->store_line("func _update_look_at_cinematic(progress: float):");
		p_file->store_line("\tif look_target:");
		p_file->store_line("\t\tcamera.look_at(look_target.global_position, Vector3.UP)");
	}
}

void Camera3DModule::generate_scene(Ref<FileAccess> p_file, const String &p_scene_name) {
	if (p_scene_name == "Camera3DController") {
		p_file->store_line("[gd_scene load_steps=3 format=3 uid=\"uid://camera_3d_controller\"]");
		p_file->store_line("");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/camera/Camera3DController.gd\" id=\"1_camera_controller_script\"]");
		p_file->store_line("[ext_resource type=\"Script\" path=\"res://scripts/camera/CinematicCamera3D.gd\" id=\"2_cinematic_script\"]");
		p_file->store_line("");
		p_file->store_line("[node name=\"Camera3DController\" type=\"Node3D\"]");
		p_file->store_line("script = ExtResource(\"1_camera_controller_script\")");
		p_file->store_line("");
		p_file->store_line("[node name=\"Camera3D\" type=\"Camera3D\" parent=\".\"]");
		p_file->store_line("transform = Transform3D(1, 0, 0, 0, 0.866025, 0.5, 0, -0.5, 0.866025, 0, 2, 5)");
		p_file->store_line("");
		p_file->store_line("[node name=\"CollisionRay\" type=\"RayCast3D\" parent=\".\"]");
		p_file->store_line("collision_mask = 1");
		p_file->store_line("");
		p_file->store_line("[node name=\"CinematicController\" type=\"Node3D\" parent=\".\"]");
		p_file->store_line("script = ExtResource(\"2_cinematic_script\")");
	}
}
